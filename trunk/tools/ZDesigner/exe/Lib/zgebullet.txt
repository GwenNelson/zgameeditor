/*
  Adapter to the ZGEBullet DLL, a wraper of the physics library Bullet.
  http://bulletphysics.org

  Created by Rado1(c)2011

  Download DLL from this thread: http://www.emix8.org/forum/viewtopic.php?t=830

*/

// Global constants

// rotation-related
const float PIx2 = PI * 2; // 360 degrees
const float PI2 = PI / 2; // 90 degrees
const float PI3 = PI / 3; // 60 degrees
const float PI4 = PI / 4; // 45 degrees
const float PI6 = PI / 6; // 30 degrees

const float ROT360 = 1.0; // 360 degrees
const float ROT180 = 0.5; // 180 degrees
const float ROT120 = 0.3333; // 120 degrees
const float ROT90 = 0.25; // 90 degrees
const float ROT60 = 0.1666; // 60 degrees
const float ROT45 = 0.125; // 45 degrees
const float ROT30 = 0.0833; // 30 degrees

// activation states
const int ACTIVE_TAG = 1;
const int DISABLE_DEACTIVATION = 4;
const int DISABLE_SIMULATION = 5;
const int ISLAND_SLEEPING = 2;
const int WANTS_DEACTIVATION = 3;

// limit default values
const float DEFAULT_HINGE_SOFTNESS = 0.9;
const float DEFAULT_HINGE_BIAS_FACTOR = 0.3;
const float DEFAULT_HINGE_RELAXATION_FACTOR = 1.0;
const float DEFAULT_CONE_TWIST_SOFTNESS = 0.8;
const float DEFAULT_CONE_TWIST_BIAS_FACTOR = 0.3;
const float DEFAULT_CONE_TWIST_RELAXATION_FACTOR = 1.0;
const int AXIS_X_LINEAR = 0;
const int AXIS_Y_LINEAR = 1;
const int AXIS_Z_LINEAR = 2;
const int AXIS_X_ANGULAR = 3;
const int AXIS_Y_ANGULAR = 4;
const int AXIS_Z_ANGULAR = 5;

// boolean
const int FALSE = 0;
const int TRUE = 1;

// World

int zbtCreateWorld(int bComputeCollisions) {}

int zbtDestroyWorld() {}

void zbtSetWorldGravity(float x, float y, float z) {}

int zbtStepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {}

// Collision shapes

int zbtCreateStaticPlaneShape(float normalX, float normalY, float normalZ,
  float planeConstant) {}

int zbtCreateBoxShape(float x, float y, float z) {}

int zbtCreateSphereShape(float radius) {}

int zbtCreateConeShape(float radius, float height) {}

int zbtCreateCylinderShape(float radius, float height) {}

int zbtCreateCapsuleShape(float radius, float height) {}

int zbtCreateCompoundShape() {}

int zbtAddChildShape(int compoundId, int childId,
  float x, float y, float z, float rx, float ry, float rz) {}

int zbtRemoveChildShape(int compoundId, int childId) {}

int zbtCreateHeightList() {}

int zbtAddHeight(int heightListId, float height) {}

int zbtAddPoint(int heightListId, float x, float y, float z) {}

int zbtUpdateHeight(int heightListId, int index, float height) {}

int zbtClearHeightList(int heightListId) {}

int zbtClearAllHeightLists() {}

int zbtCreateHeightfieldTerrainShape(int heightListId, int width, int height,
  float minHeight, float maxHeight, int upAxis, int bFlipQuadEdges,
  float scalingX, float scalingY, float scalingZ) {}

int zbtCreateConvexHullShape(int heightListId) {}

int zbtStartTriangleMeshShape() {}

int zbtAddTriangle(float x1,float y1,float z1,
	float x2,float y2,float z2,float x3,float y3,float z3) {}

int zbtFinishTriangleMeshShape(int bIsStatic) {}

int zbtSetShapeMargin(int shapeId, float margin) {}

int zbtDeleteShape(int shapeId) {}

int zbtDeleteAllShapes() {}

// Rigid bodies

int zbtAddRigidBody(float mass, int shapeId, float x, float y, float z,
  float rx, float ry, float rz) {}

int zbtDeleteRigidBody(int rigidBodyId) {}

int zbtSetMass(int rigidBodyId, float mass) {}

int zbtSetFriction(int rigidBodyId, float friction) {}

int zbtSetDamping(int rigidBodyId, float linDamping, float angDamping) {}

int zbtSetRestitution(int rigidBodyId, float restitution) {}

int zbtSetHitFraction(int rigidBodyId, float hitFraction ) {}

float zbtGetPositionX(int rigidBodyId) {}

float zbtGetPositionY(int rigidBodyId) {}

float zbtGetPositionZ(int rigidBodyId) {}

int zbtSetPosition(int rigidBodyId, float x, float y, float z) {}

float zbtGetRotationX(int rigidBodyId) {}

float zbtGetRotationY(int rigidBodyId) {}

float zbtGetRotationZ(int rigidBodyId) {}

int zbtSetRotation(int rigidBodyId, float rx, float ry, float rz) {}

int zbtSetGravity(int rigidBodyId, float x, float y, float z) {}

float zbtGetLinearVelocityX(int rigidBodyId) {}

float zbtGetLinearVelocityY(int rigidBodyId) {}

float zbtGetLinearVelocityZ(int rigidBodyId) {}

int zbtSetLinearVelocity(int rigidBodyId, float x, float y, float z) {}

float zbtGetAngularVelocityX(int rigidBodyId) {}

float zbtGetAngularVelocityY(int rigidBodyId) {}

float zbtGetAngularVelocityZ(int rigidBodyId) {}

int zbtSetAngularVelocity(int rigidBodyId, float x, float y, float z) {}

int zbtApplyCentralImpulse(int rigidBodyId, float x, float y, float z) {}

int zbtApplyTorqueImpulse(int rigidBodyId, float rx, float ry, float rz) {}

int zbtApplyImpulse(int rigidBodyId, float x, float y, float z,
  float relX, float relY, float relZ) {}

// Activation and deactivation

int zbtIsActive(int rigidBodyId) {}

int zbtActivate(int rigidBodyId, int bForceActivation) {}

int zbtSetActivationState(int rigidBodyId, int newState) {}

int zbtSetDeactivationTime(int rigidBodyId, float time) {}

int zbtSetDeactivationThresholds(int rigidBodyId, float linear, float angular) {}

// Collision detection

int zbtGetCollisionNum() {}

int zbtGetCollisionObject1(int index) {}

int zbtGetCollisionObject2(int index) {}

int zbtGetCollisionOfNum(int rigidBodyId) {}

int zbtGetCollisionOf(int rigidBodyId, int index) {}

// Constraints and limits

int zbtAreConnected(int rigidBodyAId, int rigidBodyBId) {}

// Bug of Bullet: problem with deleting a constraint if disableCollision == 0
// http://bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=9&t=6486

int zbtAddPoint2PointConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz, int bDisableCollision) {}

int zbtAddPoint2PointConstraint1(int rigidBodyId,
  float pivotX, float pivotY, float pivotZ, int bDisableCollision) {}

int zbtAddHingeConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float axisAx, float axisAy, float axisAz,
	float axisBx, float axisBy, float axisBz, int bDisableCollision) {}

int zbtAddHingeConstraint1(int rigidBodyId,
	float pivotX, float pivotY, float pivotZ,
	float axisX, float axisY, float axisZ, int bDisableCollision) {}

int zbtSetHingeLimits(int constraintId, float low, float high,
  float softness, float biasFactor, float relaxationFactor) {}

int zbtEnableHingeAngularMotor(int constraintId, int bEnableMotor,
  float targetVelocity, float maxMotorImpulse) {}

int zbtAddConeTwistConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz, int bDisableCollision) {}

int zbtAddConeTwistConstraint1(int rigidBodyId,
	float pivotX, float pivotY, float pivotZ,
	float rotX, float rotY, float rotZ, int bDisableCollision) {}

int zbtSetConeTwistLimits(int constraintId, float swingX, float swingY, float swingZ,
	float softness, float biasFactor, float relaxationFactor) {}

int zbtAddSliderConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz,
  int bUseLinearReferenceFrameA, int bDisableCollision) {}

int zbtSetSliderLimits(int constraintId, float linLower, float linUpper,
  float angLower, float angUpper) {}

int zbtSetSliderSoftness(int constraintId, float dirLin, float dirAng,
  float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtSetSliderRestitution(int constraintId, float dirLin, float dirAng,
  float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtSetSliderDamping(int constraintId, float dirLin, float dirAng,
  float limLin, float limAng, float orthoLin, float orthoAng) {}

int zbtEnableSliderMotor(int constraintId, int bEnableLinMotor,
  float targetLinVelocity, float maxLinForce,
	int bEnableAngMotor, float targetAngVelocity, float maxAngForce) {}

int zbtAddGeneric6DofConstraint(int rigidBodyAId, int rigidBodyBId,
	float pivotAx, float pivotAy, float pivotAz,
	float pivotBx, float pivotBy, float pivotBz,
	float rotAx, float rotAy, float rotAz,
	float rotBx, float rotBy, float rotBz,
  int bUseLinearReferenceFrameA, int bDisableCollision) {}

int zbtSetGeneric6DofLimits(int constraintId, int axis, float lo, float hi) {}

int zbtSetGeneric6DofLinearLimits(int constraintId,
  float lowerX, float lowerY, float lowerZ,
	float upperX, float upperY, float upperZ) {}

int zbtSetGeneric6DofAngularLimits(int constraintId,
  float lowerX, float lowerY, float lowerZ,
	float upperX, float upperY, float upperZ) {}

int zbtDeleteConstraint(int constraintId) {}

// Raycasting

int zbtRayTest(float fromX, float fromY, float fromZ,
  float toX, float toY, float toZ) {}

float zbtGetRayTestHitPointX() {}

float zbtGetRayTestHitPointY() {}

float zbtGetRayTestHitPointZ() {}

float zbtGetRayTestHitNormalX() {}

float zbtGetRayTestHitNormalY() {}

float zbtGetRayTestHitNormalZ() {}
<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Caption="TripleE" AndroidPackageName="org.emix8.triplee">
  <OnLoaded>
    <ZExpression Expression="BaseDifficulty=DefaultDifficulty;"/>
    <DefineCollision Name="PlayerShotsVsEnemies" Cat1="1" Cat2="2"/>
    <DefineCollision Name="PlayerShotVsEnemyShots" Cat1="1" Cat2="3"/>
    <DefineCollision Name="PlayerVsEnemies" Cat1="4" Cat2="2"/>
    <DefineCollision Name="PlayerVsEnemyShots" Cat1="4" Cat2="3"/>
    <SetAppState State="AppState_TitleScreen"/>
  </OnLoaded>
  <States>
    <AppState Name="AppState_TitleScreen">
      <OnStart>
        <RemoveAllModels/>
        <SpawnModel Model="TitleScreenModel"/>
      </OnStart>
    </AppState>
    <AppState Name="AppState_GameOver">
      <OnStart>
        <RemoveAllModels/>
        <SpawnModel Model="GameOverModel"/>
      </OnStart>
    </AppState>
    <AppState Name="AppState_Playing">
      <OnStart>
        <RemoveAllModels/>
        <ZExpression>
          <Expression>
<![CDATA[LevelNo=0;
EnemiesOnScreen=0;
PlayerScore=0;
PlayerLives=3;]]>
          </Expression>
        </ZExpression>
        <SpawnModel Model="LevelModel" SpawnStyle="1"/>
        <SpawnModel Comment="Måste clone by reference annars kan inte enemy-steer fungera mot playermodel" Model="PlayerModel" SpawnStyle="1"/>
      </OnStart>
    </AppState>
  </States>
  <Content>
    <AudioMixer Ch0Active="1" Ch0Volume="0.31" Ch0UseDelay="1" Ch0DelayLength="0.1" Ch1Active="1" Ch1Volume="0.38" Ch1UseDelay="1" Ch1DelayLength="0.26" Lfo0Active="1" Lfo0IsBipolar="1" Lfo0Speed="0.05" Lfo1Active="1" Lfo1IsBipolar="1" Lfo1Speed="0.01"/>
    <Group Name="Globals">
      <Children>
        <Variable Name="Temp1"/>
        <Constant Name="ScrollSpeed" Value="2"/>
        <Variable Name="LevelNo"/>
        <Variable Name="EnemiesOnScreen"/>
        <Variable Name="Difficulty"/>
        <Variable Name="BaseDifficulty"/>
        <Constant Name="RightEdge" Value="6"/>
        <Constant Name="TopEdge" Comment="0" Value="5"/>
        <Variable Name="Temp2"/>
        <Variable Name="Temp3"/>
        <Variable Name="Temp4"/>
        <Constant Name="LeftEdge" Value="-6"/>
        <Constant Name="BottomEdge" Value="-5"/>
        <Constant Name="PlayerShotSpeed" Value="24"/>
        <Variable Name="PlayerScore"/>
        <Constant Name="EnemyShotCategory" Value="3"/>
        <Constant Name="PlayerCategory" Value="4"/>
        <Constant Name="DefaultDifficulty" Value="0.5"/>
        <Variable Name="PlayerLives"/>
      </Children>
    </Group> <!-- Globals -->

    <Group Name="Player">
      <Children>
        <Mesh Name="PlayerMesh">
          <Producers>
            <MeshSphere ZSamples="20" RadialSamples="20"/>
            <MeshExpression Scale="0.5 0.2 0.5">
              <Expression>
<![CDATA[//V : current vertex
Temp1=1-abs(this.V.X);
this.V.X*=1+Temp1;

Temp1=1-abs(this.V.Y);
if(this.V.Y>0) {
  Temp1 += noise2(this.V.X,0)*1.2;
  Temp1-= (1 - this.V.X) * 0.45;
}
this.V.Y*=1+Temp1;]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Model Name="PlayerModel" Position="-3.9142 3.9932 0" Velocity="0.0183 0.0685 0" Category="4" CollisionBounds="0.1 0.4 0 0">
          <Definitions>
            <Variable Name="PlayerAngle"/>
            <Variable Name="PlayerShieldTime"/>
          </Definitions>
          <States>
            <ModelState Name="PlayerState_Playing">
              <OnUpdate>
                <MouseModelController ScaleX="5" ScaleY="4"/>
                <KeyPress Comment="Fire" Keys="A{" RepeatDelay="0.06">
                  <OnPressed>
                    <SpawnModel Model="PlayerShotModel" UseSpawnerPosition="255"/>
                  </OnPressed>
                </KeyPress>
                <KeyPress Name="AngleKeypress" Keys="WS">
                  <OnPressed>
                    <ZExpression>
                      <Expression>
<![CDATA[Temp1=(0.75 * App.DeltaTime);
if(AngleKeyPress.KeyIndex==1)
  Temp1*=-1;
PlayerAngle+=Temp1;
PlayerModel.Rotation.Z = PlayerAngle;]]>
                      </Expression>
                    </ZExpression>
                  </OnPressed>
                </KeyPress>
                <ZExpression>
                  <Expression>
<![CDATA[if(PlayerAngle!=0) {
  PlayerAngle*=0.98;
  PlayerModel.Rotation.Z=PlayerAngle;
}]]>
                  </Expression>
                </ZExpression>
              </OnUpdate>
            </ModelState>
            <ModelState Name="PlayerState_LoseLife">
              <OnStart>
                <ZExpression>
                  <Expression>
<![CDATA[CurrentModel.Velocity.X=0;
CurrentModel.Velocity.Y=0;
CurrentModel.Position.X=LeftEdge-1;

PlayerShieldTime=2;

PlayerLives-=1;]]>
                  </Expression>
                </ZExpression>
                <Condition Expression="return PlayerLives&gt;0;">
                  <OnTrue>
                    <StartAnimator Animator="PlayerLoseLifeAnim1"/>
                  </OnTrue>
                  <OnFalse>
                    <SetAppState State="AppState_GameOver"/>
                  </OnFalse>
                </Condition>
              </OnStart>
              <OnUpdate>
                <AnimatorGroup Name="PlayerLoseLifeAnim1" Duration="1">
                  <OnStop>
                    <SetModelState State="PlayerState_Playing"/>
                  </OnStop>
                </AnimatorGroup>
                <ZExpression Expression="CurrentModel.Position.X+=App.DeltaTime*2;"/>
              </OnUpdate>
            </ModelState>
          </States>
          <OnRender>
            <Condition Expression="return (PlayerShieldTime&lt;=0) || (frac(App.Time*8)&lt;0.5);">
              <OnTrue>
                <UseMaterial Material="PlayerMaterial"/>
                <RenderMesh Mesh="PlayerMesh"/>
                <RenderTransformGroup Translate="0.33 0.09 0.46" Rotate="-0.01 0.02 0">
                  <Children>
                    <RenderSetColor Color="1 1 1 1"/>
                    <RenderMesh Mesh="PlayerEyeMesh"/>
                    <RenderSetColor Color="0 0 0.25 1"/>
                    <RenderMesh Mesh="PlayerPupillMesh"/>
                  </Children>
                </RenderTransformGroup>
              </OnTrue>
            </Condition>
          </OnRender>
          <OnUpdate>
            <ZExpression>
              <Expression>
<![CDATA[if(PlayerShieldTime>0) {
  PlayerShieldTime-=App.DeltaTime;
}]]>
              </Expression>
            </ZExpression>
          </OnUpdate>
          <OnSpawn>
            <SetModelState State="PlayerState_Playing"/>
            <ZExpression>
              <Expression>
<![CDATA[//Måste nollställa state eftersom spawn by reference
PlayerShieldTime=0;
PlayerAngle=0;
PlayerModel.Rotation.Z=0;]]>
              </Expression>
            </ZExpression>
          </OnSpawn>
          <OnCollision>
            <Condition Expression="return PlayerShieldTime&lt;=0;">
              <OnTrue>
                <SetModelState State="PlayerState_LoseLife"/>
              </OnTrue>
            </Condition>
          </OnCollision>
        </Model>
        <Material Name="PlayerMaterial" Color="0.16 0.16 0.16 1"/>
        <Mesh Name="PlayerEyeMesh">
          <Producers>
            <MeshSphere Scale="0.2 0.15 0.03" ZSamples="4" RadialSamples="13"/>
          </Producers>
        </Mesh>
        <Mesh Name="PlayerPupillMesh">
          <Producers>
            <MeshSphere Scale="0.1 0.1 0.1" ZSamples="4"/>
          </Producers>
        </Mesh>
        <Mesh Name="PlayerShotMesh">
          <Producers>
            <MeshBox Scale="0.1 0.1 0.1"/>
          </Producers>
        </Mesh>
        <Bitmap Name="PlayerShotBitmap">
          <Producers>
            <BitmapRect Color="0 0 0.1 1" Size="-1 -1 1 1"/>
            <BitmapRect Color="1 1 1 1" Size="-0.5 -0.5 0.5 0.5"/>
          </Producers>
        </Bitmap>
        <Material Name="PlayerShotMaterial">
          <Textures>
            <MaterialTexture Texture="PlayerShotBitmap" TexCoords="1"/>
          </Textures>
        </Material>
        <Model Name="PlayerShotModel" Scale="1.5 1 1" Category="1" CollisionBounds="0.1 0.1 0 0">
          <Definitions>
            <Variable Name="PlayerShotPersonality"/>
          </Definitions>
          <OnRender>
            <UseMaterial Material="PlayerShotMaterial"/>
            <RenderMesh Mesh="PlayerShotMesh"/>
          </OnRender>
          <OnUpdate>
            <Condition>
              <Expression>
<![CDATA[return
  (PlayerShotModel.Position.X<LeftEdge) ||
  (PlayerShotModel.Position.X>RightEdge) ||
  (PlayerShotModel.Position.Y>TopEdge) ||
  (PlayerShotModel.Position.Y<BottomEdge);]]>
              </Expression>
              <OnTrue>
                <RemoveModel/>
              </OnTrue>
            </Condition>
            <ZExpression>
              <Expression>
<![CDATA[//PlayerShotModel.Rotation.X += App.DeltaTime*(PlayerShotPersonality*1.1);
//PlayerShotModel.Rotation.Y += App.DeltaTime*(PlayerShotPersonality*1.314);
//PlayerShotModel.Rotation.Z += App.DeltaTime*(PlayerShotPersonality*1.712);]]>
              </Expression>
            </ZExpression>
          </OnUpdate>
          <OnSpawn>
            <ZExpression>
              <Expression>
<![CDATA[PlayerShotPersonality=rnd();

Temp1=( (1-PlayerAngle+0.25)*(3.14*2)) + random(0,0.01);
PlayerShotModel.Velocity.X=sin(Temp1) * PlayerShotSpeed;
PlayerShotModel.Velocity.Y=cos(Temp1) * PlayerShotSpeed;

PlayerShotModel.Rotation.Z = PlayerAngle;


//PlayerShotModel.Rotation.X = PlayerShotPersonality*1.1;
//PlayerShotModel.Rotation.Y = PlayerShotPersonality*1.314;
//PlayerShotModel.Rotation.Z = PlayerShotPersonality*1.712;]]>
              </Expression>
            </ZExpression>
            <PlaySound Sound="PlayerShotSound" NoteNr="40"/>
          </OnSpawn>
          <OnCollision>
            <RemoveModel/>
          </OnCollision>
        </Model>
        <Sound Name="PlayerShotSound" Comment="48" Length="0.1" Volume="0.41" UseFilter="1" FilterCutoff="0.47" FilterQ="0.79" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Destination="2" Mod1Amount="0.63" Mod2Active="1" Mod2Source="5" Mod2Amount="0.16" Mod3Active="1" Mod3Source="5" Mod3Destination="12" Mod3Amount="0.25" Env0Active="1" Env0ReleaseTime="0.35"/>
      </Children>
    </Group> <!-- Player -->

    <Group Name="Level">
      <Children>
        <Model Name="LevelModel">
          <Definitions>
            <Variable Name="LevelEmitCounter" Comment="Hur många enemies att emitta just nu"/>
            <Variable Name="LevelMaxOnScreen"/>
            <Variable Name="LevelEmitDelay"/>
            <Variable Name="LevelEmitTimer"/>
            <Variable Name="LevelEmitTreeTimer"/>
            <Variable Name="LevelLastScore"/>
            <Variable Name="LevelScoreVibrate"/>
            <Variable Name="LevelEmitDelayDecrease"/>
          </Definitions>
          <States>
            <ModelState Name="Stage0_LevelState">
              <OnStart>
                <ZExpression>
                  <Expression>
<![CDATA[//Stage 0 setup
LevelMaxOnScreen=3 + Difficulty*3;
LevelEmitCounter = 20 + Difficulty * 10;
LevelEmitDelay=clamp(4 - (Difficulty*4),0.25,4);

//End of stage emit-delay
Temp1=0.1;
LevelEmitDelayDecrease=(LevelEmitDelay - Temp1)/LevelEmitCounter;

LevelEmitTimer=LevelEmitDelay;
LevelEmitTreeTimer=0;]]>
                  </Expression>
                </ZExpression>
              </OnStart>
              <OnUpdate>
                <ZExpression>
                  <Expression>
<![CDATA[LevelEmitTreeTimer -= App.DeltaTime;

Temp1=0;

if( EnemiesOnScreen<LevelMaxOnScreen ) {
  LevelEmitTimer -= App.DeltaTime;
  if(LevelEmitTimer<=0) {
    LevelEmitTimer=random(LevelEmitDelay,0.1);
    LevelEmitDelay-=LevelEmitDelayDecrease;
    LevelEmitCounter-=1;
    Temp1=1;
  }
}

//exit: emit if temp1==1]]>
                  </Expression>
                </ZExpression>
                <Condition Expression="return Temp1==1;">
                  <OnTrue>
                    <SpawnModel Model="MonkeyModel"/>
                    <Condition Expression="return LevelEmitCounter==0;">
                      <OnTrue>
                        <SetModelState State="Stage1_LevelState"/>
                      </OnTrue>
                    </Condition>
                  </OnTrue>
                </Condition>
                <Condition Expression="return LevelEmitTreeTimer&lt;=0;">
                  <OnTrue>
                    <SpawnModel Model="TreeModel"/>
                    <ZExpression Expression="LevelEmitTreeTimer=3 + random(0,1.5);"/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
            </ModelState>
            <ModelState Name="Stage1_LevelState">
              <OnStart>
                <ZExpression>
                  <Expression>
<![CDATA[LevelMaxOnScreen=3 + Difficulty*3;
LevelEmitCounter = 30 + Difficulty * 10;
LevelEmitDelay=clamp(4 - (Difficulty*4),0.25,4);

//End of stage emit-delay
Temp1=0.1;
LevelEmitDelayDecrease=(LevelEmitDelay - Temp1)/LevelEmitCounter;


//Stage 1 setup
LevelMaxOnScreen=4 + Difficulty*5;
LevelEmitDelay=clamp(1 - (Difficulty*1),0.25,4);
LevelEmitCounter = 20 + Difficulty * 20;

//End of stage emit-delay
Temp1=0.1;
LevelEmitDelayDecrease=(LevelEmitDelay - Temp1)/LevelEmitCounter;

LevelEmitTimer=LevelEmitDelay;]]>
                  </Expression>
                </ZExpression>
              </OnStart>
              <OnUpdate>
                <ZExpression>
                  <Expression>
<![CDATA[LevelEmitTreeTimer -= App.DeltaTime;

Temp1=0;

if( EnemiesOnScreen<LevelMaxOnScreen ) {
  LevelEmitTimer -= App.DeltaTime;
  if(LevelEmitTimer<=0) {
    LevelEmitTimer=random(LevelEmitDelay,0.1);
    LevelEmitDelay-=LevelEmitDelayDecrease;
    LevelEmitCounter-=1;
    Temp1=1;
  }
}

//exit: emit if temp1==1]]>
                  </Expression>
                </ZExpression>
                <Condition Expression="return Temp1==1;">
                  <OnTrue>
                    <SpawnModel Model="EyeModel"/>
                    <Condition Expression="return LevelEmitCounter==0;">
                      <OnTrue>
                        <SetModelState State="StageBoss_LevelState"/>
                      </OnTrue>
                    </Condition>
                  </OnTrue>
                </Condition>
                <Condition Expression="return LevelEmitTreeTimer&lt;=0;">
                  <OnTrue>
                    <SpawnModel Model="CaveDecorModel"/>
                    <ZExpression Expression="LevelEmitTreeTimer=3.0 + random(0,0.2);"/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
            </ModelState>
            <ModelState Name="StageBoss_LevelState">
              <OnStart>
                <SpawnModel Model="BossModel"/>
              </OnStart>
              <OnUpdate>
                <Condition Expression="return EnemiesOnScreen==0;">
                  <OnTrue>
                    <SetModelState State="StageLevelComplete_LevelState"/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
            </ModelState>
            <ModelState Name="StageLevelComplete_LevelState">
              <OnStart>
                <SpawnModel Model="LevelCompleteModel"/>
                <StartAnimator Animator="LevelCompleteTimer"/>
              </OnStart>
              <OnUpdate>
                <AnimatorGroup Name="LevelCompleteTimer" Duration="2">
                  <OnStop>
                    <SetModelState State="StageLevelEnter_LevelState"/>
                  </OnStop>
                </AnimatorGroup>
              </OnUpdate>
            </ModelState>
            <ModelState Name="StageLevelEnter_LevelState">
              <OnStart>
                <SpawnModel Model="LevelEnterModel"/>
                <StartAnimator Animator="LevelEnterTimer"/>
                <ZExpression>
                  <Expression>
<![CDATA[//Justera difficulty
Difficulty=clamp(BaseDifficulty + (LevelNo*0.1),0,1);

//Öka level, börjar på noll
LevelNo+=1;]]>
                  </Expression>
                </ZExpression>
              </OnStart>
              <OnUpdate>
                <AnimatorGroup Name="LevelEnterTimer" Duration="2">
                  <OnStop>
                    <SetModelState State="Stage0_LevelState"/>
                  </OnStop>
                </AnimatorGroup>
              </OnUpdate>
            </ModelState>
          </States>
          <OnRender>
            <RenderTransformGroup Name="LevelTg1" Scale="12 10 1">
              <Children>
                <UseMaterial Material="PaperMaterial"/>
                <RenderSprite/>
              </Children>
            </RenderTransformGroup>
            <UseMaterial Material="TextMaterial"/>
            <RenderText Text="SCORE" X="0.4" Y="0.92" Scale="0.49"/>
            <RenderText Name="ScoreRenderText" TextFloatRef="PlayerScore" X="0.75" Y="0.92" Scale="0.9059"/>
            <RenderText Text="LIVES" X="-0.76" Y="0.92" Scale="0.49"/>
            <RenderText TextFloatRef="PlayerLives" X="-0.51" Y="0.92" Scale="0.66"/>
            <RenderText Text="FPS " TextFloatRef="App.FpsCounter" X="-0.95" Y="-0.92" Scale="0.4" Align="1"/>
          </OnRender>
          <OnUpdate>
            <ZExpression>
              <Expression>
<![CDATA[//Move paper-background
PaperMaterialTexture.TextureX+= (1/LevelTg1.Scale.X)*ScrollSpeed * App.DeltaTime;


Temp1=clamp((PlayerScore-LevelLastScore)*0.001,0,0.5);
//ScoreRenderText.Scale=0.49 + Temp1;
LevelScoreVibrate=clamp(LevelScoreVibrate+Temp1,0,1);
LevelLastScore=PlayerScore;
ScoreRenderText.Scale=0.89 + LevelScoreVibrate;
LevelScoreVibrate*=0.9;
//if(ScoreRenderText.Scale]]>
              </Expression>
            </ZExpression>
          </OnUpdate>
          <OnSpawn>
            <SetModelState State="StageLevelEnter_LevelState"/>
          </OnSpawn>
        </Model>
        <Bitmap Name="PaperBitmap">
          <Producers>
            <BitmapExpression>
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)

Temp1=1-(abs(noise2(X*8,Y*10))*0.2);
this.Pixel.R=Temp1*0.98;
this.Pixel.G=Temp1*0.98;
this.Pixel.B=Temp1*0.98;]]>
              </Expression>
            </BitmapExpression>
          </Producers>
        </Bitmap>
        <Material Name="PaperMaterial" Light="0" ZBuffer="0">
          <Textures>
            <MaterialTexture Name="PaperMaterialTexture" Texture="PaperBitmap" TextureX="52.0247"/>
          </Textures>
        </Material>
        <Bitmap Name="SunBitmap">
          <Producers>
            <BitmapExpression>
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)


Temp2=this.X-0.5;
Temp3=this.Y-0.5;

Temp4=sqrt(Temp2*Temp2 + Temp3*Temp3);
Temp2=atan2(Temp2*4,Temp3*5)*8;


Temp1=1-(sin(Temp2)*(1-Temp4*1.9));
//Temp1*=Temp1*0.2;

if(Temp1<=0.9)
  Temp1*=0.7;
if(Temp4>=0.5)
  Temp1=1;
//Temp1=1-Temp1;

if(Temp1>=0.9)
  this.Pixel.A=0;
else
  this.Pixel.A=0.15;
  
Temp1=1-Temp1;
this.Pixel.R=Temp1;
this.Pixel.G=Temp1;
this.Pixel.B=Temp1;]]>
              </Expression>
            </BitmapExpression>
          </Producers>
        </Bitmap>
        <Material Name="SunMaterial" Color="1 1 0 1" Light="0" Blend="1" ZBuffer="0">
          <Textures>
            <MaterialTexture Texture="SunBitmap" TexCoords="1"/>
          </Textures>
        </Material>
        <Model Name="SunModel" Scale="4 4 1">
          <OnRender>
            <UseMaterial Material="SunMaterial"/>
            <RenderNet XCount="2" YCount="2">
              <RenderVertexExpression>
<![CDATA[//Update each vertex.
//Vertex : current vertex
//TexCoord : current texture coordinate

Temp1=noise3(this.Vertex.X,this.Vertex.Y,App.Time*0.1)*(3.14*2);

this.TexCoord.X=clamp(this.TexCoord.X+cos(Temp1)*0.05,0,1);
this.TexCoord.Y=clamp(this.TexCoord.Y+sin(Temp1)*0.05,0,1);]]>
              </RenderVertexExpression>
            </RenderNet>
          </OnRender>
          <OnUpdate>
            <ZExpression Expression="SunModel.Rotation.Z+=App.DeltaTime*0.01;"/>
          </OnUpdate>
        </Model>
        <Model Name="TreeModel" Position="0 -3.71 0">
          <Definitions>
            <Mesh Name="TreeTrunkMesh1">
              <Producers>
                <MeshBox/>
                <MeshExpression Scale="0.16 0.63 0.2">
                  <Expression>
<![CDATA[//V : current vertex

//Move pivot
this.V.Y+=1;

if(this.V.Y>1)
  this.V.X*=1.25;]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
            <Variable Name="TreePersonality"/>
          </Definitions>
          <OnRender>
            <UseMaterial Material="TreeMaterial"/>
            <RenderTransform Name="TreeTg1"/>
            <RenderMesh Mesh="TreeTrunkMesh1"/>
            <RenderTransform Name="TreeTg2" Translate="0 1.2 0"/>
            <RenderMesh Mesh="TreeTrunkMesh1"/>
            <RenderTransform Name="TreeTg3" Translate="0 1.2 -0.17"/>
            <RenderMesh Mesh="TreeTrunkMesh1"/>
          </OnRender>
          <OnUpdate>
            <ZExpression>
              <Expression>
<![CDATA[TreeModel.Position.X-=ScrollSpeed * App.DeltaTime;

//Temp1=0.5+(noise2(TreePersonality,App.Time*0.4)*0.5);
Temp1=cos(TreePersonality + App.Time*0.4)*0.5;

TreeTg1.Rotate.Z=(Temp1*0.1);
TreeTg2.Rotate.Z=0-(Temp1*0.25);
TreeTg3.Rotate.Z=(Temp1*0.27);]]>
              </Expression>
            </ZExpression>
            <Condition Expression="return CurrentModel.Position.X&lt;=LeftEdge-1;">
              <OnTrue>
                <RemoveModel/>
              </OnTrue>
            </Condition>
          </OnUpdate>
          <OnSpawn>
            <ZExpression>
              <Expression>
<![CDATA[TreePersonality=rnd();
TreeModel.Position.X=RightEdge + 0.5;
TreeModel.Position.Y=BottomEdge+0.5;
TreeModel.Position.Z=-0.5;

TreeModel.Scale.X=1+(TreePersonality*0.5);
TreeModel.Scale.Y=1+(TreePersonality*0.5);]]>
              </Expression>
            </ZExpression>
          </OnSpawn>
        </Model>
        <Material Name="TreeMaterial" Color="0.31 0.69 0.13 0.5" Blend="1"/>
        <Model Name="CaveDecorModel">
          <Definitions>
            <Mesh Name="CaveDecorMesh">
              <Producers>
                <MeshSphere ZSamples="5" RadialSamples="22"/>
                <MeshExpression Scale="0.25 1 0.1">
                  <Expression>
<![CDATA[//V : current vertex
this.V.Y+=1;
if(this.V.Y<0.5)
  this.V.Y*=0.5;
this.V.X*= 1-abs(this.V.Y*0.4);
if(abs(this.V.X)>0.3)
  this.V.X*=1 + clamp(abs(noise2(this.V.X*26+CurrentModel.Personality*4,this.V.Y*137.7))*2.5,0,0.65);// random(0,0.1);]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
            <Variable Name="CaveDecorBaseY"/>
            <Material Name="CaveDecorMaterial">
              <Textures>
                <MaterialTexture Name="CaveDecorMaterialTexture" Texture="CaveDecorBitmap"/>
              </Textures>
            </Material>
          </Definitions>
          <OnRender>
            <UseMaterial Material="CaveDecorMaterial"/>
            <RenderMesh Mesh="CaveDecorMesh"/>
          </OnRender>
          <OnUpdate>
            <ZExpression>
              <Expression>
<![CDATA[CurrentModel.Position.X-=ScrollSpeed * App.DeltaTime;

Temp1=cos(CurrentModel.Personality + App.Time*1.4)*0.25;
CurrentModel.Position.Y=CaveDecorBaseY + Temp1;

//Temp1=0.5+(noise2(TreePersonality,App.Time*0.4)*0.5);
//Temp1=cos(TreePersonality + App.Time*0.4)*0.5;

//TreeTg1.Rotate.Z=(Temp1*0.1);
//TreeTg2.Rotate.Z=0-(Temp1*0.25);
//TreeTg3.Rotate.Z=(Temp1*0.27);]]>
              </Expression>
            </ZExpression>
            <Condition Expression="return CurrentModel.Position.X&lt;=(LeftEdge-0.5);">
              <OnTrue>
                <RemoveModel/>
              </OnTrue>
            </Condition>
          </OnUpdate>
          <OnSpawn>
            <ZExpression>
              <Expression>
<![CDATA[CurrentModel.Position.X=RightEdge + 0.5;
CurrentModel.Position.Z=-0.5;

if(CurrentModel.Personality<=0.5) {
  CurrentModel.Position.Y=TopEdge+0.6;
  CurrentModel.Rotation.Z=0.5;
} else {
  CurrentModel.Position.Y=BottomEdge-0.6;
}
CaveDecorBaseY=CurrentModel.Position.Y;

CurrentModel.Rotation.Z+=random(0,0.01);

CurrentModel.Scale.X=3+(CurrentModel.Personality*1.5);
CurrentModel.Scale.Y=3+(CurrentModel.Personality*1.5);

CaveDecorMaterialTexture.TextureScale = random(1,0.3);
CaveDecorMaterialTexture.TextureX = random(1,0.3);
CaveDecorMaterialTexture.TextureY = random(1,0.3);]]>
              </Expression>
            </ZExpression>
          </OnSpawn>
        </Model>
        <Bitmap Name="CaveDecorBitmap">
          <Producers>
            <BitmapExpression>
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)

Temp1=
  (noise2(this.X*3.4,this.Y*3.5) +
  noise2(this.X*6,this.Y*6.6)) * 1.8;
Temp1=abs(Temp1)*9.9;
this.Pixel.R=Temp1;
this.Pixel.G=Temp1*0.5;
this.Pixel.B=Temp1*0.5;
//this.Pixel.A=0.6;]]>
              </Expression>
            </BitmapExpression>
          </Producers>
        </Bitmap>
        <Model Name="LevelCompleteModel">
          <OnRender>
            <UseMaterial Material="TextMaterial"/>
            <RenderText Text="LEVEL COMPLETE" Scale="1.02"/>
          </OnRender>
          <OnUpdate>
            <Timer Interval="1.5">
              <OnTimer>
                <RemoveModel/>
              </OnTimer>
            </Timer>
          </OnUpdate>
        </Model>
        <Model Name="LevelEnterModel">
          <OnRender>
            <UseMaterial Material="TextMaterial"/>
            <RenderText Text="ENTER LEVEL " TextFloatRef="LevelNo" Scale="1.02"/>
          </OnRender>
          <OnUpdate>
            <Timer Interval="1.5">
              <OnTimer>
                <RemoveModel/>
              </OnTimer>
            </Timer>
          </OnUpdate>
        </Model>
      </Children>
    </Group> <!-- Level -->

    <Group Name="Enemies">
      <Children>
        <Group Name="MonkeyEnemy">
          <Children>
            <Model Name="MonkeyModel" Scale="1.2 1.2 1.2" Category="2" CollisionBounds="0.75 0.75 0 0">
              <Definitions>
                <Mesh Name="MonkeyMesh">
                  <Producers>
                    <MeshSphere ZSamples="20" RadialSamples="25"/>
                    <MeshExpression Scale="0.65 0.4 0.5">
                      <Expression>
<![CDATA[//V : current vertex



//Make square
Temp1=1-abs(this.V.X);
this.V.X*=1+Temp1;

Temp1=1-abs(this.V.Y);
if( abs(this.V.X)<0.8 ) {
  Temp1 += abs(noise2(this.V.X*7344.1512,MonkeyPersonality*333.3))*3.5;
}
this.V.Y*=0.5+Temp1;

/*
Temp2=atan2(this.V.Y + MonkeyPersonality,this.V.X + MonkeyPersonality);

Temp4=this.V.Z;
Temp3=atan2(sqrt(1 - Temp4 * Temp4), Temp4);

Temp1=
 clamp(-0.8+
  (cos(Temp2*4) +
  sin(Temp3*8)) * 0.8,0,0.5);
this.V.X*=1 + Temp1;
this.V.Y*=1 + Temp1;
this.V.Z*=1 + Temp1;
*/]]>
                      </Expression>
                    </MeshExpression>
                  </Producers>
                </Mesh>
                <Mesh Name="MonkeyEyeMesh">
                  <Producers>
                    <MeshSphere Scale="0.2 0.15 0.05" ZSamples="4" RadialSamples="13"/>
                    <MeshExpression>
                      <Expression>
<![CDATA[//V : current vertex
Temp1=atan2(this.V.X,this.V.Y) + MonkeyPersonality;
Temp1=1 + (cos(Temp1*42) * 0.15);
this.V.X*=Temp1;
this.V.Y*=Temp1;]]>
                      </Expression>
                    </MeshExpression>
                  </Producers>
                </Mesh>
                <Mesh Name="MonkeyPupillMesh">
                  <Producers>
                    <MeshSphere Scale="0.1 0.1 0.1" ZSamples="4"/>
                  </Producers>
                </Mesh>
                <Variable Name="MonkeyPersonality"/>
                <Variable Name="MonkeyFleeTimeout"/>
                <Variable Name="MonkeyIsFalling"/>
                <Variable Name="MonkeyIsFleeing"/>
                <Mesh Name="MonkeyLeg">
                  <Producers>
                    <MeshBox Scale="0.1 0.4 0.1"/>
                  </Producers>
                </Mesh>
                <Variable Name="MonkeyLife"/>
                <Variable Name="MonkeyEmitSmokeTime"/>
                <Variable Name="MonkeyEmitNutTimer"/>
                <Variable Name="MonkeyIsNutEmitter"/>
              </Definitions>
              <States>
                <ModelState Name="MonkeyState_Idling">
                  <OnStart>
                    <ZExpression>
                      <Expression>
<![CDATA[Temp1=((0.5-MonkeyPersonality)*0.3);
MonkeySeek.Weight+= (MonkeySeek.Weight*Temp1);
MonkeySeparation.Weight-= (MonkeySeparation.Weight*Temp1);]]>
                      </Expression>
                    </ZExpression>
                  </OnStart>
                  <OnUpdate>
                    <SteeringController Mass="0.1" MaxSpeed="4" Radius="0.5">
                      <Behaviours>
                        <SteeringBehaviour Name="MonkeySeek" TargetModel="PlayerModel" Weight="0.75"/>
                        <SteeringBehaviour Name="MonkeySeparation" Kind="1" TargetCategory="2" Weight="1.25"/>
                      </Behaviours>
                    </SteeringController>
                    <ZExpression>
                      <Expression>
<![CDATA[MonkeyTg1.Translate.Y=0.14 + cos(App.Time+MonkeyPersonality*5)*0.1;

Temp1=cos(App.Time*(6+MonkeyPersonality*6))*0.05;
MonkeyRLegTg.Translate.Y=-0.54 + Temp1;
MonkeyLLegTg.Translate.Y=-0.54 - Temp1;]]>
                      </Expression>
                    </ZExpression>
                  </OnUpdate>
                </ModelState>
                <ModelState Name="MonkeyState_Nutter_Idling">
                  <OnStart>
                    <ZExpression Expression="MonkeyShotCount=4 + Difficulty*4;"/>
                  </OnStart>
                  <OnUpdate>
                    <SteeringController Mass="0.1" MaxSpeed="6" Radius="0.5">
                      <Behaviours>
                        <SteeringBehaviour Kind="1" TargetCategory="2" Weight="1.2"/>
                        <SteeringBehaviour Kind="4" Weight="0.8">
                          <Expression>
<![CDATA[Temp1=1+(MonkeyPersonality*3);
this.OutVector.X=Temp1 - MonkeyModel.Position.X;

Temp1=0; //random(0,MonkeyPersonality*3);
this.OutVector.Y=Temp1 - MonkeyModel.Position.Y;]]>
                          </Expression>
                        </SteeringBehaviour>
                      </Behaviours>
                    </SteeringController>
                    <ZExpression>
                      <Expression>
<![CDATA[MonkeyTg1.Translate.Y=0.14 + cos(App.Time+MonkeyPersonality*5)*0.1;

Temp1=cos(App.Time*(6+MonkeyPersonality*6))*0.05;
MonkeyRLegTg.Translate.Y=-0.54 + Temp1;
MonkeyLLegTg.Translate.Y=-0.54 - Temp1;

Temp1=0;
MonkeyEmitNutTimer-=App.DeltaTime;
if( (MonkeyShotCount>0) && (MonkeyEmitNutTimer<=0) ) {
  Temp2 = PlayerModel.Position.X - MonkeyModel.Position.X;
  Temp3 = PlayerModel.Position.Y - MonkeyModel.Position.Y;
  Temp3 = sqrt(Temp2*Temp2 + Temp3 * Temp3);
  //Måste vara ett visst avstånd för att skjuta
  if(abs(Temp3)>4.5) {
    MonkeyEmitNutTimer=0.05;//clamp(0.1 + MonkeyPersonality,0.1,0.2);
    MonkeyShotCount-=1;
    Temp1=1;
  }
}
//exit temp1=1 emit nut]]>
                      </Expression>
                    </ZExpression>
                    <Condition Expression="return Temp1==1;">
                      <OnTrue>
                        <SpawnModel Model="CoconutModel" UseSpawnerPosition="255"/>
                      </OnTrue>
                    </Condition>
                  </OnUpdate>
                  <Definitions>
                    <Variable Name="MonkeyShotCount"/>
                  </Definitions>
                </ModelState>
                <ModelState Name="MonkeyState_Flee">
                  <OnStart>
                    <ZExpression Expression="MonkeyIsFleeing=1;"/>
                  </OnStart>
                  <OnUpdate>
                    <Condition>
                      <Expression>
<![CDATA[return
  (MonkeyModel.Position.X<LeftEdge) ||
  (MonkeyModel.Position.X>RightEdge) ||
  (MonkeyModel.Position.Y>TopEdge) ||
  (MonkeyModel.Position.Y<BottomEdge);]]>
                      </Expression>
                      <OnTrue>
                        <RemoveModel/>
                      </OnTrue>
                    </Condition>
                    <SteeringController Mass="0.1" MaxSpeed="6" MaxForce="0.5" AdjustHeading="255">
                      <Behaviours>
                        <SteeringBehaviour Kind="3" TargetModel="PlayerModel"/>
                      </Behaviours>
                    </SteeringController>
                  </OnUpdate>
                </ModelState>
                <ModelState Name="MonkeyState_Falling">
                  <OnStart>
                    <ZExpression>
                      <Expression>
<![CDATA[MonkeyIsFalling=1;
PlayerScore += 300;
if(MonkeyIsNutEmitter)
  PlayerScore += 200;
MonkeyModel.Velocity.Y=1;]]>
                      </Expression>
                    </ZExpression>
                    <PlaySound Sound="MonkeyFallSound" NoteNr="40"/>
                  </OnStart>
                  <OnUpdate>
                    <ZExpression>
                      <Expression>
<![CDATA[MonkeyModel.Velocity.Y -= App.DeltaTime * 8;

MonkeyModel.Rotation.X=MonkeyModel.Rotation.X+App.DeltaTime;
MonkeyModel.Rotation.Y=MonkeyModel.Rotation.Y+App.DeltaTime;

MonkeyEmitSmokeTime-=App.DeltaTime;
if( (MonkeyEmitSmokeTime<=0) && (MonkeyModel.Velocity.Y<0) ) {
  Temp1=1;
  MonkeyEmitSmokeTime=0.2;
} else
  Temp1=0;]]>
                      </Expression>
                    </ZExpression>
                    <Condition Comment="Emit smoke" Expression="return Temp1;">
                      <OnTrue>
                        <SpawnModel Model="SmokeModel" UseSpawnerPosition="255"/>
                      </OnTrue>
                    </Condition>
                    <Condition Comment="Remove if off-screen" Expression="return CurrentModel.Position.Y&lt;BottomEdge;">
                      <OnTrue>
                        <RemoveModel/>
                      </OnTrue>
                    </Condition>
                  </OnUpdate>
                </ModelState>
                <ModelState Name="MonkeyState_Appearing">
                  <OnStart>
                    <PlaySound Sound="MonkeyAppearSound" NoteNr="67" Channel="1"/>
                  </OnStart>
                  <OnUpdate>
                    <ZExpression>
                      <Expression>
<![CDATA[Temp1=(3.5 - (MonkeyPersonality*4))-MonkeyModel.Position.X;
MonkeyModel.Velocity.X=Temp1 * 4;]]>
                      </Expression>
                    </ZExpression>
                    <Timer Interval="0.5">
                      <OnTimer>
                        <Condition Expression="return MonkeyIsNutEmitter;">
                          <OnTrue>
                            <SetModelState State="MonkeyState_Nutter_Idling"/>
                          </OnTrue>
                          <OnFalse>
                            <SetModelState State="MonkeyState_Idling"/>
                          </OnFalse>
                        </Condition>
                      </OnTimer>
                    </Timer>
                  </OnUpdate>
                </ModelState>
              </States>
              <OnRender>
                <UseMaterial Material="PlayerMaterial"/>
                <RenderSetColor Name="MonkeyColor" Color="0.18 0.18 0.18 1"/>
                <RenderMesh Mesh="MonkeyMesh"/>
                <RenderTransformGroup Name="MonkeyRLegTg" Translate="0.3 -0.44 0">
                  <Children>
                    <RenderMesh Mesh="MonkeyLeg"/>
                    <RenderTransform Scale="1 0.5 1" Translate="-0.07 -0.31 0" Rotate="0 0 0.25"/>
                    <RenderMesh Mesh="MonkeyLeg"/>
                  </Children>
                </RenderTransformGroup>
                <RenderTransformGroup Name="MonkeyLLegTg" Translate="-0.3 -0.44 0">
                  <Children>
                    <RenderMesh Mesh="MonkeyLeg"/>
                    <RenderTransform Scale="1 0.5 1" Translate="-0.07 -0.31 0" Rotate="0 0 0.25"/>
                    <RenderMesh Mesh="MonkeyLeg"/>
                  </Children>
                </RenderTransformGroup>
                <RenderTransformGroup Name="MonkeyTg1" Translate="0.33 0.14 0.51" Rotate="-0.01 0.02 0">
                  <Children>
                    <RenderSetColor Color="1 1 1 1"/>
                    <RenderMesh Mesh="MonkeyEyeMesh"/>
                    <RenderSetColor Color="0 0 0 1"/>
                    <RenderMesh Mesh="MonkeyPupillMesh"/>
                  </Children>
                </RenderTransformGroup>
              </OnRender>
              <OnUpdate>
                <Condition Comment="Enter fleestate if timeout">
                  <Expression>
<![CDATA[if( (MonkeyIsFalling==1) || (MonkeyIsFleeing==1) )
  return 0;

MonkeyFleeTimeout-=App.DeltaTime;
if(MonkeyFleeTimeout<0)
  return 1;

return 0;]]>
                  </Expression>
                  <OnTrue>
                    <SetModelState State="MonkeyState_Flee"/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[EnemiesOnScreen+=1;

MonkeyModel.Position.X = RightEdge+0.5;
MonkeyModel.Position.Y = random(0,TopEdge-1);

MonkeyPersonality = rnd();

//Olika stora ögon
Temp1=random(0,0.25);
MonkeyTg1.Scale.X+=Temp1;
MonkeyTg1.Scale.Y+=Temp1;

if(MonkeyPersonality>0.5) {
  //Flytta öga vänster eller höger
  MonkeyTg1.Translate.X*=-1;
  MonkeyRLegTg.Rotate.Y = -0.5;
  MonkeyLLegTg.Rotate.Y = -0.5;
}
  

//MonkeyIsDead=0;
//MonkeyIsFleeing=0;
MonkeyFleeTimeout=random(5,MonkeyPersonality*3);

MonkeyLife=8 + Difficulty*8;

MonkeyIsNutEmitter=(MonkeyPersonality>0.6);

Temp1=random(0.8,MonkeyPersonality*0.5);
MonkeyColor.Color.R *= Temp1;
if(MonkeyIsNutEmitter)
  MonkeyColor.Color.R+=0.2;  //Rödare ifall kastar nötter
MonkeyColor.Color.G *= Temp1;
MonkeyColor.Color.B *= Temp1;]]>
                  </Expression>
                </ZExpression>
                <SetModelState State="MonkeyState_Appearing"/>
              </OnSpawn>
              <OnRemove>
                <ZExpression Expression="EnemiesOnScreen-=1;"/>
              </OnRemove>
              <OnCollision>
                <ZExpression>
                  <Expression>
<![CDATA[MonkeyLife-=1;

CurrentModel.Position.Y += random(0,0.15);
CurrentModel.Position.X += random(0,0.15);
CurrentModel.Velocity.X*=0.85;

//MonkeyTg1.Scale.X = 1 + sin(App.Time*22) * 0.15 * App.DeltaTime;
CurrentModel.Rotation.Z += random(0,0.015);]]>
                  </Expression>
                </ZExpression>
                <Condition Comment="Set state dead if life=0" Expression="return (MonkeyLife==8);">
                  <OnTrue>
                    <SetModelState State="MonkeyState_Falling"/>
                  </OnTrue>
                  <OnFalse>
                    <Condition Comment="Set state dead if life=0" Expression="return MonkeyLife&lt;=0;">
                      <OnTrue>
                        <RemoveModel/>
                        <SpawnModel Model="MonkeyExplodeModel" UseSpawnerPosition="255"/>
                        <ZExpression Expression="PlayerScore+=200;"/>
                        <PlaySound Sound="MonkeyExplodeSound" NoteNr="69"/>
                      </OnTrue>
                      <OnFalse>
                        <PlaySound Sound="MonkeyHitSound" NoteNr="24"/>
                        <SpawnModel Model="MonkeyHitModel" UseSpawnerPosition="255"/>
                      </OnFalse>
                    </Condition>
                  </OnFalse>
                </Condition>
              </OnCollision>
            </Model>
            <Sound Name="MonkeyFallSound" Comment="54" Volume="1" UseFilter="1" FilterCutoff="0.17" FilterQ="0.47" Pan="0.72" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Source="2" Mod1Destination="2" Mod1Amount="0.35" Env0Active="1" Env0ReleaseTime="0.95" Lfo0Active="1" Lfo0IsBipolar="1" Lfo0Speed="0.42"/>
            <Sound Name="MonkeyHitSound" Comment="24" Length="0.1" Volume="0.38" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Destination="2" Mod1Amount="0.79" Env0Active="1" Env0ReleaseTime="0.2" Env1Active="1" Env1AttackTime="0.8"/>
            <Sound Name="MonkeyAppearSound" Comment="note 67" Length="0.8" Volume="0.2" UseFilter="1" FilterCutoff="0.65" FilterQ="0.92" Pan="0" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Source="2" Mod1Destination="2" Mod1Amount="0.21" Mod2Active="1" Mod2Destination="12" Mod2Amount="1" Env0Active="1" Env0ReleaseTime="0.55" Env1Active="1" Lfo0Active="1" Lfo0IsBipolar="1" Lfo0Style="1" Lfo0Speed="0.86"/>
            <Mesh Name="CoconutMesh">
              <Producers>
                <MeshSphere Scale="0.2 0.2 0.2"/>
                <MeshExpression>
                  <Expression>
<![CDATA[//V : current vertex
Temp1=noise3(this.V.X*3,this.V.Y*27,this.V.Z*12) * 0.2;
this.V.X+=Temp1;
this.V.Y+=Temp1;
this.V.Z+=Temp1;]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
            <Model Name="CoconutModel" Category="3" CollisionBounds="0.25 0.25 0 0">
              <OnRender>
                <UseMaterial Material="PlayerMaterial"/>
                <RenderSetColor Name="CoconutColor" Color="0.13 0.07 0 1"/>
                <RenderMesh Mesh="CoconutMesh"/>
              </OnRender>
              <OnUpdate>
                <Condition>
                  <Expression>
<![CDATA[return
  (CurrentModel.Position.X<LeftEdge) ||
  (CurrentModel.Position.X>RightEdge) ||
  (CurrentModel.Position.Y>TopEdge) ||
  (CurrentModel.Position.Y<BottomEdge);]]>
                  </Expression>
                  <OnTrue>
                    <RemoveModel/>
                  </OnTrue>
                </Condition>
                <ZExpression>
                  <Expression>
<![CDATA[//CoconutModel.Velocity.Y-=CoconutPersonality*0.2;

CurrentModel.Rotation.Z+=CurrentModel.Personality*0.4;
CurrentModel.Rotation.X+=CurrentModel.Personality*0.25;
CurrentModel.Rotation.Y+=CurrentModel.Personality*0.15;]]>
                  </Expression>
                </ZExpression>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[Temp1=1+(0.5-CurrentModel.Personality);
CoconutColor.Color.R*=Temp1;
CoconutColor.Color.G*=Temp1;
CoconutColor.Color.B*=Temp1;

Temp1=PlayerModel.Position.X - CurrentModel.Position.X;
Temp2=PlayerModel.Position.Y - CurrentModel.Position.Y;
Temp3 = Temp1;
//X noll är ej giltig param till arctan2
if(Temp3==0)
  Temp3 = 0.0001;
Temp3 = atan2(Temp2, Temp3);
Temp3+=sin(App.Time*5)*0.25;
Temp3*=random(1,0.15);

Temp1=sqrt( (Temp1*Temp1) + (Temp2*Temp2) );
Temp2=clamp(3 + Temp1*2,3,9);
CurrentModel.Velocity.X=cos(Temp3)*Temp2;
CurrentModel.Velocity.Y=sin(Temp3)*Temp2;]]>
                  </Expression>
                </ZExpression>
                <PlaySound Sound="MonkeyThrowNutSound" NoteNr="26" Channel="1"/>
              </OnSpawn>
              <OnCollision>
                <RemoveModel/>
                <SpawnModel Model="CocunutHitModel" UseSpawnerPosition="255"/>
              </OnCollision>
            </Model>
            <Sound Name="MonkeyThrowNutSound" Comment="note 26, borde vara sine" Length="0.1" Osc1Waveform="1" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Destination="2" Mod1Amount="1" Env0Active="1" Env0ReleaseTime="0.18"/>
            <Model Name="MonkeyHitModel">
              <Definitions>
                <Variable Name="MonkeyHitLife"/>
              </Definitions>
              <OnRender>
                <UseMaterial Material="DebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="200" Direction="-1.37" Spread="-0.31" ParticleWidth="0.1" ParticleHeight="0.1" Speed="3.4" ParticleLifetime="1" AnimateAlpha="-1.5" Duration="0.3">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
if(rnd()<0.5) {
  this.PColor.R=0.2;
  this.PColor.G=0;
  this.PColor.B=0;
} else {
  this.PColor.R=0.05 + random(0,0.05);
  this.PColor.G=0.05 + random(0,0.05);
  this.PColor.B=0.0;
}]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <ZExpression>
                  <Expression>
<![CDATA[MonkeyHitLife-=App.DeltaTime;
//SmokeModel.Scale.X+=App.DeltaTime;
//SmokeModel.Scale.Y+=App.DeltaTime;]]>
                  </Expression>
                </ZExpression>
                <Condition Expression="return MonkeyHitLife&lt;=0;">
                  <OnTrue>
                    <RemoveModel/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[MonkeyHitLife=0.6;
CurrentModel.Position.Y+=random(0.0,0.35);
CurrentModel.Position.X-= random(0.8,0.2);]]>
                  </Expression>
                </ZExpression>
              </OnSpawn>
            </Model>
            <Model Name="MonkeyExplodeModel">
              <OnRender>
                <UseMaterial Material="DebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="6580" Spread="3" ParticleWidth="0.15" ParticleHeight="0.15" Speed="2" Radius="0.05" ParticleLifetime="0.5" AnimateAlpha="-1" Duration="0.05">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
//Temp1=random(0.8,0.1);
this.PColor.G=0;
this.PColor.B=0;
this.PColor.R=0;]]>
                  </OnEmitExpression>
                </RenderParticles>
                <RenderParticles ParticlesPerSecond="2200" Spread="3" ParticleWidth="0.15" ParticleHeight="0.15" Speed="3" Radius="0.05" ParticleLifetime="0.5" AnimateAlpha="-1" Duration="0.05" BeginTime="0.2">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
//Temp1=random(0.8,0.1);
this.PColor.G=0;
this.PColor.B=0;//0.2 + random(0,0.1);
this.PColor.R=0;]]>
                  </OnEmitExpression>
                </RenderParticles>
                <RenderParticles ParticlesPerSecond="22000" Spread="3" ParticleWidth="0.15" ParticleHeight="0.15" Speed="6" Radius="0.05" ParticleLifetime="0.5" AnimateAlpha="-2.5" Duration="0.05" BeginTime="0.3">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
//Temp1=random(0.8,0.1);
this.PColor.G=0;
this.PColor.B=0;
this.PColor.R=0.2 + random(0,0.1);]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <Timer Interval="1">
                  <OnTimer>
                    <RemoveModel/>
                  </OnTimer>
                </Timer>
                <ZExpression Expression="//CurrentModel.Rotation.Z+=App.DeltaTime*0.25;"/>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[/*CurrentModel.Scale.X+=random(0,0.1);
CurrentModel.Scale.Y+=random(0,0.1);

EyeExplodeP1.Duration*=random(1,0.3);
EyeExplodeP1.Speed*=random(1,0.3);*/]]>
                  </Expression>
                </ZExpression>
              </OnSpawn>
            </Model>
            <Sound Name="MonkeyExplodeSound" Comment="note 69" Volume="1" Osc1Waveform="2" UseFilter="1" FilterCutoff="0.42" FilterQ="0.69" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Source="2" Mod1Destination="2" Mod1Amount="0.63" Env0Active="1" Env0ReleaseTime="0.98" Lfo0Active="1" Lfo0Speed="0.16"/>
          </Children>
        </Group> <!-- MonkeyEnemy -->

        <Group Name="Explosions">
          <Children>
            <Bitmap Name="SmokeBitmap">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[Temp1=noise2(this.X*4,this.Y*4);

Temp2=this.X-0.5;
Temp3=this.Y-0.5;
Temp2=sqrt(Temp2*Temp2 + Temp3*Temp3)*1.8;

Temp1+=1-Temp2;
this.Pixel.R=Temp1;
this.Pixel.G=Temp1;
this.Pixel.B=Temp1;
this.Pixel.A=Temp1;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="SmokeMaterial" Blend="1" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="SmokeBitmap" TexCoords="1"/>
              </Textures>
            </Material>
            <Model Name="SmokeModel">
              <Definitions>
                <Variable Name="SmokeLife"/>
              </Definitions>
              <OnRender>
                <UseMaterial Material="SmokeMaterial"/>
                <RenderParticles ParticlesPerSecond="16" ParticleWidth="0.8" ParticleHeight="0.8" Radius="0.3" ParticleLifetime="1" AnimateAlpha="-1.5" Duration="1"/>
              </OnRender>
              <OnUpdate>
                <ZExpression>
                  <Expression>
<![CDATA[SmokeLife-=App.DeltaTime;
SmokeModel.Scale.X+=App.DeltaTime;
SmokeModel.Scale.Y+=App.DeltaTime;]]>
                  </Expression>
                </ZExpression>
                <Condition Expression="return SmokeLife&lt;=0;">
                  <OnTrue>
                    <RemoveModel/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
              <OnSpawn>
                <ZExpression Expression="SmokeLife=2;"/>
              </OnSpawn>
            </Model>
            <Bitmap Name="DebrisBitmap">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[Temp1=noise2(this.X*4,this.Y*4);

Temp2=this.X-0.5;
Temp3=this.Y-0.5;
Temp2=sqrt(Temp2*Temp2 + Temp3*Temp3)*2.25;

Temp1+=Temp2;

if(Temp1<=0.9)
  Temp1=0;


//Temp1=1-Temp1;
Temp1=1-Temp1;
this.Pixel.R=Temp1;
this.Pixel.G=Temp1;
this.Pixel.B=Temp1;
this.Pixel.A=Temp1;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="DebrisMaterial" Light="0" Blend="1" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="DebrisBitmap" TexCoords="1"/>
              </Textures>
            </Material>
            <Model Name="CocunutHitModel">
              <OnRender>
                <UseMaterial Material="DebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="80" Spread="3" ParticleWidth="0.2" ParticleHeight="0.2" Speed="3" Radius="0.05" ParticleLifetime="0.5" AnimateAlpha="-3.5" Duration="0.2">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
Temp1=random(0.8,0.1);
this.PColor.G-=Temp1;
this.PColor.B-=Temp1;
this.PColor.R=0.5;]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <Timer Interval="0.5">
                  <OnTimer>
                    <RemoveModel/>
                  </OnTimer>
                </Timer>
              </OnUpdate>
            </Model>
            <Bitmap Name="ExplosionBitmap">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[this.Pixel.R=
  (0.5-abs(X-0.5)*1.6 + cos(random(0,0.05))*0.4 ) +
  (0.5-abs(Y-0.5)*1.8 + random(0,0.08) );
this.Pixel.G=this.Pixel.R;
this.Pixel.B=this.Pixel.R;
this.Pixel.A=this.Pixel.R;

/*
Temp2=X-0.5;
Temp3=Y-0.5;
//Distance from center 1..0
Temp1 = 1 - sqrt ( (Temp2*Temp2) + (Temp3*Temp3) )*2;
//Angle 0..1
Temp2 = (1 + (atan2(Temp3,Temp2) / 33.14)) * 0.5;
//Temp1 = Temp1 + Temp2*0.5;

Temp1=Temp1*1.6 + noise2(Temp2*33,Temp2*27) * 0.8;
this.Pixel.R=Temp1;
this.Pixel.G=Temp1;
this.Pixel.B=Temp1;
this.Pixel.A=Temp1;
*/]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
          </Children>
        </Group> <!-- Explosions -->

        <Group Name="TestStuff">
          <Children>
            <Mesh>
              <Producers>
                <MeshSphere Scale="0.5 1 0.5" RadialSamples="15"/>
                <MeshExpression Scale="1 2 0.5">
                  <Expression>
<![CDATA[//V : current vertex
Temp1=exp(abs(this.V.Y));
this.V.X -= sin(Temp1*1.5)*1.5;
if(this.V.Z>0.1)
  this.V.Z=1;
if(this.V.Z<-0.1)
  this.V.Z=-1;]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
            <Mesh Name="LegTestMesh">
              <Producers>
                <MeshSphere ZSamples="4" RadialSamples="39"/>
                <MeshExpression Scale="0.1 0.52 0.1">
                  <Expression>
<![CDATA[//Make square
Temp1=1-abs(this.V.X);
this.V.X*=1+Temp1;

Temp1=1-abs(this.V.Y);
this.V.Y*=1+Temp1;

//if((this.V.X>0) && (this.V.Y<=0) && (this.V.Y>=-0.1))
//  this.V.Y-=0.4;

if( (this.V.Y<=-0.5) && (this.V.X>0) ){
  this.V.X=4;
}

//Sätt pivotpunkt uppåt
this.V.Y-=1;]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
          </Children>
        </Group> <!-- TestStuff -->

        <Group Name="BeamGroup">
          <Children>
            <Bitmap Name="BeamBitmap">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[this.Pixel.R=1;

Temp2=X-0.5;
Temp3=Y-0.5;
//Distance from center 1..0
Temp1 = 1 - sqrt ( (Temp2*Temp2) + (Temp3*Temp3) ) * 1.9;

this.Pixel.R=Temp1;//*0.2;
this.Pixel.G=Temp1;
this.Pixel.B=Temp1;
this.Pixel.A=Temp1;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="BeamMaterial" Light="0" Blend="2">
              <Textures>
                <MaterialTexture Texture="BeamBitmap" TexCoords="1"/>
              </Textures>
            </Material>
          </Children>
        </Group> <!-- BeamGroup -->

        <Group Name="EyeEnemy">
          <Children>
            <Mesh Name="EyeMesh">
              <Producers>
                <MeshSphere Scale="0.2 0.2 0.03" ZSamples="4" RadialSamples="13"/>
              </Producers>
            </Mesh>
            <Mesh Name="EyePupillMesh">
              <Producers>
                <MeshSphere Scale="0.1 0.1 0.1" ZSamples="4"/>
              </Producers>
            </Mesh>
            <Model Name="EyeModel" Category="2" CollisionBounds="0.4 0.4 0 0">
              <Definitions>
                <Variable Name="EyeLife"/>
              </Definitions>
              <States>
                <ModelState Name="EyeState_FlyLeft">
                  <OnUpdate>
                    <SteeringController Mass="0.1" MaxSpeed="8" AdjustHeading="255" Radius="0.5">
                      <Behaviours>
                        <SteeringBehaviour TargetModel="PlayerModel" Weight="0.85"/>
                        <SteeringBehaviour Kind="1" TargetCategory="2" Weight="0.85"/>
                        <SteeringBehaviour Kind="4" Weight="1.3" Expression="this.OutVector.X=-6;"/>
                      </Behaviours>
                    </SteeringController>
                    <ZExpression>
                      <Expression>
<![CDATA[//MonkeyTg1.Translate.Y=0.14 + cos(App.Time+MonkeyPersonality*5)*0.1;

Temp1=cos(App.Time*(6+CurrentModel.Personality*8))*(0.06-CurrentModel.Personality*0.03);
EyeTg1.Rotate.Z=-0.21 + Temp1;
EyeTg2.Rotate.Z=0.21 - Temp1;]]>
                      </Expression>
                    </ZExpression>
                    <Condition Expression="return (CurrentModel.Position.X&lt;LeftEdge);">
                      <OnTrue>
                        <RemoveModel/>
                      </OnTrue>
                    </Condition>
                    <Condition>
                      <Expression>
<![CDATA[return (CurrentModel.Position.X>RightEdge-2) &&
  (CurrentModel.Position.X<RightEdge) &&
  (rnd()<0.015);]]>
                      </Expression>
                      <OnTrue>
                        <SetModelState State="EyeState_Strafe"/>
                      </OnTrue>
                    </Condition>
                  </OnUpdate>
                </ModelState>
                <ModelState Name="EyeState_Strafe">
                  <OnStart>
                    <ZExpression>
                      <Expression>
<![CDATA[//Avstånd från player
EyeStrafeBaseDistance=4; //clamp(2

EyeStrafeTimeout=4 + random(0,2);

EyeStrafeShootTimeout=3 + random(0,2) - Difficulty*2.5;]]>
                      </Expression>
                    </ZExpression>
                    <PlaySound Sound="EyeStrafeSound" NoteNr="60"/>
                  </OnStart>
                  <OnUpdate>
                    <SteeringController Mass="0.1" MaxSpeed="3" MaxForce="0.5" AdjustHeading="255" Radius="0.5">
                      <Behaviours>
                        <SteeringBehaviour Kind="4">
                          <Expression>
<![CDATA[Temp1=0-CurrentModel.Position.Y;
Temp1+=sin(App.Time)*2;
this.OutVector.Y=Temp1;
//this.OutVector.Y=0;

//Temp1 = PlayerModel.Position.X - CurrentModel.Position.X;
//Temp2 = PlayerModel.Position.Y - CurrentModel.Position.Y;
//Temp1 = sqrt(Temp1*Temp1 + Temp2 * Temp2);
Temp1=(PlayerModel.Position.X + EyeStrafeBaseDistance)-CurrentModel.Position.X;
//Temp1+=sin(App.Time);
this.OutVector.X=Temp1;
//this.OutVector.X=0;]]>
                          </Expression>
                        </SteeringBehaviour>
                        <SteeringBehaviour Kind="1" TargetCategory="2"/>
                      </Behaviours>
                    </SteeringController>
                    <ZExpression>
                      <Expression>
<![CDATA[//MonkeyTg1.Translate.Y=0.14 + cos(App.Time+MonkeyPersonality*5)*0.1;

EyeWingColor.Color.R=clamp(EyeWingColor.Color.R + App.DeltaTime*0.5,0,0.4);

if(CurrentModel.Velocity.Y>0) {
  //Vifta med vingar när den flyger uppåt
  Temp1=cos(App.Time*(6+CurrentModel.Personality*8))*(0.06-CurrentModel.Personality*0.03);
  EyeTg1.Rotate.Z=-0.21 + Temp1;
  EyeTg2.Rotate.Z=0.21 - Temp1;
}

EyeStrafeTimeout-=App.DeltaTime;

EyeStrafeShootTimeout-=App.DeltaTime;]]>
                      </Expression>
                    </ZExpression>
                    <Condition Expression="return EyeStrafeTimeout&lt;0;">
                      <OnTrue>
                        <SetModelState State="EyeState_FlyLeft"/>
                      </OnTrue>
                    </Condition>
                    <Condition Expression="return EyeStrafeShootTimeout&lt;0;">
                      <OnTrue>
                        <SpawnModel Model="EyeWormModel" UseSpawnerPosition="255"/>
                        <ZExpression Expression="EyeStrafeShootTimeout=10; //Any high value"/>
                        <PlaySound Sound="EyeFireWormSound" NoteNr="54"/>
                      </OnTrue>
                    </Condition>
                  </OnUpdate>
                  <Definitions>
                    <Variable Name="EyeStrafeBaseDistance"/>
                    <Variable Name="EyeStrafeTimeout"/>
                    <Variable Name="EyeStrafeShootTimeout"/>
                  </Definitions>
                </ModelState>
              </States>
              <OnRender>
                <UseMaterial Material="PlayerMaterial"/>
                <RenderSetColor Color="0.69 0.49 0.29 1"/>
                <RenderMesh Mesh="EyeMesh"/>
                <RenderSetColor Color="0 0 0.25 1"/>
                <RenderMesh Mesh="EyePupillMesh"/>
                <RenderSetColor Name="EyeWingColor" Color="0 0 0.07 1"/>
                <RenderTransformGroup Name="EyeTg1" Translate="0 -0.08 -0.12" Rotate="0 0 -0.21">
                  <Children>
                    <RenderMesh Mesh="EyeWingMesh"/>
                  </Children>
                </RenderTransformGroup>
                <RenderTransformGroup Name="EyeTg2" Translate="0 -0.08 -0.12" Rotate="0 -0.5 0.21">
                  <Children>
                    <RenderMesh Mesh="EyeWingMesh"/>
                  </Children>
                </RenderTransformGroup>
              </OnRender>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[EnemiesOnScreen+=1;

CurrentModel.Position.X = RightEdge+0.5;
CurrentModel.Position.Y = random(0,TopEdge-1);

Temp1=CurrentModel.Personality * 0.2;
CurrentModel.Scale.X+=Temp1;
CurrentModel.Scale.Y+=Temp1;

EyeLife=3;]]>
                  </Expression>
                </ZExpression>
                <SetModelState State="EyeState_FlyLeft"/>
              </OnSpawn>
              <OnRemove>
                <ZExpression Expression="EnemiesOnScreen-=1;"/>
              </OnRemove>
              <OnCollision>
                <ZExpression>
                  <Expression>
<![CDATA[EyeLife-=1;

CurrentModel.Position.Y += random(0,0.15);
CurrentModel.Position.X += random(0,0.15);
CurrentModel.Velocity.X*=0.85;]]>
                  </Expression>
                </ZExpression>
                <Condition Comment="Set state dead if life=0" Expression="return EyeLife&lt;=0;">
                  <OnTrue>
                    <PlaySound Sound="EyeDeadSound" NoteNr="62"/>
                    <ZExpression Expression="PlayerScore+=100;"/>
                    <SpawnModel Model="EyeExplodeModel" UseSpawnerPosition="255"/>
                    <RemoveModel/>
                  </OnTrue>
                  <OnFalse>
                    <PlaySound Sound="EyeHitSound" NoteNr="54"/>
                    <SpawnModel Model="EyeHitModel" UseSpawnerPosition="255"/>
                  </OnFalse>
                </Condition>
              </OnCollision>
            </Model>
            <Mesh Name="EyeWingMesh">
              <Producers>
                <MeshSphere Scale="0.5 1 0.5" ZSamples="4" RadialSamples="8"/>
                <MeshExpression Scale="0.25 0.38 0.25">
                  <Expression>
<![CDATA[//V : current vertex
this.V.Y-=1;
Temp1=exp(abs(this.V.Y));
this.V.X -= sin(Temp1*0.5)*1.1;
//if(this.V.Z>0.1)
  //this.V.Z=1;
//if(this.V.Z<-0.1)
  //this.V.Z=-1;]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
            <Model Name="EyeExplodeModel">
              <OnRender>
                <UseMaterial Material="DebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="4580" Spread="3" ParticleWidth="0.3" ParticleHeight="0.3" Speed="6" Radius="0.05" ParticleLifetime="0.5" AnimateAlpha="-2" Duration="0.05">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
//Temp1=random(0.8,0.1);
this.PColor.G=0;
this.PColor.B=0;
this.PColor.R=0;]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <Timer Interval="0.5">
                  <OnTimer>
                    <RemoveModel/>
                  </OnTimer>
                </Timer>
                <ZExpression Expression="CurrentModel.Rotation.Z+=App.DeltaTime*0.25;"/>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[/*CurrentModel.Scale.X+=random(0,0.1);
CurrentModel.Scale.Y+=random(0,0.1);

EyeExplodeP1.Duration*=random(1,0.3);
EyeExplodeP1.Speed*=random(1,0.3);*/]]>
                  </Expression>
                </ZExpression>
              </OnSpawn>
            </Model>
            <Sound Name="EyeDeadSound" Comment="note 62" Length="0.2" Volume="0.5" Osc1Waveform="2" UseFilter="1" FilterCutoff="0.46" FilterQ="0.47" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Destination="2" Mod1Amount="0.66" Env0Active="1" Env0ReleaseTime="1"/>
            <Sound Name="EyeStrafeSound" Comment="note 60" Length="0.3" Volume="0.2" UseFilter="1" FilterCutoff="0.65" FilterQ="0.92" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Source="2" Mod1Destination="2" Mod1Amount="0.21" Mod2Source="2" Mod2Amount="0.06" Env0Active="1" Env0ReleaseTime="0.56" Lfo0Active="1" Lfo0IsBipolar="1" Lfo0Style="1" Lfo0Speed="0.86"/>
            <Bitmap Name="EyeWormBitmap">
              <Producers>
                <BitmapRect Color="0.28 0.12 0.04 1" Size="-1 -1 1 1"/>
                <BitmapRect Color="0.81 0.19 0.24 1" Size="-1 -1 0.6 0.6"/>
                <BitmapRect Color="1 0.78 0 1" Size="1 1 0.6 0.6"/>
              </Producers>
            </Bitmap>
            <Material Name="EyeWormMaterial" Blend="1">
              <Textures>
                <MaterialTexture Texture="EyeWormBitmap" TextureScale="4 4 4" TextureX="0.5" TextureY="0.5"/>
              </Textures>
            </Material>
            <Model Name="EyeWormModel" Scale="1.4 1.4 1" Category="3" CollisionBounds="0.2 0.2 0 0">
              <Definitions>
                <Model Name="EyeWormTailModel" Scale="0.6 0.6 1">
                  <Definitions>
                    <Variable Name="EyeWormTailDelay"/>
                  </Definitions>
                  <OnRender>
                    <UseMaterial Material="TextMaterial"/>
                    <RenderMesh Mesh="EyeWormMesh"/>
                  </OnRender>
                  <OnUpdate>
                    <ZExpression>
                      <Expression>
<![CDATA[//Temp1=EyeWormModel.Position.X-CurrentModel.Position.X;

Temp3=clamp( EyeWormTailDelay*(App.DeltaTime*50),0,1);
Temp1=1-Temp3;
Temp2=Temp3;

CurrentModel.Position.X =
  (CurrentModel.Position.X*Temp1) +
  (EyeWormModel.Position.X*Temp2);
  
CurrentModel.Position.Y =
  (CurrentModel.Position.Y*Temp1) +
  (EyeWormModel.Position.Y*Temp2);]]>
                      </Expression>
                    </ZExpression>
                  </OnUpdate>
                  <OnSpawn>
                    <ZExpression>
                      <Expression>
<![CDATA[EyeWormTailDelay=Temp1;

Temp2=Temp1*0.5;
CurrentModel.Scale.X+=Temp2;
CurrentModel.Scale.Y+=Temp2;]]>
                      </Expression>
                    </ZExpression>
                  </OnSpawn>
                </Model>
              </Definitions>
              <OnRender>
                <UseMaterial Material="EyeWormMaterial"/>
                <RenderMesh Mesh="EyeWormMesh"/>
                <RenderParticles ParticlesPerSecond="16" Spread="3.14" ParticleWidth="0.08" ParticleHeight="0.08" Speed="1" Radius="0.3" ParticleLifetime="0.5" AnimateAlpha="-1">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
this.PColor.G*=rnd();]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <SteeringController Mass="0.1" MaxSpeed="4" MaxForce="8" AdjustHeading="255" Radius="0.2">
                  <Behaviours>
                    <SteeringBehaviour Kind="1" TargetCategory="3"/>
                    <SteeringBehaviour Kind="4">
                      <Expression>
<![CDATA[//OutVector : result steer vector

Temp1 = PlayerModel.Position.X - CurrentModel.Position.X;
//X noll är ej giltig param till arctan2
if(Temp1==0)
  Temp1 = 0.0001;
Temp1 = atan2(PlayerModel.Position.Y - CurrentModel.Position.Y, Temp1);
Temp1*=random(1,0.15);
this.OutVector.X=cos(Temp1)*2;
this.OutVector.Y=sin(Temp1)*2;]]>
                      </Expression>
                    </SteeringBehaviour>
                  </Behaviours>
                </SteeringController>
                <ZExpression>
                  <Expression>
<![CDATA[//CurrentModel.Rotation.Z+=App.DeltaTime * (0.5+CurrentModel.Personality);
//CurrentModel.Rotation.Y+=App.DeltaTime * (0.5 + CurrentModel.Personality);
//CurrentModel.Rotation.X+=App.DeltaTime * (0.76 + CurrentModel.Personality);

//EyeWormMaterial.Color.G=rnd();]]>
                  </Expression>
                </ZExpression>
              </OnUpdate>
              <OnSpawn>
                <Repeat Count="2">
                  <OnIteration>
                    <SpawnModel Model="EyeWormTailModel" SpawnerIsParent="255"/>
                  </OnIteration>
                  <WhileExp>
<![CDATA[Temp1=0.4 - ((this.Iteration+1)*0.034);
return this.Iteration<8;
//this.Iteration=current iteration nr. Return false to end loop.]]>
                  </WhileExp>
                </Repeat>
              </OnSpawn>
              <OnCollision>
                <RemoveModel/>
                <SpawnModel Model="EyeWormHitModel" UseSpawnerPosition="255"/>
                <ZExpression Expression="PlayerScore+=50;"/>
              </OnCollision>
            </Model>
            <Mesh Name="EyeWormMesh">
              <Producers>
                <MeshSphere Scale="0.15 0.15 0.15"/>
              </Producers>
            </Mesh>
            <Sound Name="EyeFireWormSound" Comment="note 54" Length="0.2" Volume="0.15" Osc1Waveform="1" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Source="1" Mod1Destination="2" Mod1Amount="1" Env0Active="1" Env0ReleaseTime="0.4" Env1Active="1" Env1AttackTime="0.3"/>
            <Model Name="EyeWormHitModel">
              <OnRender>
                <UseMaterial Material="DebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="280" Spread="3" ParticleWidth="0.15" ParticleHeight="0.15" Speed="1" Radius="0.05" ParticleLifetime="0.5" AnimateAlpha="-3.5" Duration="0.1">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
Temp1=random(0.9,0.1);
this.PColor.G=0;
this.PColor.B-=Temp1;
this.PColor.R=0.0;]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <Timer Interval="0.5">
                  <OnTimer>
                    <RemoveModel/>
                  </OnTimer>
                </Timer>
              </OnUpdate>
            </Model>
            <Model Name="EyeHitModel">
              <OnRender>
                <UseMaterial Material="DebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="360" Direction="-1.37" Spread="-0.61" ParticleWidth="0.1" ParticleHeight="0.1" Speed="2" ParticleLifetime="1" AnimateAlpha="-1.5" Duration="0.1">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
if(rnd()<0.5) {
  this.PColor.R=0.2;
  this.PColor.G=0;
  this.PColor.B=0;
} else {
  this.PColor.R=0.05 + random(0,0.05);
  this.PColor.G=0.05 + random(0,0.05);
  this.PColor.B=0.0;
}]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <Timer Interval="0.2">
                  <OnTimer>
                    <RemoveModel/>
                  </OnTimer>
                </Timer>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[CurrentModel.Position.Y+=random(0.0,0.35);
//CurrentModel.Position.X-= random(0.8,0.2);]]>
                  </Expression>
                </ZExpression>
              </OnSpawn>
            </Model>
            <Sound Name="EyeHitSound" Comment="54" Length="0.1" Osc1Waveform="1" UseFilter="1" FilterCutoff="0.24" FilterQ="0.06" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Destination="2" Mod1Amount="0.77" Env0Active="1" Env0ReleaseTime="0.26"/>
          </Children>
        </Group> <!-- EyeEnemy -->

        <Group Name="BossEnemy">
          <Children>
            <Model Name="BossModel" Category="2" CollisionBounds="0.75 0.75 0 0">
              <Definitions>
                <Model Name="BossSegmentModel" Category="2" CollisionBounds="0.5 0.5 0 0">
                  <Definitions>
                    <Mesh Name="BossSegmentMesh">
                      <Producers>
                        <MeshSphere ZSamples="20" RadialSamples="25"/>
                        <MeshExpression Scale="0.4 0.4 0.4">
                          <Expression>
<![CDATA[//V : current vertex

//Make square
/*Temp1=1-abs(this.V.X);
this.V.X*=1+Temp1;

Temp1=1-abs(this.V.Z);
this.V.Z*=1+Temp1;*/

Temp1=
  sin(CurrentModel.Personality+ this.V.X*2.2)+cos(this.V.Y*3.223)+sin(this.V.Z*2);
Temp2=
  sin(CurrentModel.Personality+ this.V.X*0.3434)+cos(this.V.Y*5.223)+sin(this.V.Z*2.22);

Temp2=noise2(Temp1*0.8,Temp2 + CurrentModel.Personality*3.333) * 0.8;
this.V.X+=Temp2;
this.V.Y+=Temp2;
this.V.Z+=Temp2;]]>
                          </Expression>
                        </MeshExpression>
                      </Producers>
                    </Mesh>
                    <Variable Name="BossSegmentAngle"/>
                    <Variable Name="BossSegmentLife"/>
                  </Definitions>
                  <OnRender>
                    <UseMaterial Material="PlayerMaterial"/>
                    <RenderSetColor Name="BossSegmentColor" Color="0.18 0.18 0.18 1"/>
                    <RenderMesh Mesh="BossSegmentMesh"/>
                  </OnRender>
                  <OnUpdate>
                    <ZExpression>
                      <Expression>
<![CDATA[CurrentModel.Rotation.Z=CurrentModel.Personality + App.Time*0.5;
CurrentModel.Rotation.X=BossSegmentAngle*0.02;
CurrentModel.Rotation.Y=BossSegmentAngle*0.035;

CurrentModel.Position.X=BossModel.Position.X + sin(BossSegmentAngle)*BossSegmentDistance +
  CurrentModel.Personality*0.3;
CurrentModel.Position.Y=BossModel.Position.Y + cos(BossSegmentAngle)*BossSegmentDistance +
  CurrentModel.Personality*0.2;

BossSegmentAngle+=App.DeltaTime*1.5;]]>
                      </Expression>
                    </ZExpression>
                  </OnUpdate>
                  <OnSpawn>
                    <ZExpression>
                      <Expression>
<![CDATA[BossSegmentAngle=Temp1;

Temp2=0.5+sin(BossSegmentAngle)*0.5; ///(3.14*2);
BossSegmentColor.Color.R=0.2 + Temp2*0.3;
BossSegmentColor.Color.G=Temp2*0.4;
BossSegmentColor.Color.B=Temp2*0.25;

BossSegmentLife=8 + Difficulty*8;]]>
                      </Expression>
                    </ZExpression>
                  </OnSpawn>
                  <OnRemove>
                    <ZExpression>
                      <Expression>
<![CDATA[BossSegmentsRemaining-=1;
PlayerScore+=100;]]>
                      </Expression>
                    </ZExpression>
                  </OnRemove>
                  <OnCollision>
                    <ZExpression>
                      <Expression>
<![CDATA[BossSegmentLife-=1;

CurrentModel.Position.Y += random(0,0.15);
CurrentModel.Position.X += random(0,0.15);]]>
                      </Expression>
                    </ZExpression>
                    <Condition Comment="Set state dead if life=0" Expression="return BossSegmentLife&lt;=0;">
                      <OnTrue>
                        <PlaySound Sound="EyeDeadSound"/>
                        <ZExpression Expression="PlayerScore+=100;"/>
                        <SpawnModel Model="EyeExplodeModel" UseSpawnerPosition="255"/>
                        <RemoveModel/>
                      </OnTrue>
                      <OnFalse>
                        <SpawnModel Model="BossSegmentHitModel" UseSpawnerPosition="255"/>
                        <PlaySound Sound="BossSegmentHitSound" NoteNr="24"/>
                      </OnFalse>
                    </Condition>
                  </OnCollision>
                </Model>
                <Constant Name="BossSegmentCount" Value="12"/>
                <Variable Name="BossSegmentDistance"/>
                <Variable Name="BossIdleLocalTime"/>
                <Variable Name="BossNextShotTimer"/>
                <Variable Name="BossSegmentsRemaining"/>
                <Variable Name="BossLife"/>
                <Mesh Name="BossBodyMesh">
                  <Producers>
                    <MeshSphere ZSamples="20" RadialSamples="25"/>
                    <MeshExpression Scale="0.6 0.4 0.2">
                      <Expression>
<![CDATA[//V : current vertex



//Make square
Temp1=1-abs(this.V.X);
this.V.X*=1+Temp1;

/*Temp1=1-abs(this.V.Y);
if( abs(this.V.X)<0.8 ) {
  Temp1 += abs(noise2(this.V.X*7344.1512,MonkeyPersonality*333.3))*1.5;
}
this.V.Y*=1+Temp1; */

/*
Temp2=atan2(this.V.Y + MonkeyPersonality,this.V.X + MonkeyPersonality);

Temp4=this.V.Z;
Temp3=atan2(sqrt(1 - Temp4 * Temp4), Temp4);

Temp1=
 clamp(-0.8+
  (cos(Temp2*4) +
  sin(Temp3*8)) * 0.8,0,0.5);
this.V.X*=1 + Temp1;
this.V.Y*=1 + Temp1;
this.V.Z*=1 + Temp1;
*/]]>
                      </Expression>
                    </MeshExpression>
                  </Producers>
                </Mesh>
                <Mesh Name="BossEyeMesh">
                  <Producers>
                    <MeshSphere Scale="0.2 0.15 0.05" ZSamples="4" RadialSamples="13"/>
                    <MeshExpression Scale="1 1 0.5">
                      <Expression>
<![CDATA[//V : current vertex
Temp1=this.V.X;
if(Temp1==0)
  Temp1=0.0001;
Temp1=atan2(this.V.Y,Temp1);// + CurrentModel.Personality;
Temp1=1 + abs(tan(Temp1*2.3) * 0.01);
this.V.X*=Temp1;
this.V.Y*=Temp1;]]>
                      </Expression>
                    </MeshExpression>
                  </Producers>
                </Mesh>
                <Mesh Name="BossPupillMesh">
                  <Producers>
                    <MeshSphere Scale="0.05 0.03 0.1" ZSamples="4"/>
                  </Producers>
                </Mesh>
              </Definitions>
              <States>
                <ModelState Name="BossState_Idle">
                  <OnStart>
                    <ZExpression Expression="BossNextStateTimer=2 + random(0,1);"/>
                  </OnStart>
                  <OnUpdate>
                    <ZExpression>
                      <Expression>
<![CDATA[//Move faster when less segments remain
BossIdleLocalTime+=App.DeltaTime * (1 + (BossSegmentCount-BossSegmentsRemaining)*(2/BossSegmentCount) );

//Smooth in after appearing
Temp1=clamp(BossIdleLocalTime,0,1);

CurrentModel.Position.X=2 +
  noise2(CurrentModel.Personality*1.22,BossIdleLocalTime*0.5) * (3.5*Temp1);
CurrentModel.Position.Y=//sin(BossIdleLocalTime*6) *
  (noise2(CurrentModel.Personality,BossIdleLocalTime*0.4)* 1.67 * TopEdge)*Temp1;

BossNextStateTimer-=App.DeltaTime;]]>
                      </Expression>
                    </ZExpression>
                    <Condition Expression="return (BossNextStateTimer&lt;=0) &amp;&amp; (BossSegmentsRemaining&gt;0);">
                      <OnTrue>
                        <SetModelState State="BossState_Expanding"/>
                      </OnTrue>
                    </Condition>
                  </OnUpdate>
                  <Definitions>
                    <Variable Name="BossNextStateTimer"/>
                  </Definitions>
                </ModelState>
                <ModelState Name="BossState_Expanding">
                  <OnStart>
                    <ZExpression Expression="BossExpandingTimer=BossExpandingDuration;"/>
                    <PlaySound Sound="BossExpandingSound" NoteNr="36"/>
                  </OnStart>
                  <OnUpdate>
                    <ZExpression>
                      <Expression>
<![CDATA[BossIdleLocalTime+=App.DeltaTime*0.5;
CurrentModel.Position.X=2 +
  noise2(CurrentModel.Personality*1.22,BossIdleLocalTime*0.5) * 3.5;
CurrentModel.Position.Y=//sin(BossIdleLocalTime*6) *
  (noise2(CurrentModel.Personality,BossIdleLocalTime*0.4)* 1.67 * TopEdge);

Temp1=(1-(BossExpandingTimer/BossExpandingDuration)) * (3.14);
BossSegmentDistance=1 + ( sin(Temp1)*3 +
  noise2(Temp1,App.Time*1.5)*sin(Temp1)*2.5
);

BossExpandingTimer-=App.DeltaTime;]]>
                      </Expression>
                    </ZExpression>
                    <Condition Expression="return BossExpandingTimer&lt;=0;">
                      <OnTrue>
                        <SetModelState State="BossState_Idle"/>
                      </OnTrue>
                    </Condition>
                  </OnUpdate>
                  <Definitions>
                    <Variable Name="BossExpandingTimer"/>
                    <Constant Name="BossExpandingDuration" Value="5"/>
                  </Definitions>
                </ModelState>
                <ModelState Name="BossState_Appearing">
                  <OnStart>
                    <ZExpression Expression="BossNextStateTimer=2;"/>
                  </OnStart>
                  <OnUpdate>
                    <ZExpression>
                      <Expression>
<![CDATA[//Move faster when less segments remain
//BossIdleLocalTime+=App.DeltaTime * (1 + (BossSegmentCount-BossSegmentsRemaining)*(2/BossSegmentCount) );

CurrentModel.Position.X=2 + BossNextStateTimer*4;
//  noise2(CurrentModel.Personality*1.22,BossIdleLocalTime*0.5) * 3.5;
CurrentModel.Position.Y=0;

BossNextStateTimer-=App.DeltaTime;]]>
                      </Expression>
                    </ZExpression>
                    <Condition Expression="return (BossNextStateTimer&lt;=0);">
                      <OnTrue>
                        <SetModelState State="BossState_Idle"/>
                      </OnTrue>
                    </Condition>
                  </OnUpdate>
                </ModelState>
              </States>
              <OnRender>
                <UseMaterial Material="PlayerMaterial"/>
                <RenderSetColor Color="0.18 0.18 0.18 1"/>
                <RenderMesh Mesh="BossBodyMesh"/>
                <RenderTransformGroup Translate="-0.25 0.08 0.25">
                  <Children>
                    <RenderSetColor Color="0.82 0.82 0.82 1"/>
                    <RenderMesh Mesh="BossEyeMesh"/>
                    <RenderSetColor Color="0 0 0 1"/>
                    <RenderMesh Mesh="BossPupillMesh"/>
                  </Children>
                </RenderTransformGroup>
                <RenderTransformGroup Translate="0.25 0.08 0.25" Rotate="0 0.5 0">
                  <Children>
                    <RenderSetColor Color="0.82 0.82 0.82 1"/>
                    <RenderMesh Mesh="BossEyeMesh"/>
                    <RenderSetColor Color="0 0 0 1"/>
                    <RenderMesh Mesh="BossPupillMesh"/>
                  </Children>
                </RenderTransformGroup>
              </OnRender>
              <OnUpdate>
                <ZExpression>
                  <Expression>
<![CDATA[//BossRotateZ+=App.DeltaTime*0.25;
BossNextShotTimer-=App.DeltaTime;

//BossModel.Rotation.Z = sin(App.Time)*0.05;]]>
                  </Expression>
                </ZExpression>
                <Condition Expression="return BossNextShotTimer&lt;=0;">
                  <OnTrue>
                    <ZExpression>
                      <Expression>
<![CDATA[BossNextShotTimer=clamp(2.5 -
  clamp(BossSegmentDistance*0.5,0,2) -
  Difficulty,0.1,2.5);

Temp1=1-(BossSegmentsRemaining/BossSegmentCount);
Temp2=clamp(BossSegmentDistance*0.5,0,1);
Temp3=Difficulty;

//Temp1=0 fire slowest, 1 fire fastest
Temp1=(Temp1 * 0.45) +
  (Temp2 * 0.15) +
  Temp3*0.4;
BossNextShotTimer=2.5-Temp1*2.3;

//Direction to fire
Temp1=PlayerModel.Position.X - CurrentModel.Position.X;
Temp2=PlayerModel.Position.Y - CurrentModel.Position.Y;
Temp3 = Temp1;
//X noll är ej giltig param till arctan2
if(Temp3==0)
  Temp3 = 0.0001;
Temp1=atan2(Temp2, Temp3)-0.4;
//Temp3+=sin(App.Time*5)*0.25;
Temp1*=random(1,0.15);

Temp2=5 + (1-(BossSegmentsRemaining/BossSegmentCount))*4;
//exit temp1, temp2]]>
                      </Expression>
                    </ZExpression>
                    <Repeat>
                      <OnIteration>
                        <SpawnModel Model="BossShotModel" UseSpawnerPosition="255"/>
                      </OnIteration>
                      <WhileExp>
<![CDATA[//this.Iteration=current iteration nr. Return false to end loop.
if(frac(App.Time)>0.8) {
  Temp3=0.19;
  Temp4=16;
} else {
  Temp3=0.1;
  Temp4=8;
}
Temp1+=Temp3;
return this.Iteration<Temp4;]]>
                      </WhileExp>
                    </Repeat>
                  </OnTrue>
                </Condition>
              </OnUpdate>
              <OnSpawn>
                <Repeat>
                  <OnIteration>
                    <SpawnModel Model="BossSegmentModel" UseSpawnerPosition="255" SpawnerIsParent="255"/>
                  </OnIteration>
                  <WhileExp>
<![CDATA[Temp1=((3.14*2)/BossSegmentCount * this.Iteration);
return this.Iteration<BossSegmentCount;]]>
                  </WhileExp>
                </Repeat>
                <SetModelState State="BossState_Appearing"/>
                <ZExpression>
                  <Expression>
<![CDATA[BossSegmentDistance=1;
BossSegmentsRemaining=BossSegmentCount;
BossNextShotTimer=2;
BossLife=30;

EnemiesOnScreen+=1;]]>
                  </Expression>
                </ZExpression>
              </OnSpawn>
              <OnRemove>
                <ZExpression Expression="EnemiesOnScreen-=1;"/>
              </OnRemove>
              <OnCollision>
                <ZExpression>
                  <Expression>
<![CDATA[BossLife-=1;

CurrentModel.Position.Y += random(0,0.15);
CurrentModel.Position.X += random(0,0.15);]]>
                  </Expression>
                </ZExpression>
                <Condition Comment="Set state dead if life=0" Expression="return BossLife&lt;=0;">
                  <OnTrue>
                    <PlaySound Sound="BossDeadSound" NoteNr="49"/>
                    <ZExpression Expression="PlayerScore+=1800;"/>
                    <SpawnModel Model="BossDeadModel" UseSpawnerPosition="255"/>
                    <RemoveModel/>
                  </OnTrue>
                  <OnFalse>
                    <SpawnModel Model="BossHitModel" UseSpawnerPosition="255"/>
                    <PlaySound Sound="BossHitSound" NoteNr="80"/>
                  </OnFalse>
                </Condition>
              </OnCollision>
            </Model>
            <Model Name="BossShotModel" Category="3" CollisionBounds="0.25 0.25 0 0">
              <OnRender>
                <UseMaterial Material="PlayerMaterial"/>
                <RenderSetColor Name="BossShotColor" Color="0.25 0.04 0.22 1"/>
                <RenderMesh Mesh="BossShotMesh"/>
              </OnRender>
              <OnUpdate>
                <Condition>
                  <Expression>
<![CDATA[return
  (CurrentModel.Position.X<LeftEdge) ||
  (CurrentModel.Position.X>RightEdge) ||
  (CurrentModel.Position.Y>TopEdge) ||
  (CurrentModel.Position.Y<BottomEdge);]]>
                  </Expression>
                  <OnTrue>
                    <RemoveModel/>
                  </OnTrue>
                </Condition>
                <ZExpression>
                  <Expression>
<![CDATA[//CoconutModel.Velocity.Y-=CoconutPersonality*0.2;

//CurrentModel.Rotation.Z+=CurrentModel.Personality*0.4;
//Temp1=CurrentModel.Rotation.X - abs(CurrentModel.Velocity.Y*0.15);
//CurrentModel.Rotation.X+=Temp1 * App.DeltaTime;
//CurrentModel.Rotation.Y+=CurrentModel.Personality*0.15;]]>
                  </Expression>
                </ZExpression>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[//Temp1=angle
//Temp2=speed

//Temp2=4 + Difficulty*3;

CurrentModel.Velocity.X=cos(Temp1)*Temp2;
CurrentModel.Velocity.Y=sin(Temp1)*Temp2;


/*
Temp1=1+(0.5-CurrentModel.Personality);
BossShotColor.Color.R*=Temp1;
BossShotColor.Color.G*=Temp1;
BossShotColor.Color.B*=Temp1;



Temp1=PlayerModel.Position.X - CurrentModel.Position.X;
Temp2=PlayerModel.Position.Y - CurrentModel.Position.Y;
Temp3 = Temp1;
//X noll är ej giltig param till arctan2
if(Temp3==0)
  Temp3 = 0.0001;
Temp3 = atan2(Temp2, Temp3);
Temp3+=sin(App.Time*5)*0.25;
Temp3*=random(1,0.15);

Temp1=sqrt( (Temp1*Temp1) + (Temp2*Temp2) );
Temp2=clamp(3 + Temp1*2,3,9);
CurrentModel.Velocity.X=cos(Temp3)*Temp2;
CurrentModel.Velocity.Y=sin(Temp3)*Temp2;
*/]]>
                  </Expression>
                </ZExpression>
                <PlaySound Sound="BossShotSound" NoteNr="26"/>
              </OnSpawn>
              <OnCollision>
                <RemoveModel/>
                <SpawnModel Model="CocunutHitModel" UseSpawnerPosition="255"/>
              </OnCollision>
            </Model>
            <Mesh Name="BossShotMesh">
              <Producers>
                <MeshSphere Scale="0.5 0.6 0.15" ZSamples="6"/>
                <MeshExpression Scale="0.4 0.3 0.3">
                  <Expression>
<![CDATA[//V : current vertex
/*Temp1=exp(abs(this.V.Y));
this.V.X -= sin(Temp1*1.5)*1.5;
if(this.V.Z>0.1)
  this.V.Z=1;
if(this.V.Z<-0.1)
  this.V.Z=-1;*/]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
            <Sound Name="BossShotSound" Comment="note 26, borde vara sine" Length="0.1" Osc1Waveform="1" UseFilter="1" FilterCutoff="0.46" FilterQ="0.2" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Destination="2" Mod1Amount="1" Env0Active="1" Env0ReleaseTime="0.18"/>
            <Sound Name="BossSegmentHitSound" Comment="24" Length="0.1" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Destination="2" Mod1Amount="0.79" Env0Active="1" Env0ReleaseTime="0.2" Env1Active="1" Env1AttackTime="0.82"/>
            <Model Name="BossSegmentHitModel">
              <OnRender>
                <UseMaterial Material="SmokeMaterial"/>
                <RenderParticles ParticlesPerSecond="200" ParticleWidth="0.5" ParticleHeight="0.5" Radius="0.5" ParticleLifetime="1" AnimateAlpha="-1.6" Duration="0.1"/>
                <UseMaterial Material="BossDebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="1500" Direction="-1.5" Spread="3" ParticleWidth="0.1" ParticleHeight="0.1" Speed="1.3" Radius="0.3" ParticleLifetime="1" AnimateAlpha="-1.5" Duration="0.2">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
if(rnd()<0.3) {
  this.PColor.R=0.2;
  this.PColor.G=0.2;
  this.PColor.B=0.0 + random(0,0.2);
} else {
  this.PColor.R=0.15 + random(0,0.05);
  this.PColor.G=0; //0.05 + random(0,0.05);
  this.PColor.B=0.0 + random(0,0.2);
}
this.PColor.A=1.0;]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <AnimatorGroup Duration="1" AutoStart="255">
                  <OnStop>
                    <RemoveModel/>
                  </OnStop>
                </AnimatorGroup>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[CurrentModel.Position.Y+=random(0.0,0.35);
//CurrentModel.Position.X-= random(0.8,0.2);
CurrentModel.Position.Z=0.5;]]>
                  </Expression>
                </ZExpression>
              </OnSpawn>
            </Model>
            <Sound Name="BossHitSound" Comment="80" Length="0.1" Osc1Waveform="2" UseFilter="1" FilterCutoff="0.87" FilterQ="0.77" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Destination="2" Mod1Amount="1" Env0Active="1" Env0ReleaseTime="0.2"/>
            <Model Name="BossHitModel">
              <OnRender>
                <UseMaterial Material="DebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="1500" Direction="-1.5" Spread="3" ParticleWidth="0.15" ParticleHeight="0.15" Speed="2" Radius="0.2" ParticleLifetime="1" AnimateAlpha="-1.5" Duration="0.2">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
if(rnd()<0.5) {
  this.PColor.R=0.2;
  this.PColor.G=0;
  this.PColor.B=0;
} else {
  this.PColor.R=0.0 + random(0,0.025);
  this.PColor.G=0.0 + random(0,0.05);
  this.PColor.B=0.0;
}]]>
                  </OnEmitExpression>
                </RenderParticles>
              </OnRender>
              <OnUpdate>
                <Timer Interval="1">
                  <OnTimer>
                    <RemoveModel/>
                  </OnTimer>
                </Timer>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[CurrentModel.Position.Y+=random(0.0,0.35);
//CurrentModel.Position.X-= random(0.8,0.2);]]>
                  </Expression>
                </ZExpression>
              </OnSpawn>
            </Model>
            <Sound Name="BossExpandingSound" Comment="36" Length="5" UseOsc2="1" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Source="2" Mod1Destination="10" Mod1Amount="0.05" Mod2Active="1" Mod2Source="4" Mod2Destination="2" Mod2Amount="0.04" Env0Active="1" Env0ReleaseTime="5" Lfo0Active="1" Lfo0Speed="0.08"/>
            <Material Name="BossDebrisMaterial" Light="0" Blend="1" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="BossDebrisBitmap" TexCoords="1"/>
              </Textures>
            </Material>
            <Bitmap Name="BossDebrisBitmap">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[Temp1=noise2(this.X*4,this.Y*4);

Temp2=this.X-0.5;
Temp3=this.Y-0.5;
Temp2=sqrt(Temp2*Temp2 + Temp3*Temp3)*2.25;

Temp1+=Temp2;

if(Temp1<=0.9)
  Temp1=0;


//Temp1=1-Temp1;
Temp1=1-Temp1;
this.Pixel.R=Temp1;
this.Pixel.G=Temp1;
this.Pixel.B=Temp1;
this.Pixel.A=1-Temp1;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Model Name="BossDeadModel">
              <OnRender>
                <UseMaterial Material="DebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="1500" Direction="-1.5" Spread="3" ParticleWidth="0.15" ParticleHeight="0.15" Speed="2" Radius="0.2" ParticleLifetime="1" AnimateAlpha="-1.5" Duration="0.8">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
if(rnd()<0.5) {
  this.PColor.R=0.4;
  this.PColor.G=0;
  this.PColor.B=0;
} else {
  this.PColor.R=0.0 + random(0,0.025);
  this.PColor.G=0.0 + random(0,0.05);
  this.PColor.B=0.0;
}]]>
                  </OnEmitExpression>
                </RenderParticles>
                <UseMaterial Material="BossDebrisMaterial"/>
                <RenderParticles ParticlesPerSecond="1500" Direction="-1.5" Spread="3" ParticleWidth="0.1" ParticleHeight="0.1" Speed="3" Radius="0.3" ParticleLifetime="1" AnimateAlpha="-1.5" Duration="0.4">
                  <OnEmitExpression>
<![CDATA[//Emit particle.
//PColor : particle color
if(rnd()<0.3) {
  this.PColor.R=0.2;
  this.PColor.G=0.2;
  this.PColor.B=0.0 + random(0,0.2);
} else {
  this.PColor.R=0.15 + random(0,0.05);
  this.PColor.G=0; //0.05 + random(0,0.05);
  this.PColor.B=0.0 + random(0,0.2);
}
this.PColor.A=1.0;]]>
                  </OnEmitExpression>
                </RenderParticles>
                <UseMaterial Material="SmokeMaterial"/>
                <RenderParticles ParticlesPerSecond="500" Direction="-1" Spread="3.14" ParticleWidth="1" ParticleHeight="0.5" Speed="4" Radius="0.5" ParticleLifetime="1" AnimateAlpha="-1.6" Duration="0.4"/>
                <UseMaterial Material="BeamMaterial"/>
                <RenderBeams Count="8" Length="2" Width="0.4"/>
              </OnRender>
              <OnUpdate>
                <Timer Interval="1.5">
                  <OnTimer>
                    <RemoveModel/>
                  </OnTimer>
                </Timer>
              </OnUpdate>
              <OnSpawn>
                <ZExpression>
                  <Expression>
<![CDATA[CurrentModel.Position.Y+=random(0.0,0.35);
//CurrentModel.Position.X-= random(0.8,0.2);]]>
                  </Expression>
                </ZExpression>
              </OnSpawn>
            </Model>
            <Sound Name="BossDeadSound" Comment="49" Length="5" UseOsc2="1" UseFilter="1" FilterCutoff="0.74" FilterQ="0.92" Mod0Active="1" Mod0Destination="11" Mod0Amount="1" Mod1Active="1" Mod1Source="2" Mod1Destination="10" Mod1Amount="0.14" Mod2Active="1" Mod2Source="3" Mod2Destination="2" Mod2Amount="0.18" Mod3Active="1" Mod3Source="4" Mod3Amount="0.22" Env0Active="1" Env0ReleaseTime="5" Lfo0Active="1" Lfo0Speed="0.1" Lfo1Active="1" Lfo1Style="1" Lfo1Speed="0.55"/>
          </Children>
        </Group> <!-- BossEnemy -->

      </Children>
    </Group> <!-- Enemies -->

    <Group Name="TitleScreen">
      <Children>
        <Model Name="TitleScreenModel">
          <Definitions>
            <Variable Name="TitleIntroTime"/>
            <Constant Name="TitleStartTextX" Value="0.62"/>
            <Constant Name="TitleStartTextY" Value="-0.83"/>
            <Constant Name="TitleStartTextScale" Value="1.5"/>
          </Definitions>
          <States>
            <ModelState Name="TitleState_Appear">
              <OnStart>
                <ZExpression Expression="TitleIntroTime=0;"/>
              </OnStart>
              <OnUpdate>
                <ZExpression Expression="TitleIntroTime+=App.DeltaTime*0.5;"/>
                <Condition Expression="return TitleIntroTime&gt;=1;">
                  <OnTrue>
                    <SetModelState State="TitleState_Idle"/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
            </ModelState>
            <ModelState Name="TitleState_Idle">
              <OnStart>
                <ZExpression Expression="TitleIntroTime=1;"/>
              </OnStart>
            </ModelState>
            <ModelState Name="TitleState_Leave">
              <OnUpdate>
                <ZExpression Expression="TitleIntroTime-=App.DeltaTime*2;"/>
                <Condition Expression="return TitleIntroTime&lt;=0;">
                  <OnTrue>
                    <SetAppState State="AppState_Playing"/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
            </ModelState>
          </States>
          <OnRender>
            <RenderTransformGroup Scale="12 10 1">
              <Children>
                <UseMaterial Material="PaperMaterial"/>
                <RenderSprite/>
              </Children>
            </RenderTransformGroup>
            <UseMaterial Material="TextMaterial"/>
            <RenderSetColor Color="0 0 0 1"/>
            <RenderText Name="TitleText1" Text="TRIPLE-E" X="3" Y="0.87" Scale="0.5"/>
            <RenderText Name="TitleText2" Text="A SMALL GAME FOR THE SHMUPDEV COMPETITION" X="3" Y="0.79" Scale="0.25">
              <RenderCharExpression>
<![CDATA[//Modify current character before render.
//CharX,CharY : current coordinate
//CharI : current character index
//CharRotate : current character rotation in radians
//CharScale : current character scale
//this.CharY=noise2(this.CharI*0.1,TitleIntroTime)*0.5;
//this.CharScale=1.5+noise2(this.CharI*0.1,App.Time*1)*0.9;
//this.CharScale=1.5+noise2(this.CharI*0.1,App.Time*1)*0.9;
//this.CharRotate=(1-TitleIntroTime) * 3.14;]]>
              </RenderCharExpression>
            </RenderText>
            <RenderText Name="TitleText3" Text="BY VILLE KRUMLINDE  WWW.EMIX8.ORG" X="3" Y="0.72" Scale="0.25"/>
            <RenderText Name="TitleTextStart" Text="START" X="3" Y="-0.83" Scale="1.5">
              <RenderCharExpression>
<![CDATA[//Modify current character before render.
//CharX,CharY : current coordinate
//CharI : current character index
//CharRotate : current character rotation in radians
//CharScale : current character scale
this.CharRotate=(1-TitleIntroTime) * (3.14*0.1)*(this.CharI+1);]]>
              </RenderCharExpression>
            </RenderText>
            <RenderTransformGroup Translate="-0.11 -0.45 0" Rotate="0 -0.51 0">
              <Children>
                <RenderSetColor Color="0.45 0.15 0.1 1"/>
                <RenderText Text="PRESS SPACE TO START" X="-0.95" Y="-0.88" Scale="0.35" Align="1"/>
                <RenderText Text="CONTROLS: MOUSE + A,S AND W" X="-0.95" Y="-0.94" Scale="0.35" Align="1"/>
              </Children>
            </RenderTransformGroup>
          </OnRender>
          <OnUpdate>
            <ZExpression>
              <Expression>
<![CDATA[//TitleIntroTime sveper från 0..1

TitleText1.X=-0.7 - (0.5-TitleIntroTime*0.5);

TitleText2.X=-0.40 - (2-TitleIntroTime*2);

TitleText3.X=-0.50 - (5-TitleIntroTime*5);

TitleTextStart.X=TitleStartTextX + (1.5-clamp(TitleIntroTime*4.0,0,1.5));

Temp4=0;]]>
              </Expression>
            </ZExpression>
            <Condition>
              <Expression>
<![CDATA[Temp1=TitleMouseCursor.Position.X * (1/RightEdge);
Temp2=TitleMouseCursor.Position.Y / TopEdge;
return
  (Temp1>=TitleStartTextX-0.5) &&
  (Temp1<=TitleStartTextX+0.25) &&
  (Temp2<=TitleStartTextY+0.25) &&
  (Temp2>=TitleStartTextY-0.25);]]>
              </Expression>
              <OnTrue>
                <ZExpression Expression="TitleTextStart.Scale=TitleStartTextScale + sin(App.Time*4)*0.08;"/>
                <KeyPress Keys="{">
                  <OnPressed>
                    <ZExpression Expression="Temp4=1;"/>
                  </OnPressed>
                </KeyPress>
              </OnTrue>
              <OnFalse>
                <ZExpression Expression="TitleTextStart.Scale=TitleStartTextScale;"/>
              </OnFalse>
            </Condition>
            <KeyPress Keys=" ">
              <OnPressed>
                <ZExpression Expression="Temp4=1;"/>
              </OnPressed>
            </KeyPress>
            <Condition Expression="return Temp4&gt;0;">
              <OnTrue>
                <SetModelState State="TitleState_Leave"/>
              </OnTrue>
            </Condition>
          </OnUpdate>
          <OnSpawn>
            <SetModelState State="TitleState_Appear"/>
            <SpawnModel Model="TitleMouseCursor" SpawnStyle="1"/>
          </OnSpawn>
        </Model>
        <Model Name="TitleMouseCursor" Position="-4.7161 4 0" Velocity="0.0003 0 0">
          <Definitions>
            <Mesh Name="TitleMouseMesh1">
              <Producers>
                <MeshBox Scale="0.05 0.2 0.1"/>
              </Producers>
            </Mesh>
          </Definitions>
          <OnRender>
            <UseMaterial Material="PlayerMaterial"/>
            <RenderSetColor Color="0.12 0.43 0.42 1"/>
            <RenderTransformGroup>
              <Children>
                <RenderMesh Mesh="TitleMouseMesh1"/>
              </Children>
            </RenderTransformGroup>
            <RenderTransformGroup Rotate="0 0 0.25">
              <Children>
                <RenderMesh Mesh="TitleMouseMesh1"/>
              </Children>
            </RenderTransformGroup>
          </OnRender>
          <OnUpdate>
            <MouseModelController ScaleX="6" ScaleY="4"/>
          </OnUpdate>
        </Model>
        <Model Name="GameOverModel">
          <Definitions>
            <Variable Name="GameOverIntroTime"/>
          </Definitions>
          <States>
            <ModelState Name="GameOverState_Appear">
              <OnStart>
                <ZExpression Expression="GameOverIntroTime=0;"/>
              </OnStart>
              <OnUpdate>
                <ZExpression Expression="GameOverIntroTime+=App.DeltaTime*0.5;"/>
                <Condition Expression="return GameOverIntroTime&gt;=1;">
                  <OnTrue>
                    <SetModelState State="GameOverState_Idle"/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
            </ModelState>
            <ModelState Name="GameOverState_Idle">
              <OnStart>
                <ZExpression Expression="GameOverIntroTime=1;"/>
              </OnStart>
            </ModelState>
            <ModelState Name="GameOverState_Leave">
              <OnUpdate>
                <ZExpression Expression="GameOverIntroTime-=App.DeltaTime*2;"/>
                <Condition Expression="return GameOverIntroTime&lt;=0;">
                  <OnTrue>
                    <SetAppState State="AppState_TitleScreen"/>
                  </OnTrue>
                </Condition>
              </OnUpdate>
            </ModelState>
          </States>
          <OnRender>
            <RenderTransformGroup Scale="12 10 1">
              <Children>
                <UseMaterial Material="PaperMaterial"/>
                <RenderSprite/>
              </Children>
            </RenderTransformGroup>
            <UseMaterial Material="TextMaterial"/>
            <RenderSetColor Color="0 0 0 1"/>
            <RenderText Name="GameOverText1" Text="FINAL SCORE" X="3" Scale="0.7"/>
            <RenderText Name="GameOverText2" TextFloatRef="PlayerScore" X="3" Y="-0.48" Scale="1.16">
              <RenderCharExpression>
<![CDATA[//Modify current character before render.
//CharX,CharY : current coordinate
//CharI : current character index
//CharRotate : current character rotation in radians
//CharScale : current character scale
//this.CharY=noise2(this.CharI*0.1,TitleIntroTime)*0.5;
//this.CharScale=1.5+noise2(this.CharI*0.1,App.Time*1)*0.9;
//this.CharScale=1.5+noise2(this.CharI*0.1,App.Time*1)*0.9;
//this.CharRotate=(1-TitleIntroTime) * 3.14;]]>
              </RenderCharExpression>
            </RenderText>
            <RenderText Name="GameOverText4" Text="GAME OVER" X="3" Y="0.37" Scale="1.5">
              <RenderCharExpression>
<![CDATA[//Modify current character before render.
//CharX,CharY : current coordinate
//CharI : current character index
//CharRotate : current character rotation in radians
//CharScale : current character scale
this.CharRotate=(1-GameOverIntroTime) * (3.14*0.025)*(this.CharI+1);]]>
              </RenderCharExpression>
            </RenderText>
          </OnRender>
          <OnUpdate>
            <ZExpression>
              <Expression>
<![CDATA[//GameOverIntroTime sveper från 0..1

GameOverText1.X=0 - (1.5-GameOverIntroTime*1.5);

GameOverText2.X=0 - (2-GameOverIntroTime*2);

GameOverText4.X=0 + (2.5-clamp(GameOverIntroTime*2.5,0,2.5));]]>
              </Expression>
            </ZExpression>
            <KeyPress Keys=" {">
              <OnPressed>
                <SetModelState State="GameOverState_Leave"/>
              </OnPressed>
            </KeyPress>
          </OnUpdate>
          <OnSpawn>
            <SetModelState State="GameOverState_Appear"/>
          </OnSpawn>
        </Model>
      </Children>
    </Group> <!-- TitleScreen -->

    <Group Name="Font3Group">
      <Children>
        <Bitmap Name="FontBitmap3" Width="4" Height="1">
          <Producers>
            <BitmapFromFile Transparency="1">
              <BitmapFile>

              </BitmapFile>
            </BitmapFromFile>
          </Producers>
        </Bitmap>
        <Font Name="Font3" Bitmap="FontBitmap3" FirstChar="33" CharPixelWidth="8" CharPixelHeight="8" BorderPixels="1"/>
        <Material Name="TextMaterial" Color="0.42 0.07 0.07 1" Light="0" Blend="1" ZBuffer="0" Font="Font3"/>
      </Children>
    </Group> <!-- Font3Group -->

  </Content>
</ZApplication>

<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Caption="ZGameEditor application" RenderPasses="2" CameraPosition="0 0 8">
  <OnLoaded>
    <ZLibrary Comment="HSV convertion by Kjell">
      <Source>
<![CDATA[float angle(float X)
{
  if(X >= 0 && X < 360)return X;
  if(X > 360)return X-floor(X/360)* 360;
  if(X <   0)return X+floor(X/360)*-360;
}

void hsv(float H, float S, float V)
{
  float R,G,B,I,F,P,Q,T;
  
  H = angle(H);
  S = clamp(S,0,100);
  V = clamp(V,0,100);

  H /= 60;
  S /= 100;
  V /= 100;
  
  if(S == 0)
  {
    Color[0] = V;
    Color[1] = V;
    Color[2] = V;
    return;
  }

  I = floor(H);
  F = H-I;

  P = V*(1-S);
  Q = V*(1-S*F);
  T = V*(1-S*(1-F));

  if(I == 0){R = V; G = T; B = P;}
  if(I == 1){R = Q; G = V; B = P;}
  if(I == 2){R = P; G = V; B = T;}
  if(I == 3){R = P; G = Q; B = V;}
  if(I == 4){R = T; G = P; B = V;}
  if(I == 5){R = V; G = P; B = Q;}
  
  Color[0] = R;
  Color[1] = G;
  Color[2] = B;
}]]>
      </Source>
    </ZLibrary>
    <SpawnModel Model="Canvas"/>
  </OnLoaded>
  <OnUpdate>
    <ZExpression>
      <Expression>
<![CDATA[hsv(Parameters[1]*360,Parameters[2]*100,(1-Parameters[3])*100);

red.value=Color[0];
green.value=Color[1];
blue.value=Color[2];

alpha.value = (1-Parameters[0]);]]>
      </Expression>
    </ZExpression>
  </OnUpdate>
  <OnBeginRenderPass>
    <Condition Comment="render pass" Expression="return App.CurrentRenderPass == 0;">
      <OnTrue>
        <SetRenderTarget RenderTarget="CanvasTarget"/>
      </OnTrue>
      <OnFalse>
        <SetRenderTarget/>
      </OnFalse>
    </Condition>
  </OnBeginRenderPass>
  <Content>
    <Group Comment="values">
      <Children>
        <DefineArray Name="Parameters" SizeDim1="4" Persistent="255">
          <Values>
<![CDATA[78DA636040060DF600014F00C0]]>
          </Values>
        </DefineArray>
        <DefineConstant Name="ParamHelpConst" Type="2">
          <StringValue>
<![CDATA[Alpha
Hue
Saturation
Lightness]]>
          </StringValue>
        </DefineConstant>
        <DefineArray Name="Color" SizeDim1="3"/>
      </Children>
    </Group>
    <RenderTarget Name="CanvasTarget" Width="0" Height="0" ClearBeforeUse="0" AutoPowerOfTwo="255"/>
    <Material Name="CanvasMaterial" Shading="1" Color="1 1 1 1" Light="0" Blend="1" ZBuffer="0" Shader="CanvasShader">
      <Textures>
        <MaterialTexture RenderTarget="CanvasTarget"/>
      </Textures>
    </Material>
    <Shader Name="CanvasShader">
      <VertexShaderSource>
<![CDATA[void main()
{
  vec4 vertex = gl_Vertex;
  vertex.xy *= 2.0;
  gl_Position = vertex;
  gl_TexCoord[0] = gl_MultiTexCoord0;
}]]>
      </VertexShaderSource>
      <FragmentShaderSource>
<![CDATA[uniform sampler2D texture;

void main()
{
  gl_FragColor = texture2D(texture, gl_TexCoord[0].xy);
}]]>
      </FragmentShaderSource>
    </Shader>
    <Material Name="ClearMaterial" Shading="1" Color="1 1 1 1" Light="0" Blend="1" ZBuffer="0" Shader="ClearShader"/>
    <Shader Name="ClearShader">
      <VertexShaderSource>
<![CDATA[void main(){
  vec4 vertex = gl_Vertex;
  vertex.xy *= 2.0;
  gl_Position = vertex;
  gl_TexCoord[0] = gl_MultiTexCoord0;
}]]>
      </VertexShaderSource>
      <FragmentShaderSource>
<![CDATA[uniform float alpha;
uniform float red;
uniform float green;
uniform float blue;

vec4 ClearColor = vec4(red,green,blue,alpha);

void main() {

 gl_FragColor = ClearColor;

}]]>
      </FragmentShaderSource>
      <UniformVariables>
        <ShaderVariable Name="alpha" VariableName="alpha"/>
        <ShaderVariable Name="red" VariableName="red"/>
        <ShaderVariable Name="green" VariableName="green"/>
        <ShaderVariable Name="blue" VariableName="blue"/>
      </UniformVariables>
    </Shader>
    <Model Name="Canvas" Rotation="0 0 0.001">
      <OnRender>
        <Condition Comment="render pass">
          <Expression>
<![CDATA[//

return App.CurrentRenderPass == 0;]]>
          </Expression>
          <OnTrue>
            <UseMaterial Material="ClearMaterial"/>
          </OnTrue>
          <OnFalse>
            <UseMaterial Material="CanvasMaterial"/>
          </OnFalse>
        </Condition>
        <RenderSprite/>
      </OnRender>
    </Model>
  </Content>
</ZApplication>

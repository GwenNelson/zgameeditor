<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Caption="SpriteSheet" CustomScreenWidth="960" CustomScreenHeight="540" CameraPosition="128 72 1" MouseVisible="255" NoSound="1">
  <OnLoaded>
    <Group Comment="External">
      <Children>
        <ZExternalLibrary ModuleName="opengl32">
          <Source>
<![CDATA[//

void glAlphaFunc(int func, float value){}
void glDisable(int cap){}
void glDisableClientState(int cap){}
void glDrawArrays(int mode, int first, int count){}
void glEnable(int cap){}
void glEnableClientState(int cap){}
void glGetTexImage(int target, int level, int format, int type, xptr img){}
void glGetTexLevelParameteriv(int target, int level, int pname, xptr params){}
void glTexCoordPointer(int size, int type, int stride, xptr pointer){}
void glVertexPointer(int size, int type, int stride, xptr pointer){}]]>
          </Source>
        </ZExternalLibrary>
      </Children>
    </Group>
    <Group Comment="Library">
      <Children>
        <ZLibrary Comment="Standard">
          <Source>
<![CDATA[//

float min(float a, float b)
{
  return a < b ? a : b;
}

float max(float a, float b)
{
  return a > b ? a : b;
}

//

float length2(float x, float y)
{
  return sqrt(x * x + y * y);
}]]>
          </Source>
        </ZLibrary>
        <ZLibrary Comment="Render">
          <Source>
<![CDATA[//

void renderNumber(string t, float x, float y)
{
  int n = length(t);

  float z = 16 / Zoom;

  float[0] v;
  v.SizeDim1 = n << 4;

  int a;
  float x1, y1, x2, y2, s1, s2;

  x1 = x;
  y1 = y;
  y2 = y1 + z;

  for(int i=0; i<n; i++)
  {
    x2 = x1 + z;

    s1 = ord(subStr(t, i, 1)) - 48;
    s2 = s1 + 1;

    v[a++] = x1; v[a++] = y1; v[a++] = s1; v[a++] = 1;
    v[a++] = x1; v[a++] = y2; v[a++] = s1; v[a++] = 0;
    v[a++] = x2; v[a++] = y2; v[a++] = s2; v[a++] = 0;
    v[a++] = x2; v[a++] = y1; v[a++] = s2; v[a++] = 1;

    x1 += z;
  }

  glVertexPointer(2, 0x1406, 16, v[0]);
  glTexCoordPointer(2, 0x1406, 16, v[2]);
  glDrawArrays(7, 0, n << 2);
}]]>
          </Source>
        </ZLibrary>
        <ZLibrary Comment="Batch">
          <Source>
<![CDATA[//

  int       a1;
float[4096] v1;

//

void addRect(float x1, float y1, float x2, float y2,
             float s1, float t1, float s2, float t2)
{
  v1[a1++] = x1; v1[a1++] = y1; v1[a1++] = s1; v1[a1++] = t1;
  v1[a1++] = x1; v1[a1++] = y2; v1[a1++] = s1; v1[a1++] = t2;
  v1[a1++] = x2; v1[a1++] = y2; v1[a1++] = s2; v1[a1++] = t2;
  v1[a1++] = x2; v1[a1++] = y1; v1[a1++] = s2; v1[a1++] = t1;
}

//

void drawBatch()
{
  glEnableClientState(0x8074);
  glEnableClientState(0x8078);

  glVertexPointer(2, 0x1406, 16, v1[0]);
  glTexCoordPointer(2, 0x1406, 16, v1[2]);

  glDrawArrays(7, 0, a1 >> 2);

  glDisableClientState(0x8078);
  glDisableClientState(0x8074);

  a1 = 0;
}]]>
          </Source>
        </ZLibrary>
        <ZLibrary Comment="Editor">
          <Source>
<![CDATA[//

const int ACTION_NULL = 0,
          ACTION_DRAW = 1,
          ACTION_MOVE = 2,
          ACTION_EDIT = 3;

//

float distance2(float x1, float y1, float x2, float y2)
{
  float x, y;

  x = x1 - x2;
  y = y1 - y2;

  return sqrt(x * x + y * y);
}

//

float[9,2] anchors;

int selectHandle(float x, float y)
{
  if(!Selected.SizeDim1)return 0;

  int s = Selected[0];

  float x1, y1, x2, y2, x3, y3;

  x1 = Sprites[s,0];
  y1 = Sprites[s,1];

  x3 = x1 + Sprites[s,2];
  y3 = y1 + Sprites[s,3];

  x2 = (x1 + x3) * 0.5;
  y2 = (y1 + y3) * 0.5;

  anchors[0,0] = x1 + Sprites[s,4];
  anchors[0,1] = y1 + Sprites[s,5];

  anchors[1,0] = x1; anchors[1,1] = y2;
  anchors[2,0] = x2; anchors[2,1] = y1;
  anchors[3,0] = x3; anchors[3,1] = y2;
  anchors[4,0] = x2; anchors[4,1] = y3;

  anchors[5,0] = x1; anchors[5,1] = y1;
  anchors[6,0] = x3; anchors[6,1] = y1;
  anchors[7,0] = x3; anchors[7,1] = y3;
  anchors[8,0] = x1; anchors[8,1] = y3;

  for(int i=0; i<9; i++)
  {
    float d = i ? 8 / Zoom : 16 / Zoom;

    if(distance2(x, y, anchors[i,0], anchors[i,1]) < d)
    {
      Anchor = i;
      return 1;
    }
  }

  return 0;
}

//

int selectSprite(float x, float y)
{
  float x1, y1;

  for(int i=Sprites.SizeDim1-1; i>=0; i--)
  {
    x1 = Sprites[i,0];
    y1 = Sprites[i,1];

    if(x >= x1 && x <= x1 + Sprites[i,2] &&
       y >= y1 && y <= y1 + Sprites[i,3])
    {
      Selected.SizeDim1 = 1;
      Selected[0] = i;
      return 1;
    }
  }

  return 0;
}

//

int selectSheet(float x, float y)
{
  return x < 0 || x > SheetWidth || y < 0 || y > SheetHeight ? 0 : 1;
}

//

void deleteSelection()
{
  int n, d, s;

  n = Sprites.SizeDim1 - 1;

  for(int i=0; i<Selected.SizeDim1; i++)
  {
    d = Selected[i];

    // TODO
  }
}

void deleteSprite(int s)
{
  // TODO: Change function to deleteSelection

  int n = Sprites.SizeDim1-1;

  for(int i=s; i<n; i++)
  {
    int t = i + 1;

    for(int p=0; p<6; p++)
    {
      Sprites[i,p] = Sprites[t,p];
    }
  }

  Sprites.SizeDim1--;
}

//

void moveForward()
{
  int s = Selected[0];

  if(s > 0)
  {
    int d = s - 1;

    for(int i=0; i<6; i++)
    {
          Cache[i] = Sprites[d,i];
      Sprites[d,i] = Sprites[s,i];
      Sprites[s,i] = Cache[i];
    }

    Selected[0]--;
  }
}

void moveBackward()
{
  int s = Selected[0];

  if(s < Sprites.SizeDim1 - 1)
  {
    int d = s + 1;

    for(int i=0; i<6; i++)
    {
          Cache[i] = Sprites[d,i];
      Sprites[d,i] = Sprites[s,i];
      Sprites[s,i] = Cache[i];
    }

    Selected[0]++;
  }
}

//

void centerPivot(int s)
{
  int x1, y1, x2, y2;

  x1 = Sprites[s,0];
  y1 = Sprites[s,1];

  x2 = x1 + Sprites[s,2];
  y2 = y1 + Sprites[s,3];

  Sprites[s,4] = (x1 + x2) * 0.5 - x1;
  Sprites[s,5] = (y1 + y2) * 0.5 - y1;
}

//

int pickAlpha(int x, int y)
{
  int o = SheetHeight - 1;

  return SheetPixels[x,o-y];
}

//

int getAlpha(int x, int y)
{
  return 0;
}

//

void expandSprite(int i)
{
  int o, x1, y1, x2, y2;

  o = SheetHeight - 1;

  x1 = Sprites[i,0];
  y1 = Sprites[i,1];

  x2 = x1 + Sprites[i,2];
  y2 = y1 + Sprites[i,3];

  int a;

  for(int y=y1; y<y2; y++)
  {
    if(SheetPixels[o-y,x2])
    {
      a = 1;
    }
  }

  if(a)x2++; // TODO: Prevent from going out of bounds

  Sprites[i,2] = x2 - x1;
}]]>
          </Source>
        </ZLibrary>
      </Children>
    </Group>
    <Group Comment="Reset">
      <Children>
        <ZExpression>
          <Expression>
<![CDATA[//

Zoom = 2;

//

glAlphaFunc(0x0202, 0);]]>
          </Expression>
        </ZExpression>
      </Children>
    </Group>
  </OnLoaded>
  <OnUpdate>
    <Group Comment="Input">
      <Children>
        <Group Comment="Button">
          <Children>
            <Repeat Name="ButtonRepeat" Count="3" WhileExp="//">
              <OnIteration>
                <ZExpression>
                  <Expression>
<![CDATA[//

int i = ButtonRepeat.Iteration;

//

Button[i,1] = Button[i,0];
Button[i,0] = 0;

//

ButtonPress.CharCode = 123 + i;]]>
                  </Expression>
                </ZExpression>
                <KeyPress Name="ButtonPress" CharCode="125">
                  <OnPressed>
                    <ZExpression>
                      <Expression>
<![CDATA[//

Button[ButtonRepeat.Iteration,0]++;]]>
                      </Expression>
                    </ZExpression>
                  </OnPressed>
                </KeyPress>
                <ZExpression>
                  <Expression>
<![CDATA[//

int i = ButtonRepeat.Iteration;

//

Button[i,2] = Button[i,0] && !Button[i,1];
Button[i,3] = Button[i,1] && !Button[i,0];]]>
                  </Expression>
                </ZExpression>
              </OnIteration>
            </Repeat>
            <KeyPress Keys="[">
              <OnPressed>
                <ZExpression>
                  <Expression>
<![CDATA[//

Button[0,2] = 1;]]>
                  </Expression>
                </ZExpression>
              </OnPressed>
            </KeyPress>
          </Children>
        </Group>
        <Group Comment="Mouse">
          <Children>
            <ZExpression>
              <Expression>
<![CDATA[//

Mouse[0,1] = Mouse[0,0];
Mouse[1,1] = Mouse[1,0];

//

Mouse[0,0] = App.MousePosition.X;
Mouse[1,0] = App.MousePosition.Y;

//

Mouse[0,2] = Mouse[0,0] - Mouse[0,1];
Mouse[1,2] = Mouse[1,0] - Mouse[1,1];

//

Mouse[0,3] = floor((App.MousePosition.X + 1) * App.ScreenWidth / 64);
Mouse[1,3] = floor((App.MousePosition.Y + 1) * App.ScreenHeight / 64);]]>
              </Expression>
            </ZExpression>
          </Children>
        </Group>
      </Children>
    </Group>
    <Group Comment="Editor">
      <Children>
        <ZExpression Comment="Sheet">
          <Expression>
<![CDATA[//

if(SheetMaterialTexture.Texture == null)
{
  SheetWidth = 0;
  SheetHeight = 0;
}
else
{
  @UseMaterial(Material: SheetMaterial);

  glGetTexLevelParameteriv(0xDE1, 0, 0x1000, SheetWidth);
  glGetTexLevelParameteriv(0xDE1, 0, 0x1001, SheetHeight);

  if(SheetMaterialTexture.Texture != CachedTexture.Texture)
  {
    Zoom = 2;

    App.CameraPosition.X = SheetWidth * 0.5;
    App.CameraPosition.Y = SheetHeight * 0.5 + 8;

    CachedTexture.Texture = SheetMaterialTexture.Texture;

    SheetPixels.SizeDim1 = SheetWidth;
    SheetPixels.SizeDim2 = SheetHeight;

    glGetTexImage(0xDE1, 0, 0x1906, 0x1401, SheetPixels);
  }
}]]>
          </Expression>
        </ZExpression>
        <ZExpression Comment="Control">
          <Expression>
<![CDATA[//

float v;

if(App.MouseWheelDelta)
{
  v += App.MouseWheelDelta < 0 ? Zoom / -3 : Zoom * 0.5;
}

if(Button[1,0])
{
  v += (Mouse[0,2] + Mouse[1,2]) * Zoom;
}

if(v)
{
  Zoom = clamp(Zoom + v, 2, 45);
}

//

float z = Zoom;

if(Button[2,0])
{
  App.CameraPosition.X -= Mouse[0,2] / z * App.ScreenWidth;
  App.CameraPosition.Y += Mouse[1,2] / z * App.ScreenHeight;
}

//

Cursor[0] = App.CameraPosition.X + Mouse[0,0] * App.ScreenWidth / z;
Cursor[1] = App.CameraPosition.Y - Mouse[1,0] * App.ScreenHeight / z;]]>
          </Expression>
        </ZExpression>
        <Condition>
          <Expression>
<![CDATA[//

return Button[0,2];]]>
          </Expression>
          <OnTrue>
            <Condition>
              <Expression>
<![CDATA[//

return App.MousePosition.Y > -1 + 64f / App.ScreenHeight;]]>
              </Expression>
              <OnTrue>
                <ZExpression>
                  <Expression>
<![CDATA[//

float x, y;

x = Cursor[0];
y = Cursor[1];

//

if(selectHandle(x, y))
{
  Action = ACTION_EDIT;
}
else if(selectSprite(x, y))
{
  Action = ACTION_MOVE;
}
else if(selectSheet(x, y))
{
  Action = ACTION_DRAW;

  Selected.SizeDim1 = 1;
  Selected[0] = Sprites.SizeDim1;
  Sprites.SizeDim1++;

  Origin.x = round(x);
  Origin.y = round(y);
}
else
{
  if(Selected.SizeDim1)
  {
    Selected.SizeDim1 = 0;
  }
}

//

if(Action == ACTION_MOVE || Action == ACTION_EDIT)
{
  Origin.x = x;
  Origin.y = y;

  int s = Selected[0];

  for(int i=0; i<6; i++)
  {
    Cache[i] = Sprites[s,i];
  }
}]]>
                  </Expression>
                </ZExpression>
              </OnTrue>
              <OnFalse>
                <ZExpression>
                  <Expression>
<![CDATA[//

int x = Mouse[0,3];

//

switch(x)
{
  case 0: // Generate
    break;

  case 1: // Delete
    for(int i=0; i<Selected.SizeDim1; i++)
    {
      deleteSprite(Selected[i]);
    }

    Selected.SizeDim1 = 0;
    break;

  case 2: // Expand
    break;

  case 3: // Center
    for(int i=0; i<Selected.SizeDim1; i++)
    {
      centerPivot(Selected[i]);
    }
    break;

  case 4: // Forward
    for(int i=0; i<Selected.SizeDim1; i++)
    {
      moveForward();
    }
    break;

  case 5: // Backward
    for(int i=0; i<Selected.SizeDim1; i++)
    {
      moveBackward();
    }
    break;

  case 7: // Alpha
    Alpha = Alpha ^ 1;
    break;

  case 8: // Bright
    GridMaterial.Color = 1;
    break;

  case 9: // Dark
    GridMaterial.Color = 0.2;
    break;
}]]>
                  </Expression>
                </ZExpression>
              </OnFalse>
            </Condition>
          </OnTrue>
        </Condition>
        <ZExpression Comment="Action">
          <Expression>
<![CDATA[//

float x, y;

x = Cursor[0];
y = Cursor[1];

//

int s;

if(Button[0,3])
{
  switch(Action)
  {
    case ACTION_DRAW:
      s = Selected[0];

      if(!Sprites[s,2] || !Sprites[s,3])
      {
        Selected.SizeDim1 = 0;
        Sprites.SizeDim1--;
      }

      break;
  }

  Action = ACTION_NULL;
}

//

int x1, y1, x2, y2;

switch(Action)
{
  case ACTION_DRAW:
    x = clamp(round(x), 0, SheetWidth);
    y = clamp(round(y), 0, SheetHeight);

    x1 = min(Origin.x, x);
    y1 = min(Origin.y, y);
    x2 = max(Origin.x, x);
    y2 = max(Origin.y, y);

    s = Selected[0];

    Sprites[s,0] = x1;
    Sprites[s,1] = y1;

    Sprites[s,2] = x2 - x1;
    Sprites[s,3] = y2 - y1;

    Sprites[s,4] = round((x1 + x2) * 0.5) - x1;
    Sprites[s,5] = round((y1 + y2) * 0.5) - y1;
    break;

  case ACTION_MOVE:
    // Cache[0] & [1] are used 3 times .. local copy please
    int w, h;

    w = Cache[2];
    h = Cache[3];

    x1 = 0 - Cache[0];
    y1 = 0 - Cache[1];

    x2 = SheetWidth - Cache[0] - w;
    y2 = SheetHeight - Cache[1] - h;

    x = clamp(round(x - Origin[0]), x1, x2);
    y = clamp(round(y - Origin[1]), y1, y2);

    s = Selected[0];

    Sprites[s,0] = Cache[0] + x;
    Sprites[s,1] = Cache[1] + y;
    break;

  case ACTION_EDIT:
    s = Selected[0];

    if(Anchor)
    {
      x = round(x - Origin[0]);
      y = round(y - Origin[1]);

      x1 = Cache[0];
      y1 = Cache[1];

      int a = AnchorMap[Anchor];

      if(a & 0x1)
      {
        Sprites[s,0] = clamp(Cache[0] + x, 0, x1 + Cache[2] - 1);

        x = Cache[0] - Sprites[s,0];

        Sprites[s,2] = Cache[2] + x;
        Sprites[s,4] = Cache[4] + x;
      }
      else if(a & 0x4)
      {
        Sprites[s,2] = clamp(Cache[2] + x, 1, SheetWidth - x1);
      }

      if(a & 0x2)
      {
        Sprites[s,1] = clamp(Cache[1] + y, 0, y1 + Cache[3] - 1);

        y = Cache[1] - Sprites[s,1];

        Sprites[s,3] = Cache[3] + y;
        Sprites[s,5] = Cache[5] + y;
      }
      else if(a & 0x8)
      {
        Sprites[s,3] = clamp(Cache[3] + y, 1, SheetHeight - y1);
      }
    }
    else
    {
      Sprites[s,4] = round(x) - Sprites[s,0];
      Sprites[s,5] = round(y) - Sprites[s,1];
    }

    break;
}]]>
          </Expression>
        </ZExpression>
      </Children>
    </Group>
  </OnUpdate>
  <OnRender>
    <Group Comment="Workspace">
      <Children>
        <ZExpression Comment="Matrix">
          <Expression>
<![CDATA[//

mat4 m;

m[0,0] =     Zoom / App.ScreenWidth;
m[1,1] = 0 - Zoom / App.ScreenHeight;
m[2,2] = 1;
m[3,3] = 1;

setMatrix(1, m);

//

LineTexture.TextureScale.X = Zoom / 16;
LineTexture.TextureScale.Y = Zoom / 16;

LineTexture.TextureX -= App.DeltaTime;
LineTexture.TextureY -= App.DeltaTime;]]>
          </Expression>
        </ZExpression>
        <ZExpression Comment="Grid">
          <Expression>
<![CDATA[//

float w, h;

w = App.ScreenWidth;
h = App.ScreenHeight;

//

float x1, y1, x2, y2, s1, t1, s2, t2;

x1 = App.CameraPosition.X - w * 0.5;
y1 = App.CameraPosition.Y - h * 0.5;

x2 = x1 + w;
y2 = y1 + h;

s1 = x1 / 16;
t1 = y1 / 16;

s2 = x2 / 16;
t2 = y2 / 16;

//

@UseMaterial(Material: GridMaterial);
addRect(x1, y1, x2, y2, s1, t1, s2, t2);
drawBatch();]]>
          </Expression>
        </ZExpression>
        <Condition>
          <Expression>
<![CDATA[//

return SheetMaterialTexture.Texture != null;]]>
          </Expression>
          <OnTrue>
            <ZExpression>
              <Expression>
<![CDATA[//

if(Alpha)
{
  addRect(0, 0, SheetWidth, SheetHeight, 0, 0, 0, 0);
  @UseMaterial(Material: SolidMaterial);
  drawBatch();
}

//

addRect(0, 0, SheetWidth, SheetHeight, 0, 1, 1, 0);
@UseMaterial(Material: SheetMaterial);

if(Alpha)
{
  glEnable(0xBC0);
  drawBatch();
  glDisable(0xBC0);
}
else
{
  glEnable(0xBE2);
  drawBatch();
  glDisable(0xBE2);
}]]>
              </Expression>
            </ZExpression>
            <ZExpression>
              <Expression>
<![CDATA[//

float x1, y1, x2, y2, x3, y3, x4, y4;

x1 = 0 - 8;
y1 = 0 - 8;

x2 = 0;
y2 = 0;

x3 = SheetWidth;
y3 = SheetHeight;

x4 = x3 + 8;
y4 = y3 + 8;

//

addRect(x1, y1, x2, y2, 1, 1, 0, 0);
addRect(x1, y3, x2, y4, 1, 0, 0, 1);
addRect(x3, y3, x4, y4, 0, 0, 1, 1);
addRect(x3, y1, x4, y2, 0, 1, 1, 0);

@UseMaterial(Material: ShadowMaterial);
drawBatch();

addRect(x1, y2, x2, y3, 1, 0, 0, 0);
addRect(x2, y3, x3, y4, 0, 0, 0, 1);
addRect(x3, y2, x4, y3, 0, 0, 1, 0);
addRect(x2, y1, x3, y2, 0, 1, 0, 0);

@UseMaterial(Material: ShadowMaterial);
drawBatch();]]>
              </Expression>
            </ZExpression>
          </OnTrue>
        </Condition>
        <ZExpression Comment="Info">
          <Expression>
<![CDATA[//

int n = Sprites.SizeDim1;

//

if(!n)return;

//

@UseMaterial(Material: NumberMaterial);

//

glEnableClientState(0x8074);
glEnableClientState(0x8078);

for(int i=0; i<n; i++)
{
  renderNumber(intToStr(i), Sprites[i,0] + 1, Sprites[i,1] + 1);
}

glDisableClientState(0x8078);
glDisableClientState(0x8074);]]>
          </Expression>
        </ZExpression>
        <ZExpression Comment="Sprites">
          <Expression>
<![CDATA[//

float x1, y1, x2, y2;

for(int i=0; i<Sprites.SizeDim1; i++)
{
  x1 = Sprites[i,0];
  y1 = Sprites[i,1];

  x2 = x1 + Sprites[i,2];
  y2 = y1 + Sprites[i,3];

  addRect(x1, y1, x2, y2, x1, y1, x2, y2);
}

LineMaterial.Color.A = 0.5;
@UseMaterial(Material: LineMaterial);
drawBatch();

//

for(int i=0; i<Selected.SizeDim1; i++)
{
  int s = Selected[i];

  x1 = Sprites[s,0];
  y1 = Sprites[s,1];

  x2 = x1 + Sprites[s,2];
  y2 = y1 + Sprites[s,3];

  addRect(x1, y1, x2, y2, x1, y1, x2, y2);
}

LineMaterial.Color.A = 1;
drawBatch();]]>
          </Expression>
        </ZExpression>
        <UseMaterial Material="AnchorMaterial"/>
        <Repeat Name="AnchorRepeat">
          <OnIteration>
            <ZExpression>
              <Expression>
<![CDATA[//

int s = Selected[AnchorRepeat.Iteration];

//

float x1, y1, x2, y2, x3, y3;

x1 = Sprites[s,0];
y1 = Sprites[s,1];

x3 = x1 + Sprites[s,2];
y3 = y1 + Sprites[s,3];

x2 = (x1 + x3) * 0.5;
y2 = (y1 + y3) * 0.5;

//

float[8,2] p;

p[0,0] = x1; p[0,1] = y2;
p[1,0] = x2; p[1,1] = y1;
p[2,0] = x3; p[2,1] = y2;
p[3,0] = x2; p[3,1] = y3;

p[4,0] = x1; p[4,1] = y1;
p[5,0] = x3; p[5,1] = y1;
p[6,0] = x3; p[6,1] = y3;
p[7,0] = x1; p[7,1] = y3;

//

float r, x, y;

r = 16 / Zoom;

for(int i=0; i<8; i++)
{
  x = p[i,0];
  y = p[i,1];

  addRect(x - r, y - r, x + r, y + r, 0, 0, 1, 1);
}

drawBatch();]]>
              </Expression>
            </ZExpression>
          </OnIteration>
          <WhileExp>
<![CDATA[//

return Iteration < Selected.SizeDim1;]]>
          </WhileExp>
        </Repeat>
        <UseMaterial Material="PivotMaterial"/>
        <Repeat Name="PivotRepeat">
          <OnIteration>
            <ZExpression>
              <Expression>
<![CDATA[//

int s = Selected[PivotRepeat.Iteration];

//

float x, y, r;

x = Sprites[s,0] + Sprites[s,4];
y = Sprites[s,1] + Sprites[s,5];

r = 16 / Zoom;

//

addRect(x - r, y - r, x + r, y + r, 0, 0, 1, 1);
drawBatch();]]>
              </Expression>
            </ZExpression>
          </OnIteration>
          <WhileExp>
<![CDATA[//

return Iteration < Selected.SizeDim1;]]>
          </WhileExp>
        </Repeat>
      </Children>
    </Group>
    <Group Comment="Toolbar">
      <Children>
        <ZExpression Comment="Matrix">
          <Expression>
<![CDATA[//

mat4 m;

for(int i=0; i<4; i++)
{
  m[i,i] = 1;
}

setMatrix(0, m);

//

m[0,0] = 64f / App.ScreenWidth;
m[1,1] = 64f / App.ScreenHeight;
m[3,0] = -1;
m[3,1] = -1;

setMatrix(1, m);]]>
          </Expression>
        </ZExpression>
        <ZExpression Comment="Toolbar">
          <Expression>
<![CDATA[//

float w;
float[8] v, t;

//

w = App.ScreenWidth / 32f;

v[0] = 0; v[1] = 0;
v[2] = w; v[3] = 0;
v[4] = w; v[5] = 1;
v[6] = 0; v[7] = 1;

//

w = App.ScreenWidth / 512f;

t[0] = 0; t[1] = 0;
t[2] = w; t[3] = 0;
t[4] = w; t[5] = 1;
t[6] = 0; t[7] = 1;

//

@UseMaterial(Material: IconsMaterial);

glEnableClientState(0x8074);
glEnableClientState(0x8078);
glVertexPointer(2, 0x1406, 0, v);
glTexCoordPointer(2, 0x1406, 0, t);
glDrawArrays(7, 0, 4);
glDisableClientState(0x8078);
glDisableClientState(0x8074);]]>
          </Expression>
        </ZExpression>
        <ZExpression Comment="Hover">
          <Expression>
<![CDATA[//

float[8] v;

//

float x, y;

x = Mouse[0,3];
y = Mouse[1,3];

if(App.MousePosition.X < -0.99 ||
   App.MousePosition.Y < -0.99)return;

if(x < 0 || x > 9 || y > 0)return;

//

float x1, x2, y1, y2;

x1 = x;
x2 = x + 1;

y1 = y;
y2 = y + 1;

v[0] = x1; v[1] = y1;
v[2] = x2; v[3] = y1;
v[4] = x2; v[5] = y2;
v[6] = x1; v[7] = y2;

//

HoverMaterial.Color.A = Button[0,2] ? 0.5 : 0.25;

@UseMaterial(Material: HoverMaterial);

glEnableClientState(0x8074);
glVertexPointer(2, 0x1406, 0, v);
glDrawArrays(7, 0, 4);
glDisableClientState(0x8074);]]>
          </Expression>
        </ZExpression>
      </Children>
    </Group>
  </OnRender>
  <OnClose>
    <Group Comment="Reset">
      <Children>
        <ZExpression>
          <Expression>
<![CDATA[//

Sprites.SizeDim1 = 0;

//

SheetPixels.SizeDim1 = 0;
SheetPixels.SizeDim2 = 0;

//

Selected.SizeDim1 = 0;

//

CachedTexture.Texture = null;]]>
          </Expression>
        </ZExpression>
      </Children>
    </Group>
  </OnClose>
  <Content>
    <Group Comment="Input">
      <Children>
        <Array Name="Button" Type="4" Dimensions="1" SizeDim1="3" SizeDim2="4"/>
        <Array Name="Mouse" Dimensions="1" SizeDim1="2" SizeDim2="4"/>
      </Children>
    </Group>
    <Group Comment="Sheet">
      <Children>
        <Array Name="Sprites" Type="1" Dimensions="1" SizeDim2="6"/>
        <Bitmap Name="SheetBitmap" Width="3" Height="3" Filter="1">
          <Producers>
            <BitmapExpression>
              <Expression>
<![CDATA[//

Pixel = 0;]]>
              </Expression>
            </BitmapExpression>
          </Producers>
        </Bitmap>
        <Material Name="SheetMaterial" Shading="1" Light="0" ZBuffer="0">
          <Textures>
            <MaterialTexture Name="SheetMaterialTexture" Texture="SheetBitmap" TextureWrapMode="2" TexCoords="1"/>
          </Textures>
        </Material>
        <Array Name="SheetPixels" Type="4" Dimensions="1"/>
        <Variable Name="SheetWidth" Type="1"/>
        <Variable Name="SheetHeight" Type="1"/>
        <Material Name="CachedMaterial">
          <Textures>
            <MaterialTexture Name="CachedTexture"/>
          </Textures>
        </Material>
      </Children>
    </Group>
    <Group Comment="Toolbar">
      <Children>
        <Group Comment="Icons">
          <Children>
            <Bitmap Name="IconsBitmap" Width="5" Height="1" Filter="1">
              <Producers>
                <BitmapFromFile DataWidth="512" DataHeight="32">
                  <BitmapFile>

                  </BitmapFile>
                </BitmapFromFile>
              </Producers>
            </Bitmap>
            <Material Name="IconsMaterial" Shading="1" Light="0" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="IconsBitmap" TextureWrapMode="2" TexCoords="1"/>
              </Textures>
            </Material>
          </Children>
        </Group>
        <Group Comment="Hover">
          <Children>
            <Material Name="HoverMaterial" Shading="1" Color="1 1 1 0.25" Light="0" Blend="1" ZBuffer="0"/>
          </Children>
        </Group>
      </Children>
    </Group>
    <Group Comment="Workspace">
      <Children>
        <Group Comment="Data">
          <Children>
            <Array Name="Cursor" SizeDim1="2"/>
            <Variable Name="Zoom"/>
            <Variable Name="Action" Type="4"/>
            <Array Name="Selected" Type="1"/>
            <Variable Name="Origin" Type="6"/>
            <Array Name="Cache" Type="1" SizeDim1="6"/>
            <Variable Name="Alpha" Type="4"/>
          </Children>
        </Group>
        <Group Comment="Grid">
          <Children>
            <Bitmap Name="GridBitmap" Width="0" Height="0" Filter="1">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[//

float c = round(X) + round(Y) != 1 ? 0.8 : 1;

//

Pixel.R = c;
Pixel.G = c;
Pixel.B = c;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="GridMaterial" Shading="1" Color="0.2 0.2 0.2 0.2" Light="0" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="GridBitmap" TextureWrapMode="1" TexCoords="1"/>
              </Textures>
            </Material>
          </Children>
        </Group>
        <Group Comment="Solid">
          <Children>
            <Material Name="SolidMaterial" Shading="1" Light="0" ZBuffer="0"/>
          </Children>
        </Group>
        <Group Comment="Shadow">
          <Children>
            <Bitmap Name="ShadowBitmap">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[//

Pixel.A = 1 - pow(length2(x, y), 0.5) + rnd() / 8;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="ShadowMaterial" Shading="1" Color="1 1 1 0.25" Light="0" Blend="1" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="ShadowBitmap" TextureWrapMode="2" TexCoords="1"/>
              </Textures>
            </Material>
          </Children>
        </Group>
        <Group Comment="Fonts">
          <Children>
            <Bitmap Name="NumberBitmap" Width="3" Height="0" Filter="1">
              <Producers>
                <BitmapFromFile Transparency="2" HasAlphaLayer="1" DataWidth="128" DataHeight="8">
                  <BitmapFile>
<![CDATA[78DAE557C10EC52008F3FF7FBAEFB4C491969677D3917891C1A045D0B55E826D5581589D0EC65E09D33BFBC47FF7DFA9FFDB04BBD41C21A4D33D7AF589C2B1D826F6917FE237F5BFD2D84FE77EDF6039320C092E486DD8D9AA183BFBC07FCB7FAD358687F0839BC84FB1EAF60D368CE3A47FB43193DA83C909847FB05054FF77F17D8DFFA40614B6C1794787FFA476446C6E768CEBF370FE557E725FCDCAB477EEFBAA3ED2FA71F73E556F64FE8DCFC7C935E07A9BE235ECBF72BE0FFB83BB63C0F02DFB47D50FF3BBEA01309915EA8CA6EF0717C33FB6897DF7CD34BF53E5070B8072C6]]>
                  </BitmapFile>
                </BitmapFromFile>
              </Producers>
            </Bitmap>
            <Material Name="NumberMaterial" Shading="1" Light="0" Blend="1" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="NumberBitmap" TextureScale="0.0625 0.5 1" TextureY="0.5" TextureWrapMode="2" TexCoords="1" Origin="0 0 0"/>
              </Textures>
            </Material>
          </Children>
        </Group>
        <Group Comment="Line">
          <Children>
            <Bitmap Name="LineBitmap">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[//

float a = clamp(cos((X + Y) * PI * 2) * 16, 0, 1);

//

Pixel.R = a;
Pixel.G = a + 0.4;
Pixel.B = 1;
Pixel.A = 1;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="LineMaterial" WireframeWidth="1" Shading="2" Light="0" Blend="1" ZBuffer="0">
              <Textures>
                <MaterialTexture Name="LineTexture" Texture="LineBitmap" TextureScale="0.125 0.125 1" TextureX="-1116.1606" TextureY="-1116.1606" TextureWrapMode="1" TexCoords="1"/>
              </Textures>
            </Material>
          </Children>
        </Group>
        <Group Comment="Anchor">
          <Children>
            <Variable Name="Anchor" Type="1"/>
            <Array Name="AnchorMap" Type="4" SizeDim1="9" Persistent="255">
              <Values>
<![CDATA[78DA63606462E16066E3E10400009E002E]]>
              </Values>
            </Array>
            <Bitmap Name="AnchorBitmap" Filter="2">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[//

float u, v, r, c;

//

u = 0.5 - X;
v = 0.5 - Y;

r = 16 - sqrt(u * u + v * v) * 64;

//

Pixel.R = r;
Pixel.G = r;
Pixel.B = r;

Pixel.A = r + 2;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="AnchorMaterial" Shading="1" Light="0" Blend="1" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="AnchorBitmap" TextureWrapMode="1" TexCoords="1"/>
              </Textures>
            </Material>
          </Children>
        </Group>
        <Group Comment="Pivot">
          <Children>
            <Bitmap Name="PivotBitmap" Filter="2">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[//

float u, v, r, c;

//

u = 0.5 - X;
v = 0.5 - Y;

r = 6 - abs(20 - sqrt(u * u + v * v) * 64);

//

Pixel.R = r;
Pixel.G = r;
Pixel.B = r;

Pixel.A = r + 2;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="PivotMaterial" Shading="1" Light="0" Blend="1" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="PivotBitmap" TextureWrapMode="2" TexCoords="1"/>
              </Textures>
            </Material>
          </Children>
        </Group>
      </Children>
    </Group>
  </Content>
</ZApplication>

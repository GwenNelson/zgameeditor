<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Caption="ZGameEditor application" CameraPosition="0 0 2.5">
  <Content>
    <Group Comment="Bitmaps">
      <Children>
        <Bitmap Comment="Anti-Aliased Circle">
          <Producers>
            <BitmapExpression UseBlankSource="1">
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)

int BitmapSize = 64;
float AAWidth = 2;

// Default Pixel values

this.Pixel.R = 1;
this.Pixel.G = 1;
this.Pixel.B = 1;
this.Pixel.A = 0;

// Calculate the radius of the current Pixel from the center

float Radius = sqrt(pow(0.5-X-0.5/BitmapSize,2)+pow(0.5-Y-0.5/BitmapSize,2));

// Function for Pixels that are in the Anti-Aliased outer circle

if(Radius<0.5 && Radius>=0.5-AAWidth/BitmapSize){
  this.Pixel.A = (0.5-Radius)*BitmapSize/AAWidth;
}

// Aliased inner circle

if(Radius<0.5-AAWidth/BitmapSize){
  this.Pixel.A = 1;
}

this.Pixel.R *= this.Pixel.A;
this.Pixel.G *= this.Pixel.A;
this.Pixel.B *= this.Pixel.A;]]>
              </Expression>
            </BitmapExpression>
          </Producers>
        </Bitmap>
        <Bitmap Comment="Anti-Aliased Polygon">
          <Producers>
            <BitmapExpression UseBlankSource="1">
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)

// bitmap variables

int width = 128;
float aawidth = 2;

// algo variables

int sprockets = 7;
int centeroffset = 1;

// default color

this.pixel.r = 1;
this.Pixel.g = 1;
this.pixel.b = 1;
this.Pixel.A = 0;

//

// other variables

float this_angle;
int this_sprocket;
float normalx, normaly;
float distance;

float aadist = aawidth / width;
float angle =( 2 * PI )/ sprockets;
float maxdist = cos( angle / 2.0 )* 0.5;
float center = 0.5 -( 1.0 * centeroffset / width );

//

// determine angle of current pixel to center
if( this.x - 0.5 >= 0 )
  this_angle = atan2(( this.x - 0.5 ),( this.y - center ));
else
  this_angle = PI + atan2(( 0.5 - this.x ),( center - this.y  ));

// determine sprocket of current pixel
this_sprocket = (( this_angle )/ angle );

// calculate normal of current sprocket
normalx = sin(( angle * this_sprocket )+( angle / 2.0 ));
normaly = cos(( angle * this_sprocket )+( angle / 2.0 ));

// calculate distance of current pixel by dot product with normal
distance =(( this.x - 0.5 )* normalx )+(( this.Y - center )* normaly );

// set alpha accordingly
if( distance < maxdist ) this.pixel.a = ( maxdist - distance )/ aadist;

this.Pixel.R *= this.Pixel.A;
this.Pixel.G *= this.Pixel.A;
this.Pixel.B *= this.Pixel.A;]]>
              </Expression>
            </BitmapExpression>
          </Producers>
        </Bitmap>
        <Bitmap Comment="Bricks" Width="4" Height="4" Filter="2">
          <Producers>
            <BitmapExpression>
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)
float X1, Y1;

if (Y>0.5) {
 Y1 = Y*4-3; X1 = (X- 0.5)*2;
}
else {
 Y1 = Y*4-1; X1 = (abs(X-0.5)*2-1)*((X-0.5)*2+0.01)/abs((X-0.5)*2+0.01);
}
this.Pixel.B = pow(X1,8) + pow(Y1,8);
if (X1 > Y1) this.Pixel.G=1;]]>
              </Expression>
            </BitmapExpression>
            <BitmapZoomRotate Zoom="-4.5"/>
            <BitmapExpression>
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)
float Temp=0, Down = 0;

Temp = this.Pixel.B - pow(sin(X*pi),0.33)*noise2(X*3+768,Y+187)*1;
if (this.Pixel.G > 0.5) Down = 1;
this.Pixel = 0;
if (Temp < 0.7) {
    this.Pixel.G = clamp(pow(sin(X*pi),0.3),0,0.5) * noise2(X*15+500,Y*12+170);
    this.Pixel.R = 0.8 + noise2(X*35+350,Y*35)/3;
    if (noise2(X*35+350,Y*35) < -0.2) this.Pixel.R -= 0.1;
   if (noise2(X*35+350,Y*35) < -0.25) this.Pixel.R -= 0.3;
}
if (Temp < 0.7 && Temp > 0.45) {
    if (Down == 1) this.Pixel.R -= 0.3;
    else this.Pixel.R += 0.2;
}

if (Temp >= 0.7) {this.Pixel = 0.3 + noise2(X*130+2463,Y*130+374)/2;}
/*
if (this.Pixel.R > 0.2) {
    this.Pixel.R -= 0.2 + noise2(Y*12+2015,X*12+1021)/3;}

if (this.Pixel.G > 0.2) {
    this.Pixel.G = 0.1 + noise2(Y*12+715,X*12+321)/4;}

if (this.Pixel.B > 0.2) {
    this.Pixel.R += 0.1;
    this.Pixel.G += 0.2 + noise2(Y*12+203,X*12+821)/3;
    this.Pixel.B = 0;
}

if (this.Pixel.A > 0.2) {
    this.Pixel.R -= 0.3 + noise2(Y*12+2015,X*12+1021)/4;
    this.Pixel.A = 0;

}

if (this.Pixel.R < 0.2) {
    this.Pixel = 0.3 + noise2(Y*130+374,X*130+2463)/2;}]]>
              </Expression>
            </BitmapExpression>
            <BitmapZoomRotate Zoom="-1.5"/>
          </Producers>
        </Bitmap>
        <Bitmap Comment="Dithering">
          <Producers>
            <BitmapExpression UseBlankSource="1">
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)

float C, F, S, R, G, B;

C = 9/16-X/8; // Low contrast gradient ( less colors available then preferable )

R = C;
G = C;
B = C;

F = frac(C*255);
S = 1/255; // 1-bit offset ( on a 8-bit value )

if(frac(F) < 0.25)R += S;
if(frac(F) < 0.50)G += S;
if(frac(F) < 0.75)B += S;

this.Pixel.R = R;
this.Pixel.G = G;
this.Pixel.B = B;]]>
              </Expression>
            </BitmapExpression>
          </Producers>
        </Bitmap>
        <Bitmap Comment="Superformula" Width="4" Height="4">
          <Producers>
            <BitmapExpression Comment="2D Superformula">
              <Expression>
<![CDATA[//X,Y : current coordinate (0..1)
//Pixel : current color (rgb)

//Parameters
float VarM = 3;
float VarN1 = 5;
float VarN2 = 18;
float VarN3 = 18;

//Variables
float VarR, VarT, VarX, VarY, VarTemp;


if (this.X!=0 || this.Y!=0) { //this is always true (textures are multiples of 2x2)
    VarX = (this.X-0.5)*7;  //Use the constant multiplying the expression
    VarY = (this.Y-0.5)*7;  //to scale your image (zoom in and out) ;)
    VarT = atan2(VarY,VarX);
    VarR = sqrt(VarX*VarX + VarY*VarY);
    VarTemp = VarR - pow(
        pow(abs(cos(VarM*VarT/4)/1),VarN2) +
        pow(abs(sin(VarM*VarT/4)/1),VarN3),
        -1/VarN1);

    if (VarTemp < 0) { //If it does belong to the figure
            this.Pixel.G = VarTemp*(-2.5);
            //The higher the multiplyer is,
            //the sharper the image :)
            //If you need a very sharp image just use:
            //this.Pixel.G = 1;
            }
}   // X or Y different by zero
    //Else is not needed since X or Y will be never equal to zero. if it happens, just add them]]>
              </Expression>
            </BitmapExpression>
          </Producers>
        </Bitmap>
      </Children>
    </Group>
    <Group Comment="Meshes">
      <Children>
        <Mesh Comment="Improved Sphere">
          <Producers>
            <MeshBox Scale="1 0.5 1" XCount="31" YCount="15" Grid2DOnly="255"/>
            <MeshExpression AutoNormals="0">
              <Expression>
        <![CDATA[//

        float E, A, C, X, Y, Z;

        // Convert range to radians

        E = this.V.Y*PI; // Elevation
        A = this.V.X*PI; // Azimuth

        // Convert spherical coordinates into cartesian

        C = cos(E);

        X = sin(A)*C;
        Y = sin(E);
        Z = cos(A)*C;

        // Assign coordinates

        this.V.X = X/2;
        this.V.Y = Y/2;
        this.V.Z = Z/2;

        this.N.X = X;
        this.N.Y = Y;
        this.N.Z = Z;]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Mesh Comment="Capsule">
          <Producers>
            <MeshBox Scale="0.5 0.5 1" XCount="15" Grid2DOnly="255"/>
            <MeshExpression AutoNormals="0">
              <Expression>
<![CDATA[float RX, SX, CX;

RX = this.V.X*PI*2;

SX = sin(RX); CX = cos(RX);

this.V.X = SX/2;
this.V.Z = CX/2;

this.N.X = this.V.X;
this.N.Y = 0;
this.N.Z = this.V.Z;]]>
              </Expression>
            </MeshExpression>
            <MeshBox Scale="0.5 0.5 1" XCount="15" YCount="3" Grid2DOnly="255"/>
            <MeshExpression AutoNormals="0">
              <Expression>
<![CDATA[float RX, SX, CX,
      RY, SY, CY;

RX = this.V.X*PI*2;
RY = this.V.Y*PI/2-PI/4;

SX = sin(RX); CX = cos(RX);
SY = sin(RY); CY = cos(RY);

this.V.X = SX*CY/2;
this.V.Y = SY/2;
this.V.Z = CX*CY/2;

this.N.X = this.V.X;
this.N.Y = this.V.Y;
this.N.Z = this.V.Z;

this.V.Y -= 0.5;]]>
              </Expression>
            </MeshExpression>
            <MeshCombine/>
            <MeshBox Scale="0.5 0.5 1" XCount="15" YCount="3" Grid2DOnly="255"/>
            <MeshExpression AutoNormals="0">
              <Expression>
<![CDATA[float RX, SX, CX,
      RY, SY, CY;

RX = this.V.X*PI*2;
RY = this.V.Y*PI/2+PI/4;

SX = sin(RX); CX = cos(RX);
SY = sin(RY); CY = cos(RY);

this.V.X = SX*CY/2;
this.V.Y = SY/2;
this.V.Z = CX*CY/2;

this.N.X = this.V.X;
this.N.Y = this.V.Y;
this.N.Z = this.V.Z;

this.V.Y += 0.5;]]>
              </Expression>
            </MeshExpression>
            <MeshCombine/>
          </Producers>
        </Mesh>
        <Mesh Comment="Cylinder">
          <Producers>
            <MeshSphere Name="OrigSphere"/>
            <MeshExpression AutoNormals="0">
              <Expression>
<![CDATA[//V : current vertex
//VarP is set to the number of Z samples;
//VarQ is the number of circonferences wanted in the upper and lower faces
float VarP;
int VarQ = 1;
float Psi;

VarP = OrigSphere.ZSamples;
if (this.V.Y != 0 || this.V.X != 0) {
    Psi = atan2(this.V.Y,this.V.X);
    this.V.X = cos(Psi); //*pow(1-abs(this.V.Z),2);
    this.V.Y = sin(Psi);
    //Normals
    //this.N.X = cos(Psi);
    //this.N.Y = sin(Psi);
    
    if (VarQ == 0) {
        this.V.Z /= 1 - 2/(VarP-1);
        }
    else { //VarQ != 0
        this.V.Z /= 1 - (VarQ+1)*2/(VarP-1);
        if (abs(this.V.Z)>1.001) {   //this is because we are using floating point precision
                                     //it is better to avoid stuff like "Z > 1" due to truncament errors

            //remember: tallest's high: (1/(1 - (VarQ+1)*2/(VarP-1));
            this.V.X *= 1 - (abs(this.V.Z)-1)/(1/(1 - (VarQ+1)*2/(VarP-1))-1);
            this.V.Y *= 1 - (abs(this.V.Z)-1)/(1/(1 - (VarQ+1)*2/(VarP-1))-1);

            this.V.Z = this.V.Z/(abs(this.V.Z));

        }
    } //ELSE

    //Normals
    if (abs(this.V.Z) < 0.999) {
        this.N.Z = 0; //lateral surface
        }
    else {
        if (pow(this.V.X,2) + pow(this.V.Y,2) < 0.999) {
               this.N.X = 0;  //Upper surface
               this.N.Y = 0;
               }
        else {
                 //Edges normals, you can decide what to use.
        }
    }  // End of normals section
    
    //soft edges      Work In Progress
    /*
    if (abs(this.V.Z) > 0.7 && pow(this.V.X,2) + pow(this.V.Y,2) > 0.7) {
        this.V.Z *= 0.9;
        this.V.Y *= 0.9;
        this.V.X *= 0.9;
        }
    // */

} //OUTER IF]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Mesh Comment="Perycicloid">
          <Producers>
            <MeshBox XCount="15" YCount="400" Grid2DOnly="255"/>
            <MeshExpression>
              <Expression>
<![CDATA[//V : current vertex
this.V.Z = 0;
               //HERE SHOULD BE 2*PI but the grid ranges between -1 and 1
float VarM = -4/3;
float VarP = this.V.X*PI;
float VarQ = this.V.Y*PI;

//this.V.X = 0.5*cos(VarP);

VarQ = this.V.X*PI;
VarP = this.V.Y*PI*3;
//this.V.X = (2 + 0.5*cos(VarQ))*cos(VarP);
//this.V.Y = (2 + 0.5*cos(VarQ))*sin(VarP);
this.V.Z = (0.1*sin(VarQ));
this.V.X = ((2)*(1 + VarM)*cos(VarM*VarP)-(2 + 0.1*cos(VarQ))*(VarM)*cos(VarP + VarM*VarP));
this.V.Y = ((2)*(1 + VarM)*sin(VarM*VarP)-(2 + 0.1*cos(VarQ))*(VarM)*sin(VarP + VarM*VarP));

/*         0.1*cos(VarP) +
           0.1*sin(VarP) +]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Mesh Comment="Pillow">
          <Producers>
            <MeshBox XCount="16" YCount="16" Grid2DOnly="255"/>
            <MeshExpression>
              <Expression>
<![CDATA[//V : current vertex
//N : current normal (turn off AutoNormals when modifying normals)
//C : current color (turn on VertexColors)

float V = this.V.X*PI;
float U = this.V.Y*PI;

this.V.X = cos(U);
this.V.Y = cos(V);
this.V.Z = 0-((sin(U)*sin(V))/Pi*2);]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Mesh Comment="Teardrop">
          <Producers>
            <MeshBox XCount="16" YCount="16" Grid2DOnly="255"/>
            <MeshExpression>
              <Expression>
<![CDATA[//V : current vertex
//N : current normal (turn off AutoNormals when modifying normals)
//C : current color (turn on VertexColors)

float V = this.V.X*PI;
float U = this.V.Y*PI;

this.V.X = 0.5*(1-cos(U))*sin(U)*cos(V);
this.V.Y = 0.5*(1-cos(U))*sin(U)*sin(V);
this.V.Z = cos(U);]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Mesh Comment="Throcoid">
          <Producers>
            <MeshBox XCount="15" YCount="500" Grid2DOnly="255"/>
            <MeshExpression>
              <Expression>
<![CDATA[//V : current vertex
this.V.Z = 0;
               //HERE SHOULD BE 2*PI but the grid ranges between -1 and 1
float VarM = 5/4;
float VarP = this.V.X*PI;
float VarQ = this.V.Y*PI;

//this.V.X = 0.5*cos(VarP);

VarQ = this.V.X*PI;
VarP = this.V.Y*PI*4;
//this.V.X = (2 + 0.5*cos(VarQ))*cos(VarP);
//this.V.Y = (2 + 0.5*cos(VarQ))*sin(VarP);
this.V.Z = 0-(0.1 * sin(VarQ));
this.V.X = ((2)*(1 + VarM)*cos(VarM*VarP)-(2+0.07*cos(VarQ))*(1 + VarM)*cos(VarP + VarM*VarP));
this.V.Y = ((2)*(1 + VarM)*sin(VarM*VarP)-(2+0.07*cos(VarQ))*(1 + VarM)*sin(VarP + VarM*VarP));]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Mesh Comment="Torus">
          <Producers>
            <MeshBox XCount="17" YCount="26" Grid2DOnly="255"/>
            <MeshExpression>
              <Expression>
<![CDATA[//V : current vertex
this.V.Z = 0;
               //HERE SHOULD BE 2*PI but the grid ranges between -1 and 1
float VarU = this.V.Y*PI;
float VarV = this.V.X*PI;
this.V.X = (2 + 0.5*cos(VarV))*cos(VarU);
this.V.Y = (2 + 0.5*cos(VarV))*sin(VarU);
this.V.Z = 0-(0.5*sin(VarV));]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Mesh Comment="Spring">
          <Producers>
            <MeshBox XCount="16" YCount="40" Grid2DOnly="255"/>
            <MeshExpression>
              <Expression>
<![CDATA[//V : current vertex
//N : current normal (turn off AutoNormals when modifying normals)
//C : current color (turn on VertexColors)

float V = this.V.X*PI;
float U = this.V.Y*PI;

float Radius=1;
float Length=4;
float Period=2;

this.V.X = (Pi+Radius*cos(V))*cos(U*Length);
this.V.Y = (Pi+Radius*cos(V))*sin(U*Length);
this.V.Z = 0-(Radius*(sin(V)+Period*U*Length/Pi));]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
        <Mesh Comment="Superformula">
          <Producers>
            <MeshSphere ZSamples="8" RadialSamples="60"/>
            <MeshExpression Comment="3D Superformula">
              <Expression>
<![CDATA[//V : current vertex
//N : current normal (turn off AutoNormals when modifying normals)
//C : current color (turn on VertexColors)
//Parameters
float VarM = 3;
float VarN1 = 5;
float VarN2 = 18;
float VarN3 = 18;

//Variables
float VarR, VarT, VarX, VarY, VarTemp;

if (this.V.X!=0 || this.V.Y!=0) { //this is always true (textures are multiples of 2x2)
    VarT = atan2(this.V.Y,this.V.X);
    VarR = pow(
        pow(abs(cos(VarM*VarT/4)/1),VarN2) +
        pow(abs(sin(VarM*VarT/4)/1),VarN3),
        -1/VarN1);

    VarR *= 0.5; //SCALING
    this.V.Y *= VarR;
    this.V.X *= VarR;

/* also, try doing something like:
    this.V.Y /= VarR;
    this.V.X /= VarR;
    */
    
}   // X or Y different by zero

this.V.Z *= 0.3;]]>
              </Expression>
            </MeshExpression>
          </Producers>
        </Mesh>
      </Children>
    </Group>
    <Group Comment="Models">
      <Children>
        <Model Comment="Ring from Cubes" Scale="0.1 0.1 0.1">
          <Definitions>
            <Mesh Name="Mesh_Box">
              <Producers>
                <MeshBox/>
              </Producers>
            </Mesh>
          </Definitions>
          <OnRender>
            <Repeat Count="100">
              <OnIteration>
                <RenderTransform Rotate="0 0 0.01"/>
                <RenderTransformGroup Comment="Translate.X determines Ring Size" Translate="0 30 0">
                  <Children>
                    <RenderMesh Mesh="Mesh_Box"/>
                  </Children>
                </RenderTransformGroup>
              </OnIteration>
            </Repeat>
          </OnRender>
        </Model>
        <Model Comment="Zwidget">
          <Definitions>
            <Bitmap Name="zWidgetXbmp" Width="4">
              <Producers>
                <BitmapFromFile Comment="Imported from X.gif">
                  <BitmapFile>

                  </BitmapFile>
                </BitmapFromFile>
              </Producers>
            </Bitmap>
            <Material Name="zWidgetXmat" Light="0" Blend="2" ZBuffer="0" DrawBackFace="255">
              <Textures>
                <MaterialTexture Texture="zWidgetXbmp" TextureWrapMode="2" TexCoords="1"/>
              </Textures>
            </Material>
            <Bitmap Name="zWidgetYbmp" Height="4">
              <Producers>
                <BitmapFromFile Comment="Imported from Y.gif">
                  <BitmapFile>

                  </BitmapFile>
                </BitmapFromFile>
              </Producers>
            </Bitmap>
            <Material Name="zWidgetYmat" Light="0" Blend="2" ZBuffer="0" DrawBackFace="255">
              <Textures>
                <MaterialTexture Texture="zWidgetYbmp" TextureWrapMode="2" TexCoords="1"/>
              </Textures>
            </Material>
            <Bitmap Name="zWidgetZbmp" Width="4">
              <Producers>
                <BitmapFromFile Comment="Imported from Z.gif">
                  <BitmapFile>

                  </BitmapFile>
                </BitmapFromFile>
              </Producers>
            </Bitmap>
            <Material Name="zWidgetZmat" Light="0" Blend="2" ZBuffer="0" DrawBackFace="255">
              <Textures>
                <MaterialTexture Texture="zWidgetZbmp" TextureWrapMode="2" TexCoords="1"/>
              </Textures>
            </Material>
          </Definitions>
          <OnRender>
            <UseMaterial Material="zWidgetXmat"/>
            <RenderTransform Scale="4 1 1"/>
            <RenderSprite/>
            <UseMaterial Material="zWidgetYmat"/>
            <RenderTransform Scale="0.25 4 1"/>
            <RenderSprite/>
            <UseMaterial Material="zWidgetZmat"/>
            <RenderTransform Scale="4 0.25 1" Rotate="0 0.75 0"/>
            <RenderSprite/>
          </OnRender>
        </Model>
      </Children>
    </Group>
    <Group Comment="Examples">
      <Children>
        <AppState Comment="2D Culling">
          <OnStart>
            <SpawnModel Model="Camera" SpawnStyle="1"/>
            <Repeat Comment="X">
              <OnIteration>
                <Repeat Comment="Y">
                  <OnIteration>
                    <SpawnModel Name="Spawn" Model="Building" Position="8 8 0"/>
                  </OnIteration>
                  <WhileExp>
<![CDATA[//

Spawn.Position.Y = this.Iteration;

//

return this.Iteration < 8;]]>
                  </WhileExp>
                </Repeat>
              </OnIteration>
              <WhileExp>
<![CDATA[//

Spawn.Position.X = this.Iteration;

//

return this.Iteration < 8;]]>
              </WhileExp>
            </Repeat>
          </OnStart>
          <OnUpdate>
            <Group Comment="kbInput">
              <Children>
                <Group Comment="Reset">
                  <Children>
                    <ZExpression>
                      <Expression>
<![CDATA[//

for(int U=0; U<kbInput.SizeDim1; ++U)
{
  kbInput[U] = 0;
}]]>
                      </Expression>
                    </ZExpression>
                  </Children>
                </Group>
                <Group Comment="Press">
                  <Children>
                    <KeyPress Comment="Right" Keys="&gt;">
                      <OnPressed>
                        <ZExpression>
                          <Expression>
<![CDATA[//

kbInput[0] += 1;]]>
                          </Expression>
                        </ZExpression>
                      </OnPressed>
                    </KeyPress>
                    <KeyPress Comment="Left" Keys="&lt;">
                      <OnPressed>
                        <ZExpression>
                          <Expression>
<![CDATA[//

kbInput[0] -= 1;]]>
                          </Expression>
                        </ZExpression>
                      </OnPressed>
                    </KeyPress>
                    <KeyPress Comment="Up" Keys="^">
                      <OnPressed>
                        <ZExpression>
                          <Expression>
<![CDATA[//

kbInput[1] += 1;]]>
                          </Expression>
                        </ZExpression>
                      </OnPressed>
                    </KeyPress>
                    <KeyPress Comment="Down" Keys="_">
                      <OnPressed>
                        <ZExpression>
                          <Expression>
<![CDATA[//

kbInput[1] -= 1;]]>
                          </Expression>
                        </ZExpression>
                      </OnPressed>
                    </KeyPress>
                  </Children>
                </Group>
              </Children>
            </Group>
          </OnUpdate>
          <OnRender>
            <Group Comment="Bounds">
              <Children>
                <UseMaterial Material="DefaultMaterial"/>
                <RenderTransformGroup Scale="8 8 1" Translate="3.5 3.5 0">
                  <Children>
                    <RenderSprite/>
                  </Children>
                </RenderTransformGroup>
              </Children>
            </Group>
          </OnRender>
          <Definitions>
            <DefineArray Name="kbInput" Type="1" SizeDim1="2"/>
            <DefineArray Name="Culling" Type="1" Dimensions="1" SizeDim1="2" SizeDim2="2"/>
            <Model Name="Camera" Position="3.4044 0.7244 0" Rotation="0 0 0.4432">
              <OnRender>
                <UseMaterial Material="DefaultMaterial"/>
                <RenderNet>
                  <RenderVertexExpression>
<![CDATA[//

if(this.Vertex.Y < 0)
{
  this.Vertex = 0;
}
else
{
  this.Vertex.X *= 2;
  this.Vertex.Y *= 4;
}]]>
                  </RenderVertexExpression>
                </RenderNet>
              </OnRender>
              <OnUpdate>
                <ZExpression>
                  <Expression>
<![CDATA[//

CurrentModel.Rotation.Z += kbInput[0]*App.DeltaTime*-1;

//

if(CurrentModel.Rotation.Z < 0)CurrentModel.Rotation.Z += 1;
if(CurrentModel.Rotation.Z > 1)CurrentModel.Rotation.Z -= 1;

//

float Angle = 0.125;

//

float Index = CurrentModel.Rotation.Z;

Culling[0,0] = 0;
Culling[1,0] = 0;
Culling[0,1] = 0;
Culling[1,1] = 0;

if(Index >= 0          && Index < 0.25+Angle)Culling[0,0] = 1;
if(Index >= 0.25-Angle && Index < 0.5 +Angle)Culling[0,1] = 1;
if(Index >= 0.5 -Angle && Index < 0.75+Angle)Culling[1,1] = 1;
if(Index >= 0.75-Angle && Index < 1         )Culling[1,0] = 1;

if(Index >= 1   -Angle && Index < 1         )Culling[0,0] = 1;
if(Index >= 0          && Index < Angle     )Culling[1,0] = 1;

//

CurrentModel.Velocity.X = sin(CurrentModel.Rotation.Z*Pi*2)*kbInput[1]*-1;
CurrentModel.Velocity.Y = cos(CurrentModel.Rotation.Z*Pi*2)*kbInput[1];

//

App.CameraPosition.X = CurrentModel.Position.X;
App.CameraPosition.Y = CurrentModel.Position.Y;]]>
                  </Expression>
                </ZExpression>
              </OnUpdate>
            </Model>
            <Model Name="Building">
              <OnRender>
                <Condition>
                  <Expression>
<![CDATA[//

int   U, V;
float X, Y;

//

X = CurrentModel.Position.X-Camera.Position.X;
Y = CurrentModel.Position.Y-Camera.Position.Y;

//

if(X < 0)U = 0; else U = 1;
if(Y > 0)V = 0; else V = 1;

//

if(abs(X) < 1 && abs(Y) < 1)return 1;
else return Culling[U,V];]]>
                  </Expression>
                  <OnTrue>
                    <RenderSprite/>
                  </OnTrue>
                </Condition>
              </OnRender>
            </Model>
            <Material Name="DefaultMaterial" WireframeWidth="1" Shading="2" Light="0"/>
          </Definitions>
        </AppState>
        <AppState Comment="GLSL Fog">
          <OnStart>
            <SpawnModel Model="o_test"/>
          </OnStart>
          <OnUpdate>
            <AnimatorSimple Duration="3" AutoStart="255" Target="App CameraPosition 2" FromValue="30" ToValue="130" Smooth="255" AutoReverse="255" RepeatCount="-1"/>
          </OnUpdate>
          <Definitions>
            <Bitmap Name="b_cells">
              <Producers>
                <BitmapCells CellStyle="4" RandomSeed="46"/>
              </Producers>
            </Bitmap>
            <Shader Name="glsl_fog" Comment="this the shader codes">
              <VertexShaderSource>
<![CDATA[varying float Distance;
void main()
{
gl_TexCoord[0] = gl_MultiTexCoord0;
gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
Distance = clamp(gl_Position.z,0.0,100.0);
}]]>
              </VertexShaderSource>
              <FragmentShaderSource>
<![CDATA[varying float Distance;
uniform sampler2D TheTexture;
void main (void)
{
vec4 color= texture2D(TheTexture, gl_TexCoord[0].st);
gl_FragColor = mix(color, vec4(0,0,0,1), Distance/100.0); 
//fog color in line above; vec4(r,g,b,a)
// fog fades from camera to 100 in Z direction,. . 
}]]>
              </FragmentShaderSource>
            </Shader>
            <Material Name="m_fog" Color="1 1 1 1" Light="0" Blend="1" Shader="glsl_fog">
              <Textures>
                <MaterialTexture Texture="b_cells"/>
              </Textures>
            </Material>
            <Mesh Name="g_box">
              <Producers>
                <MeshBox/>
              </Producers>
            </Mesh>
            <Model Name="o_test" Rotation="0 0.25 0" RotationVelocity="0 0 0.1">
              <OnRender>
                <UseMaterial Material="m_fog"/>
                <Repeat Comment="some model,. ." Count="10">
                  <OnIteration>
                    <RenderTransform Rotate="0 0 0.1"/>
                    <RenderTransformGroup Scale="10 1 1" Translate="8 0 0" Rotate="0.123 -0.25 0">
                      <Children>
                        <RenderMesh Mesh="g_box"/>
                      </Children>
                    </RenderTransformGroup>
                  </OnIteration>
                </Repeat>
              </OnRender>
            </Model>
          </Definitions>
        </AppState>
        <AppState Comment="HSV ColorExample Library Example">
          <OnStart>
            <ZLibrary Comment="HSV Library">
              <Source>
<![CDATA[//

float angle(float X)
{
  if(X >= 0 && X < 360)return X;
  if(X > 360)return X-floor(X/360)* 360;
  if(X <   0)return X+floor(X/360)*-360;
}

//

void hsv(float H, float S, float V)
{
  float R,G,B,I,F,P,Q,T;
  
  H = angle(H);
  S = clamp(S,0,100);
  V = clamp(V,0,100);

  H /= 60;
  S /= 100;
  V /= 100;
  
  if(S == 0)
  {
    ColorExample[0] = V;
    ColorExample[1] = V;
    ColorExample[2] = V;
    return;
  }

  I = floor(H);
  F = H-I;

  P = V*(1-S);
  Q = V*(1-S*F);
  T = V*(1-S*(1-F));

  if(I == 0){R = V; G = T; B = P;}
  if(I == 1){R = Q; G = V; B = P;}
  if(I == 2){R = P; G = V; B = T;}
  if(I == 3){R = P; G = Q; B = V;}
  if(I == 4){R = T; G = P; B = V;}
  if(I == 5){R = V; G = P; B = Q;}
  
  ColorExample[0] = R;
  ColorExample[1] = G;
  ColorExample[2] = B;
}]]>
              </Source>
            </ZLibrary>
          </OnStart>
          <OnRender>
            <ZExpression>
              <Expression>
<![CDATA[//

hsv(720-App.Time*90,(sin(App.Time*3)+1)*50,(cos(App.Time*7)+1)*50);

//

DebugHSV.Color.R = ColorExample[0];
DebugHSV.Color.G = ColorExample[1];
DebugHSV.Color.B = ColorExample[2];]]>
              </Expression>
            </ZExpression>
            <UseMaterial Material="DefaultMaterialHSV"/>
            <RenderSetColor Name="DebugHSV" Color="1 0.5 0.5 0"/>
            <RenderSprite/>
          </OnRender>
          <Definitions>
            <DefineArray Name="ColorExample" SizeDim1="3"/>
            <Material Name="DefaultMaterialHSV" Shading="1" Light="0" ZBuffer="0"/>
          </Definitions>
        </AppState>
        <AppState Comment="MatrixExample Library Example">
          <OnStart>
            <ZLibrary Comment="MatrixExample Library">
              <Source>
<![CDATA[//

void RotationMatrixX(int K, float Angle)
{
  float C, S;

  C = cos(Angle);
  S = sin(Angle);

  MatrixExample[K,0,0] = 1;
  MatrixExample[K,0,1] = 0;
  MatrixExample[K,0,2] = 0;

  MatrixExample[K,1,0] = 0;
  MatrixExample[K,1,1] = C;
  MatrixExample[K,1,2] = S*-1;

  MatrixExample[K,2,0] = 0;
  MatrixExample[K,2,1] = S;
  MatrixExample[K,2,2] = C;
}

void RotationMatrixY(int K, float Angle)
{
  float C, S;

  C = cos(Angle);
  S = sin(Angle);

  MatrixExample[K,0,0] = C;
  MatrixExample[K,0,1] = 0;
  MatrixExample[K,0,2] = S;

  MatrixExample[K,1,0] = 0;
  MatrixExample[K,1,1] = 1;
  MatrixExample[K,1,2] = 0;

  MatrixExample[K,2,0] = S*-1;
  MatrixExample[K,2,1] = 0;
  MatrixExample[K,2,2] = C;
}

void RotationMatrixZ(int K, float Angle)
{
  float C, S;
  
  C = cos(Angle);
  S = sin(Angle);
  
  MatrixExample[K,0,0] = C;
  MatrixExample[K,0,1] = S*-1;
  MatrixExample[K,0,2] = 0;
  
  MatrixExample[K,1,0] = S;
  MatrixExample[K,1,1] = C;
  MatrixExample[K,1,2] = 0;
  
  MatrixExample[K,2,0] = 0;
  MatrixExample[K,2,1] = 0;
  MatrixExample[K,2,2] = 1;
}

//

void MultiplyMatrix(int K, int A, int B)
{
  MatrixExample[K,0,0] = MatrixExample[A,0,0]*MatrixExample[B,0,0]+MatrixExample[A,0,1]*MatrixExample[B,1,0]+MatrixExample[A,0,2]*MatrixExample[B,2,0];
  MatrixExample[K,0,1] = MatrixExample[A,0,0]*MatrixExample[B,0,1]+MatrixExample[A,0,1]*MatrixExample[B,1,1]+MatrixExample[A,0,2]*MatrixExample[B,2,1];
  MatrixExample[K,0,2] = MatrixExample[A,0,0]*MatrixExample[B,0,2]+MatrixExample[A,0,1]*MatrixExample[B,1,2]+MatrixExample[A,0,2]*MatrixExample[B,2,2];
  
  MatrixExample[K,1,0] = MatrixExample[A,1,0]*MatrixExample[B,0,0]+MatrixExample[A,1,1]*MatrixExample[B,1,0]+MatrixExample[A,1,2]*MatrixExample[B,2,0];
  MatrixExample[K,1,1] = MatrixExample[A,1,0]*MatrixExample[B,0,1]+MatrixExample[A,1,1]*MatrixExample[B,1,1]+MatrixExample[A,1,2]*MatrixExample[B,2,1];
  MatrixExample[K,1,2] = MatrixExample[A,1,0]*MatrixExample[B,0,2]+MatrixExample[A,1,1]*MatrixExample[B,1,2]+MatrixExample[A,1,2]*MatrixExample[B,2,2];

  MatrixExample[K,2,0] = MatrixExample[A,2,0]*MatrixExample[B,0,0]+MatrixExample[A,2,1]*MatrixExample[B,1,0]+MatrixExample[A,2,2]*MatrixExample[B,2,0];
  MatrixExample[K,2,1] = MatrixExample[A,2,0]*MatrixExample[B,0,1]+MatrixExample[A,2,1]*MatrixExample[B,1,1]+MatrixExample[A,2,2]*MatrixExample[B,2,1];
  MatrixExample[K,2,2] = MatrixExample[A,2,0]*MatrixExample[B,0,2]+MatrixExample[A,2,1]*MatrixExample[B,1,2]+MatrixExample[A,2,2]*MatrixExample[B,2,2];
}

//

void Rotate(float VX, float VY, float VZ, float AX, float AY, float AZ)
{
  RotationMatrixX(1,AX);
  RotationMatrixY(2,AY);
  RotationMatrixZ(3,AZ);
  
  MultiplyMatrix(4,1,2);
  MultiplyMatrix(5,4,3);
  
  MatrixExample[0,0,0] = VX*MatrixExample[5,0,0]+VY*MatrixExample[5,0,1]+VZ*MatrixExample[5,0,2];
  MatrixExample[0,1,0] = VX*MatrixExample[5,1,0]+VY*MatrixExample[5,1,1]+VZ*MatrixExample[5,1,2];
  MatrixExample[0,2,0] = VX*MatrixExample[5,2,0]+VY*MatrixExample[5,2,1]+VZ*MatrixExample[5,2,2];
}]]>
              </Source>
            </ZLibrary>
          </OnStart>
          <OnUpdate>
            <ZExpression>
              <Expression>
<![CDATA[//

Sprite.Rotate.X = App.Time/4;
Sprite.Rotate.Y = App.Time/4;
Sprite.Rotate.Z = App.Time/4;

//

Rotate(0.5,0.5,0,Sprite.Rotate.X*Pi*2,Sprite.Rotate.Y*Pi*2, Sprite.Rotate.Z*Pi*2);

//

Debug.Translate.X = MatrixExample[0,0,0];
Debug.Translate.Y = MatrixExample[0,1,0];
Debug.Translate.Z = MatrixExample[0,2,0];]]>
              </Expression>
            </ZExpression>
          </OnUpdate>
          <OnRender>
            <UseMaterial Material="MatrixMaterial"/>
            <RenderTransformGroup Name="Sprite">
              <Children>
                <RenderSetColor Color="1 1 1 1"/>
                <RenderSprite/>
              </Children>
            </RenderTransformGroup>
            <RenderTransformGroup Name="Debug" Scale="0.25 0.25 1" Translate="0.5 0.5 0">
              <Children>
                <RenderSetColor Color="1 0 0.502 1"/>
                <RenderSprite/>
              </Children>
            </RenderTransformGroup>
          </OnRender>
          <Definitions>
            <DefineArray Name="MatrixExample" Dimensions="2" SizeDim1="6" SizeDim2="3" SizeDim3="3"/>
            <Material Name="MatrixMaterial" WireframeWidth="1" Shading="2" Light="0" DrawBackFace="255"/>
          </Definitions>
        </AppState>
        <AppState Comment="Proportional Type">
          <OnRender>
            <Group Comment="Text">
              <Children>
                <UseMaterial Material="ArialMaterial"/>
                <RenderText TextArray="String" X="-1.175" Align="1" UseModelSpace="255">
                  <RenderCharExpression>
<![CDATA[//

if(CharI != 0)
{
  float L = Letter[String[CharI-1]];
  CharX -= 1-L;
}]]>
                  </RenderCharExpression>
                </RenderText>
              </Children>
            </Group>
          </OnRender>
          <Definitions>
            <Group Comment="Arial">
              <Children>
                <Font Name="Arial" Bitmap="ArialBitmap" FirstChar="32" CharPixelWidth="24" CharPixelHeight="24"/>
                <Bitmap Name="ArialBitmap" Width="4" Height="4">
                  <Producers>
                    <BitmapFromFile Transparency="2" HasAlphaLayer="1">
                      <BitmapFile>

                      </BitmapFile>
                    </BitmapFromFile>
                  </Producers>
                </Bitmap>
                <Material Name="ArialMaterial" Shading="1" Light="0" Blend="1" ZBuffer="0" Font="Arial"/>
                <DefineArray Name="Letter" SizeDim1="128" Persistent="255">
                  <Values>
<![CDATA[78DA6360185870F6CC193BF2F4F9D851CB0DB3664ADA0F703080ED4F4B7B660765037103980D12333636B643F7B7B1F167B83C44BCC70E22D600536B0FD4876C2E560000B8961A6B]]>
                  </Values>
                </DefineArray>
              </Children>
            </Group>
            <Group Comment="String">
              <Children>
                <DefineArray Name="String" Type="1" SizeDim1="64" Persistent="255">
                  <Values>
<![CDATA[78DA758DED0980300C44334A27700747113F6A41ACD4A2B8BD577801FF587890EBE52EBD99057188223273465791D0BB18C446A6790FFBB358F0477460F66CC54FE8939D48A777AD1F2FD3DBE68B7C61D77B22FECDDFC42DEFE9ECFFBD563C1628]]>
                  </Values>
                </DefineArray>
              </Children>
            </Group>
          </Definitions>
        </AppState>
        <AppState Comment="Input">
          <OnStart>
            <ZExpression>
              <Expression>
<![CDATA[App.CameraPosition.X = 4;
App.CameraPosition.Y = -1.5;
App.CameraPosition.Z = 10;]]>
              </Expression>
            </ZExpression>
          </OnStart>
          <OnUpdate>
            <Group Comment="Input">
              <Children>
                <ZExpression Comment="Reset">
                  <Expression>
<![CDATA[for(int U=0; U<Input.SizeDim1; ++U)
{
  for(int V=0; V<Input.SizeDim2; ++V)
  {
    Input[U,V,Input.SizeDim3-1] = Input[U,V,0];
    for(int W=0; W<Input.SizeDim3-1; ++W)
    {
       Input[U,V,W] = 0;
    }
  }
}]]>
                  </Expression>
                </ZExpression>
                <Group Comment="Keys">
                  <Children>
                    <Group Comment="P1">
                      <Children>
                        <KeyPress Comment="Right" Keys="&gt;">
                          <OnPressed>
                            <ZExpression>
                              <Expression>
<![CDATA[//

Input[0,0,0] = 1;]]>
                              </Expression>
                            </ZExpression>
                          </OnPressed>
                        </KeyPress>
                        <KeyPress Comment="Left" Keys="&lt;">
                          <OnPressed>
                            <ZExpression>
                              <Expression>
<![CDATA[//

Input[0,1,0] = 1;]]>
                              </Expression>
                            </ZExpression>
                          </OnPressed>
                        </KeyPress>
                        <KeyPress Comment="Up" Keys="^">
                          <OnPressed>
                            <ZExpression>
                              <Expression>
<![CDATA[//

Input[0,2,0] = 1;]]>
                              </Expression>
                            </ZExpression>
                          </OnPressed>
                        </KeyPress>
                        <KeyPress Comment="Down" Keys="_">
                          <OnPressed>
                            <ZExpression>
                              <Expression>
<![CDATA[//

Input[0,3,0] = 1;]]>
                              </Expression>
                            </ZExpression>
                          </OnPressed>
                        </KeyPress>
                      </Children>
                    </Group>
                    <Group Comment="P2">
                      <Children>
                        <KeyPress Comment="Right" Keys="D">
                          <OnPressed>
                            <ZExpression>
                              <Expression>
<![CDATA[//

Input[1,0,0] = 1;]]>
                              </Expression>
                            </ZExpression>
                          </OnPressed>
                        </KeyPress>
                        <KeyPress Comment="Left" Keys="A">
                          <OnPressed>
                            <ZExpression>
                              <Expression>
<![CDATA[//

Input[1,1,0] = 1;]]>
                              </Expression>
                            </ZExpression>
                          </OnPressed>
                        </KeyPress>
                        <KeyPress Comment="Up" Keys="W">
                          <OnPressed>
                            <ZExpression>
                              <Expression>
<![CDATA[//

Input[1,2,0] = 1;]]>
                              </Expression>
                            </ZExpression>
                          </OnPressed>
                        </KeyPress>
                        <KeyPress Comment="Down" Keys="S">
                          <OnPressed>
                            <ZExpression>
                              <Expression>
<![CDATA[//

Input[1,3,0] = 1;]]>
                              </Expression>
                            </ZExpression>
                          </OnPressed>
                        </KeyPress>
                      </Children>
                    </Group>
                  </Children>
                </Group>
                <ZExpression Comment="Events">
                  <Expression>
<![CDATA[// the Events are:
// [x, x, 0 ] : Key Down
// [x, x, 1 ] : Key Pressed (in this frame)
// [x, x, 2 ] : Key Released (in this frame)

for(int U=0; U<Input.SizeDim1; ++U)
{
  for(int V=0; V<Input.SizeDim2; ++V)
  {
    if(Input[U,V,0] == 1 && Input[U,V,Input.SizeDim3-1] == 0){Input[U,V,1] = 1;}
    if(Input[U,V,0] == 0 && Input[U,V,Input.SizeDim3-1] == 1){Input[U,V,2] = 1;}
  }
}]]>
                  </Expression>
                </ZExpression>
              </Children>
            </Group>
          </OnUpdate>
          <OnRender>
            <Repeat Name="Slots">
              <OnIteration>
                <Repeat Name="Keys">
                  <OnIteration>
                    <Repeat Name="Events">
                      <OnIteration>
                        <ZExpression>
                          <Expression>
<![CDATA[//

int U = Slots.iteration;
int V = Keys.iteration;
int W = Events.iteration;

SpriteRTG.Translate.X = U*( Input.SizeDim2+1 )+V;
SpriteRTG.Translate.Y = W*-1;
SpriteRTG.Translate.Z = Input[U,V,W]*-1;]]>
                          </Expression>
                        </ZExpression>
                        <RenderTransformGroup Name="SpriteRTG" Scale="0.75 0.75 1" Translate="8 -3 0">
                          <Children>
                            <RenderSprite/>
                          </Children>
                        </RenderTransformGroup>
                      </OnIteration>
                      <WhileExp>
<![CDATA[//

return this.iteration < Input.SizeDim3;]]>
                      </WhileExp>
                    </Repeat>
                  </OnIteration>
                  <WhileExp>
<![CDATA[//

return this.iteration < Input.SizeDim2;]]>
                  </WhileExp>
                </Repeat>
              </OnIteration>
              <WhileExp>
<![CDATA[//

return this.iteration < Input.SizeDim1;]]>
              </WhileExp>
            </Repeat>
          </OnRender>
          <Definitions>
            <DefineArray Name="Input" Dimensions="2" SizeDim1="2" SizeDim2="4" SizeDim3="4"/>
          </Definitions>
        </AppState>
        <AppState Comment="RayCast">
          <OnStart>
            <ZLibrary Comment="RayCast Library">
              <Source>
<![CDATA[//

void Sub(int K,
         float X1, float Y1, float Z1,
         float X2, float Y2, float Z2)
{
  RCVector[K,0] = X1-X2;
  RCVector[K,1] = Y1-Y2;
  RCVector[K,2] = Z1-Z2;
}

//

void Cross(int K,
           float X1, float Y1, float Z1,
           float X2, float Y2, float Z2)
{
  RCVector[K,0] = Y1*Z2-Z1*Y2;
  RCVector[K,1] = Z1*X2-X1*Z2;
  RCVector[K,2] = X1*Y2-Y1*X2;
}

//

float Dot(float X1, float Y1, float Z1,
          float X2, float Y2, float Z2)
{
  return X1*X2+Y1*Y2+Z1*Z2;
}

//

int RayTriangle(float OX, float OY, float OZ,
                float DX, float DY, float DZ,
                float X1, float Y1, float Z1,
                float X2, float Y2, float Z2,
                float X3, float Y3, float Z3)
{
  float R, S, T, U, V;

  Sub(1,X2,Y2,Z2,X1,Y1,Z1);
  Sub(2,X3,Y3,Z3,X1,Y1,Z1);
  
  Cross(3,DX,DY,DZ,RCVector[2,0],RCVector[2,1],RCVector[2,2]);

  R = Dot(RCVector[1,0],RCVector[1,1],RCVector[1,2],RCVector[3,0],RCVector[3,1],RCVector[3,2]);

  Sub(4,OX,OY,OZ,X1,Y1,Z1);
  S = 1/R;
  
  Cross(5,RCVector[4,0],RCVector[4,1],RCVector[4,2],RCVector[1,0],RCVector[1,1],RCVector[1,2]);
  
  if(R <= Epsilon && R >= Epsilon*-1)
  {
    return 0;
  }
  else
  {
    if(R > Epsilon)
    {
      DebugVar = U;
      U = Dot(RCVector[4,0],RCVector[4,1],RCVector[4,2],RCVector[3,0],RCVector[3,1],RCVector[3,2]);
      if(U < 0 || U > R)
      {
        return 0;
      }

      V = Dot(DX,DY,DZ,RCVector[5,0],RCVector[5,1],RCVector[5,2]);
      if(V < 0 || U+V > R)
      {
        return 0;
      }
    }

    if(R < Epsilon*-1)
    {
      U = Dot(RCVector[4,0],RCVector[4,1],RCVector[4,2],RCVector[3,0],RCVector[3,1],RCVector[3,2]);
      if(U > 0 || U < R)
      {
        return 0;
      }

      V = Dot(DX,DY,DZ,RCVector[5,0],RCVector[5,1],RCVector[5,2]);
      if(V > 0 || U+V < R)
      {
        return 0;
      }
    }
  }
  
  T = Dot(RCVector[2,0],RCVector[2,1],RCVector[2,2],RCVector[5,0],RCVector[5,1],RCVector[5,2]);
  U *= S;
  V *= S;
  
  return 1;
}]]>
              </Source>
            </ZLibrary>
          </OnStart>
          <OnRender>
            <UseMaterial Material="Wireframe"/>
            <Condition>
              <Expression>
<![CDATA[//

return RayTriangle(sin(App.Time)*2,0,0,
                   0,1,0,
                   1,1,0,
                   -0.5,1,1,
                   -0.5,1,-1);]]>
              </Expression>
              <OnTrue>
                <RenderSetColor Color="1 0 0 1"/>
                <RenderNet>
                  <RenderVertexExpression>
<![CDATA[//

this.Vertex.Y += 0.5;

//

this.Vertex.X = sin(App.Time)*2;]]>
                  </RenderVertexExpression>
                </RenderNet>
              </OnTrue>
              <OnFalse>
                <RenderSetColor Color="1 1 1 1"/>
                <RenderNet>
                  <RenderVertexExpression>
<![CDATA[//

this.Vertex.Y += 0.5;

//

this.Vertex.X = sin(App.Time)*2;
this.Vertex.Y *= 8;]]>
                  </RenderVertexExpression>
                </RenderNet>
              </OnFalse>
            </Condition>
            <RenderTransformGroup Translate="0 1 0" Rotate="0.25 0 0">
              <Children>
                <RenderNet>
                  <RenderVertexExpression>
<![CDATA[//

if(this.Vertex.X > 0)
{
  this.Vertex.X = 1;
  this.Vertex.Y = 0;
}]]>
                  </RenderVertexExpression>
                </RenderNet>
              </Children>
            </RenderTransformGroup>
          </OnRender>
          <Definitions>
            <DefineArray Name="RCVector" Dimensions="1" SizeDim1="6" SizeDim2="3"/>
            <DefineConstant Name="Epsilon" Value="0.001"/>
            <Material Name="Wireframe" WireframeWidth="1" Shading="2" Light="0" DrawBackFace="255"/>
            <DefineVariable Name="DebugVar"/>
          </Definitions>
        </AppState>
        <AppState Comment="Trail">
          <OnStart>
            <ZExpression>
              <Expression>
<![CDATA[//

int U, V;

for(U=0; U<Mouse.SizeDim1; ++U)
{
  for(V=2; V<Mouse.SizeDim2; ++V)
  {
    Mouse[U,V] = 0;
  }
  
  Mouse[U,0] = App.MousePosition.X*16;
  Mouse[U,1] = App.MousePosition.Y*9;
}

//

MouseIndex = 0;]]>
              </Expression>
            </ZExpression>
          </OnStart>
          <OnUpdate>
            <ZExpression>
              <Expression>
<![CDATA[//

float TrailAngle;

//

Trail.YCount = Mouse.SizeDim1-2;

//

MouseIndexLast = MouseIndex;

++ MouseIndex;

if(MouseIndex > Mouse.SizeDim1-1) MouseIndex -= Mouse.SizeDim1;

//

Mouse[MouseIndex,0] = App.MousePosition.X*8;
Mouse[MouseIndex,1] = App.MousePosition.Y*6;

//

TrailAngle = atan2(Mouse[MouseIndexLast,1]-Mouse[MouseIndex,1],Mouse[MouseIndexLast,0]-Mouse[MouseIndex,0]);

Mouse[MouseIndex,2] = sin(TrailAngle)*-1;
Mouse[MouseIndex,3] = cos(TrailAngle);]]>
              </Expression>
            </ZExpression>
          </OnUpdate>
          <OnRender>
            <UseMaterial Material="TrailMaterial"/>
            <RenderNet Name="Trail" YCount="62">
              <RenderVertexExpression>
<![CDATA[//

int TrailIndex;
float TrailWidth;

//

this.Vertex.Y += 0.5;
this.Vertex.Y *= Trail.YCount;

//

TrailIndex = MouseIndex-(Trail.YCount-this.Vertex.Y);

if(TrailIndex > Mouse.SizeDim1-1) TrailIndex -= Mouse.SizeDim1-1;
if(TrailIndex < 0) TrailIndex += Mouse.SizeDim1-1;

//

TrailWidth = this.Vertex.Y/Trail.YCount;

//

if(this.Vertex.X > 0)
{
  this.Vertex.X = Mouse[TrailIndex,0]+Mouse[TrailIndex,2]*TrailWidth;
  this.Vertex.Y = Mouse[TrailIndex,1]+Mouse[TrailIndex,3]*TrailWidth;
}
else
{
  this.Vertex.X = Mouse[TrailIndex,0]-Mouse[TrailIndex,2]*TrailWidth;
  this.Vertex.Y = Mouse[TrailIndex,1]-Mouse[TrailIndex,3]*TrailWidth;
}]]>
              </RenderVertexExpression>
            </RenderNet>
          </OnRender>
          <Definitions>
            <DefineArray Name="Mouse" Dimensions="1" SizeDim1="64" SizeDim2="4"/>
            <DefineVariable Name="MouseIndex" Type="1"/>
            <DefineVariable Name="MouseIndexLast" Type="1"/>
            <Bitmap Name="Bitmap" Width="0" Height="4">
              <Producers>
                <BitmapExpression>
                  <Expression>
<![CDATA[//

this.Pixel = Y;]]>
                  </Expression>
                </BitmapExpression>
              </Producers>
            </Bitmap>
            <Material Name="TrailMaterial" Light="0" ZBuffer="0">
              <Textures>
                <MaterialTexture Texture="Bitmap" TexCoords="1"/>
              </Textures>
            </Material>
          </Definitions>
        </AppState>
        <AppState Comment="ViewFrustrum Culling">
          <OnStart>
            <Group Comment="VFCMatrix Lib">
              <Children>
                <DefineArray Name="VFCMatrix" Dimensions="2" SizeDim1="6" SizeDim2="3" SizeDim3="3"/>
                <ZLibrary Comment="VFCMatrix">
                  <Source>
<![CDATA[// ================================================================
// MATRIX LIBRARY by kjell
// ================================================================

void RotationMatrixX(int K, float Angle)
{
  float C, S;

  C = cos(Angle);
  S = sin(Angle);

  VFCMatrix[K,0,0] = 1;
  VFCMatrix[K,0,1] = 0;
  VFCMatrix[K,0,2] = 0;

  VFCMatrix[K,1,0] = 0;
  VFCMatrix[K,1,1] = C;
  VFCMatrix[K,1,2] = S*-1;

  VFCMatrix[K,2,0] = 0;
  VFCMatrix[K,2,1] = S;
  VFCMatrix[K,2,2] = C;
}

void RotationMatrixY(int K, float Angle)
{
  float C, S;

  C = cos(Angle);
  S = sin(Angle);

  VFCMatrix[K,0,0] = C;
  VFCMatrix[K,0,1] = 0;
  VFCMatrix[K,0,2] = S;

  VFCMatrix[K,1,0] = 0;
  VFCMatrix[K,1,1] = 1;
  VFCMatrix[K,1,2] = 0;

  VFCMatrix[K,2,0] = S*-1;
  VFCMatrix[K,2,1] = 0;
  VFCMatrix[K,2,2] = C;
}

void RotationMatrixZ(int K, float Angle)
{
  float C, S;
 
  C = cos(Angle);
  S = sin(Angle);
 
  VFCMatrix[K,0,0] = C;
  VFCMatrix[K,0,1] = S*-1;
  VFCMatrix[K,0,2] = 0;
 
  VFCMatrix[K,1,0] = S;
  VFCMatrix[K,1,1] = C;
  VFCMatrix[K,1,2] = 0;
 
  VFCMatrix[K,2,0] = 0;
  VFCMatrix[K,2,1] = 0;
  VFCMatrix[K,2,2] = 1;
}

//

void MultiplyMatrix(int K, int A, int B)
{
  VFCMatrix[K,0,0] = VFCMatrix[A,0,0]*VFCMatrix[B,0,0]+VFCMatrix[A,0,1]*VFCMatrix[B,1,0]+VFCMatrix[A,0,2]*VFCMatrix[B,2,0];
  VFCMatrix[K,0,1] = VFCMatrix[A,0,0]*VFCMatrix[B,0,1]+VFCMatrix[A,0,1]*VFCMatrix[B,1,1]+VFCMatrix[A,0,2]*VFCMatrix[B,2,1];
  VFCMatrix[K,0,2] = VFCMatrix[A,0,0]*VFCMatrix[B,0,2]+VFCMatrix[A,0,1]*VFCMatrix[B,1,2]+VFCMatrix[A,0,2]*VFCMatrix[B,2,2];
 
  VFCMatrix[K,1,0] = VFCMatrix[A,1,0]*VFCMatrix[B,0,0]+VFCMatrix[A,1,1]*VFCMatrix[B,1,0]+VFCMatrix[A,1,2]*VFCMatrix[B,2,0];
  VFCMatrix[K,1,1] = VFCMatrix[A,1,0]*VFCMatrix[B,0,1]+VFCMatrix[A,1,1]*VFCMatrix[B,1,1]+VFCMatrix[A,1,2]*VFCMatrix[B,2,1];
  VFCMatrix[K,1,2] = VFCMatrix[A,1,0]*VFCMatrix[B,0,2]+VFCMatrix[A,1,1]*VFCMatrix[B,1,2]+VFCMatrix[A,1,2]*VFCMatrix[B,2,2];

  VFCMatrix[K,2,0] = VFCMatrix[A,2,0]*VFCMatrix[B,0,0]+VFCMatrix[A,2,1]*VFCMatrix[B,1,0]+VFCMatrix[A,2,2]*VFCMatrix[B,2,0];
  VFCMatrix[K,2,1] = VFCMatrix[A,2,0]*VFCMatrix[B,0,1]+VFCMatrix[A,2,1]*VFCMatrix[B,1,1]+VFCMatrix[A,2,2]*VFCMatrix[B,2,1];
  VFCMatrix[K,2,2] = VFCMatrix[A,2,0]*VFCMatrix[B,0,2]+VFCMatrix[A,2,1]*VFCMatrix[B,1,2]+VFCMatrix[A,2,2]*VFCMatrix[B,2,2];
}

//

void Rotate(float VX, float VY, float VZ, float AX, float AY, float AZ)
{
  RotationMatrixX(1,AX);
  RotationMatrixY(2,AY);
  RotationMatrixZ(3,AZ);
 
  MultiplyMatrix(4,1,2);
  MultiplyMatrix(5,4,3);
 
  VFCMatrix[0,0,0] = VX*VFCMatrix[5,0,0]+VY*VFCMatrix[5,0,1]+VZ*VFCMatrix[5,0,2];
  VFCMatrix[0,1,0] = VX*VFCMatrix[5,1,0]+VY*VFCMatrix[5,1,1]+VZ*VFCMatrix[5,1,2];
  VFCMatrix[0,2,0] = VX*VFCMatrix[5,2,0]+VY*VFCMatrix[5,2,1]+VZ*VFCMatrix[5,2,2];
}]]>
                  </Source>
                </ZLibrary>
                <ZLibrary Comment="VFCMatrix Addon">
                  <Source>
<![CDATA[// ================================================================
// MATRIX LIBRARY AddOn
// ================================================================

// rotate in succession, first x, then y. no z.
void successiveRotation( float VX, float VY, float VZ, float AX, float AY ){
  Rotate( VX, VY, VZ, AX, 0, 0 );
  Rotate( VFCMatrix[ 0, 0, 0 ], VFCMatrix[ 0, 1, 0 ], VFCMatrix[ 0, 2, 0 ], 0,  AY, 0 );
}
// rotate in succession using the current view frustrum rotation as angles
void successiveViewRotation( float VX, float VY, float VZ ){
  successiveRotation( VX, VY, VZ, viewRotation[ 1 ] * Pi * 2, viewRotation[ 0 ] * Pi * 2 );
}]]>
                  </Source>
                </ZLibrary>
                <ZLibrary Comment="Vector (Dot Product)">
                  <Source>
<![CDATA[// ================================================================
// parts of VECTOR LIBRARY by kjell
// ================================================================

float Dot(float X1, float Y1, float Z1,
          float X2, float Y2, float Z2)
{
  return X1*X2+Y1*Y2+Z1*Z2;
}
float shortDot( int c, int n ){
  return  Dot( cubePositions[ c, 0 ],
               cubePositions[ c, 1 ],
               cubePositions[ c, 2 ],
               aFrustrumNormalsTransformed[ n, 0 ],
               aFrustrumNormalsTransformed[ n, 1 ],
               aFrustrumNormalsTransformed[ n, 2 ]);
}]]>
                  </Source>
                </ZLibrary>
              </Children>
            </Group>
            <Group Comment="View">
              <Children>
                <DefineVariable Name="viewAngle"/>
                <DefineVariable Name="viewRatio"/>
                <DefineArray Name="viewRotation" SizeDim1="2"/>
                <DefineArray Name="camRotation" SizeDim1="2"/>
                <DefineArray Name="aFrustrumNormals" Dimensions="1" SizeDim1="4" SizeDim2="3" Persistent="255">
                  <Values>
<![CDATA[78DA636068D8CF000620BAC11EC1868BC1D8F608360200005C1F08F9]]>
                  </Values>
                </DefineArray>
                <DefineArray Name="aFrustrumNormalsTransformed" Dimensions="1" SizeDim1="4" SizeDim2="3"/>
                <ZExpression Comment="init">
                  <Expression>
<![CDATA[viewAngle = 0.125; // don't touch - this is not dynamic yet, sorry!
viewRatio = tan( viewAngle * 2 * PI );]]>
                  </Expression>
                </ZExpression>
              </Children>
            </Group>
            <DefineArray Name="cubePositions" Dimensions="1" SizeDim1="1000" SizeDim2="3"/>
            <Repeat Comment="fill Cubes">
              <WhileExp>
<![CDATA[//this.Iteration=current iteration nr. Return false to end loop.
int i = this.iteration;

if( i < 1000 ){
  cubePositions[ i, 0 ] =( i -( floor( i / 10.0 )* 10 ))/5 - 1; 
  cubePositions[ i, 1 ] =( floor( i / 10.0 )-( floor( i / 100.0 )*10 ))/5 - 1;
  cubePositions[ i, 2 ] =( floor( i / 100.0 ))/5 - 1;
  return 1; }
else return 0;]]>
              </WhileExp>
            </Repeat>
            <ZExpression Comment="center mouse" Expression="//centerMouse();"/>
            <SpawnModel Model="modelFrustum" SpawnStyle="1"/>
          </OnStart>
          <OnUpdate>
            <ZExpression Comment="update camera">
              <Expression>
<![CDATA[camRotation[ 0 ] += App.MousePosition.X / 4;
camRotation[ 1 ] += App.MousePosition.Y / 4;
//centerMouse();

float dist = 2.5;
App.CameraPosition.X = sin( camRotation[ 0 ] * 2 * PI ) * cos( camRotation[ 1 ] * 2 * PI ) * dist;
App.CameraPosition.Z = cos( camRotation[ 0 ] * 2 * PI ) * cos( camRotation[ 1 ] * 2 * PI ) * dist;
App.CameraPosition.Y = sin( camRotation[ 1 ] * 2 * PI ) * dist;
App.CameraRotation.Y = -1 * camRotation[ 0 ];
App.CameraRotation.X = camRotation[ 1 ];]]>
              </Expression>
            </ZExpression>
            <Group Comment="Keys">
              <Children>
                <KeyPress Comment="Left" Keys="&lt;">
                  <OnPressed>
                    <ZExpression Expression="viewRotation[ 0 ] += App.DeltaTime / 4;"/>
                  </OnPressed>
                </KeyPress>
                <KeyPress Comment="Right" Keys="&gt;">
                  <OnPressed>
                    <ZExpression Expression="viewRotation[ 0 ] -= App.DeltaTime / 4;"/>
                  </OnPressed>
                </KeyPress>
                <KeyPress Comment="Up" Keys="^">
                  <OnPressed>
                    <ZExpression Expression="viewRotation[ 1 ] -= App.DeltaTime / 4;"/>
                  </OnPressed>
                </KeyPress>
                <KeyPress Comment="Down" Keys="_">
                  <OnPressed>
                    <ZExpression Expression="viewRotation[ 1 ] += App.DeltaTime / 4;"/>
                  </OnPressed>
                </KeyPress>
              </Children>
            </Group>
          </OnUpdate>
          <OnRender>
            <UseMaterial Material="matSmooth"/>
            <ZExpression Comment="transform frustrum normals">
              <Expression>
<![CDATA[// Rotate the frustrum plane normals.
for( int i = 0; i < aFrustrumNormals.SizeDim1; ++i ){
  successiveViewRotation( aFrustrumNormals[ i, 0 ], aFrustrumNormals[ i, 1 ], aFrustrumNormals[ i, 2 ]);
  aFrustrumNormalsTransformed[ i, 0 ] = VFCMatrix[ 0, 0, 0 ];
  aFrustrumNormalsTransformed[ i, 1 ] = VFCMatrix[ 0, 1, 0 ];
  aFrustrumNormalsTransformed[ i, 2 ] = VFCMatrix[ 0, 2, 0 ];
}]]>
              </Expression>
            </ZExpression>
            <Repeat Name="rpt_Cubes">
              <OnIteration>
                <Condition Comment="culling">
                  <Expression>
<![CDATA[int c = rpt_Cubes.iteration;
int temp = 0;

// check for all four frustrum planes (no far & near plane for now...)
for( int n = 0; n < 4; ++n )
  temp +=( shortDot( c, n ) <= 0 );  
// transfer properties if cube lies in view frustrum  
if( temp == 4 ){  
  rtg_Cube.Translate.X = cubePositions[ c, 0 ];
  rtg_Cube.Translate.Y = cubePositions[ c, 1 ];
  rtg_Cube.Translate.Z = cubePositions[ c, 2 ];
  return 1;
}
else return 0;]]>
                  </Expression>
                  <OnTrue>
                    <RenderTransformGroup Name="rtg_Cube" Scale="0.08 0.08 0.08">
                      <Children>
                        <RenderMesh Mesh="meshBox"/>
                      </Children>
                    </RenderTransformGroup>
                  </OnTrue>
                </Condition>
              </OnIteration>
              <WhileExp>
<![CDATA[//this.Iteration=current iteration nr. Return false to end loop.
if( this.Iteration < cubePositions.SizeDim1 ) return 1;
else return 0;]]>
              </WhileExp>
            </Repeat>
            <ZExpression Comment="test box">
              <Expression>
<![CDATA[successiveViewRotation( 0, 0, 1.5 );
rtg_TestBox.Translate.X = VFCMatrix[ 0, 0, 0 ];
rtg_TestBox.Translate.Y = VFCMatrix[ 0, 1, 0 ];
rtg_TestBox.Translate.Z = VFCMatrix[ 0, 2, 0 ];]]>
              </Expression>
            </ZExpression>
            <RenderTransformGroup Name="rtg_TestBox" Scale="0.02 0.02 0.02">
              <Children>
                <RenderSetColor Color="1 0 0 1"/>
                <RenderMesh Mesh="meshBox"/>
              </Children>
            </RenderTransformGroup>
            <UseMaterial Material="matSmooth"/>
            <RenderText TextFloatRef="App FpsCounter" X="-1" Y="0.95" Align="1"/>
          </OnRender>
          <Definitions>
            <Mesh Name="meshFrustrum">
              <Producers>
                <MeshBox/>
                <MeshExpression>
                  <Expression>
<![CDATA[//V : current vertex
//N : current normal (turn off AutoNormals when modifying normals)
//C : current color (turn on VertexColors)

if( this.V.Z < 0 ){
  this.V.Z = 0;
  this.V.X = 0;
  this.V.Y = 0;
  //this.C = 1;
  }

if( this.V.Z > 0 ){
  // float ratio = tan( viewAngle * 2 * PI );
  this.V.Z = 1;
  this.V.X *= viewRatio;
  this.V.Y *= viewRatio;
  // this.C = .5;
  // this.C.B = 0;
  }]]>
                  </Expression>
                </MeshExpression>
              </Producers>
            </Mesh>
            <Mesh Name="meshBox">
              <Producers>
                <MeshBox/>
              </Producers>
            </Mesh>
            <Model Name="modelFrustum">
              <OnRender>
                <ZExpression Comment="update rotation">
                  <Expression>
<![CDATA[rtg_FrustrumX.Rotate.Y = viewRotation[ 0 ];
rtg_FrustrumY.Rotate.X = viewRotation[ 1 ];]]>
                  </Expression>
                </ZExpression>
                <RenderTransformGroup Name="rtg_FrustrumX">
                  <Children>
                    <RenderTransformGroup Name="rtg_FrustrumY">
                      <Children>
                        <UseMaterial Material="matWireframe"/>
                        <RenderSetColor Color="0 0 1 1"/>
                        <RenderMesh Mesh="meshFrustrum"/>
                      </Children>
                    </RenderTransformGroup>
                  </Children>
                </RenderTransformGroup>
              </OnRender>
            </Model>
            <Material Name="matWireframe" WireframeWidth="1" Shading="2" Color="1 1 1 1" Light="0" DrawBackFace="255"/>
            <Material Name="matSmooth" Color="0.7529 0.7529 0.7529 1"/>
          </Definitions>
        </AppState>
      </Children>
    </Group>
    <Group Comment="Libraries">
      <Children>
        <Group Comment="Bit Library" Name="BitLibraryGroup">
          <Children>
            <DefineArray Name="Bit" Type="1" SizeDim1="8"/>
            <ZLibrary Comment="Bit Library">
              <Source>
<![CDATA[/*
Small library for converting a bit field into a integer and back.
Convenient for saving memory when dealing with large amounts of booleans and / or 4D boolean Arrays.
Requires a 1D Array called "Bit" to return the values to. Function arguments and results are in big-endian ..
*/

int bit4(int A, int B, int C, int D)
{
  return A*1+
         B*2+
         C*4+
         D*8;
}

int bit8(int A, int B, int C, int D,
         int E, int F, int G, int H)
{
  return A*  1+
         B*  2+
         C*  4+
         D*  8+
         E* 16+
         F* 32+
         G* 64+
         H*128;
}

int bitX(int B)
{
  int V = 0;

  for(--B; B>=0; --B)
  {
    V += Bit[B]*pow(2,B);
  }

  return V;
}

void bitField(int X, int B)
{
  for(--B; B>=0; --B)
  {
    int V = pow(2,B);

    if(X >= V)
    {
      Bit[B] = 1;
      X -= V;
    }
    else Bit[B] = 0;
  }
}]]>
              </Source>
            </ZLibrary>
          </Children>
        </Group>
        <Group Comment="HSV Color Library" Name="HsvColorGroup">
          <Children>
            <DefineArray Name="Color" SizeDim1="3"/>
            <ZLibrary Comment="HSV Library">
              <Source>
<![CDATA[//

float angle(float X)
{
  if(X >= 0 && X < 360)return X;
  if(X > 360)return X-floor(X/360)* 360;
  if(X <   0)return X+floor(X/360)*-360;
}

//

void hsv(float H, float S, float V)
{
  float R,G,B,I,F,P,Q,T;
  
  H = angle(H);
  S = clamp(S,0,100);
  V = clamp(V,0,100);

  H /= 60;
  S /= 100;
  V /= 100;
  
  if(S == 0)
  {
    Color[0] = V;
    Color[1] = V;
    Color[2] = V;
    return;
  }

  I = floor(H);
  F = H-I;

  P = V*(1-S);
  Q = V*(1-S*F);
  T = V*(1-S*(1-F));

  if(I == 0){R = V; G = T; B = P;}
  if(I == 1){R = Q; G = V; B = P;}
  if(I == 2){R = P; G = V; B = T;}
  if(I == 3){R = P; G = Q; B = V;}
  if(I == 4){R = T; G = P; B = V;}
  if(I == 5){R = V; G = P; B = Q;}
  
  Color[0] = R;
  Color[1] = G;
  Color[2] = B;
}]]>
              </Source>
            </ZLibrary>
          </Children>
        </Group>
        <Group Comment="Matrix Library" Name="MatrixLibraryGroup">
          <Children>
            <DefineArray Name="Matrix" Dimensions="2" SizeDim1="6" SizeDim2="3" SizeDim3="3"/>
            <ZLibrary Comment="Matrix Library">
              <Source>
<![CDATA[//

void RotationMatrixX(int K, float Angle)
{
  float C, S;

  C = cos(Angle);
  S = sin(Angle);

  Matrix[K,0,0] = 1;
  Matrix[K,0,1] = 0;
  Matrix[K,0,2] = 0;

  Matrix[K,1,0] = 0;
  Matrix[K,1,1] = C;
  Matrix[K,1,2] = S*-1;

  Matrix[K,2,0] = 0;
  Matrix[K,2,1] = S;
  Matrix[K,2,2] = C;
}

void RotationMatrixY(int K, float Angle)
{
  float C, S;

  C = cos(Angle);
  S = sin(Angle);

  Matrix[K,0,0] = C;
  Matrix[K,0,1] = 0;
  Matrix[K,0,2] = S;

  Matrix[K,1,0] = 0;
  Matrix[K,1,1] = 1;
  Matrix[K,1,2] = 0;

  Matrix[K,2,0] = S*-1;
  Matrix[K,2,1] = 0;
  Matrix[K,2,2] = C;
}

void RotationMatrixZ(int K, float Angle)
{
  float C, S;
  
  C = cos(Angle);
  S = sin(Angle);
  
  Matrix[K,0,0] = C;
  Matrix[K,0,1] = S*-1;
  Matrix[K,0,2] = 0;
  
  Matrix[K,1,0] = S;
  Matrix[K,1,1] = C;
  Matrix[K,1,2] = 0;
  
  Matrix[K,2,0] = 0;
  Matrix[K,2,1] = 0;
  Matrix[K,2,2] = 1;
}

//

void MultiplyMatrix(int K, int A, int B)
{
  Matrix[K,0,0] = Matrix[A,0,0]*Matrix[B,0,0]+Matrix[A,0,1]*Matrix[B,1,0]+Matrix[A,0,2]*Matrix[B,2,0];
  Matrix[K,0,1] = Matrix[A,0,0]*Matrix[B,0,1]+Matrix[A,0,1]*Matrix[B,1,1]+Matrix[A,0,2]*Matrix[B,2,1];
  Matrix[K,0,2] = Matrix[A,0,0]*Matrix[B,0,2]+Matrix[A,0,1]*Matrix[B,1,2]+Matrix[A,0,2]*Matrix[B,2,2];
  
  Matrix[K,1,0] = Matrix[A,1,0]*Matrix[B,0,0]+Matrix[A,1,1]*Matrix[B,1,0]+Matrix[A,1,2]*Matrix[B,2,0];
  Matrix[K,1,1] = Matrix[A,1,0]*Matrix[B,0,1]+Matrix[A,1,1]*Matrix[B,1,1]+Matrix[A,1,2]*Matrix[B,2,1];
  Matrix[K,1,2] = Matrix[A,1,0]*Matrix[B,0,2]+Matrix[A,1,1]*Matrix[B,1,2]+Matrix[A,1,2]*Matrix[B,2,2];

  Matrix[K,2,0] = Matrix[A,2,0]*Matrix[B,0,0]+Matrix[A,2,1]*Matrix[B,1,0]+Matrix[A,2,2]*Matrix[B,2,0];
  Matrix[K,2,1] = Matrix[A,2,0]*Matrix[B,0,1]+Matrix[A,2,1]*Matrix[B,1,1]+Matrix[A,2,2]*Matrix[B,2,1];
  Matrix[K,2,2] = Matrix[A,2,0]*Matrix[B,0,2]+Matrix[A,2,1]*Matrix[B,1,2]+Matrix[A,2,2]*Matrix[B,2,2];
}

//

void Rotate(float VX, float VY, float VZ, float AX, float AY, float AZ)
{
  RotationMatrixX(1,AX);
  RotationMatrixY(2,AY);
  RotationMatrixZ(3,AZ);
  
  MultiplyMatrix(4,1,2);
  MultiplyMatrix(5,4,3);
  
  Matrix[0,0,0] = VX*Matrix[5,0,0]+VY*Matrix[5,0,1]+VZ*Matrix[5,0,2];
  Matrix[0,1,0] = VX*Matrix[5,1,0]+VY*Matrix[5,1,1]+VZ*Matrix[5,1,2];
  Matrix[0,2,0] = VX*Matrix[5,2,0]+VY*Matrix[5,2,1]+VZ*Matrix[5,2,2];
}]]>
              </Source>
            </ZLibrary>
          </Children>
        </Group>
        <Group Comment="Vector Library" Name="VectorLibraryGroup">
          <Children>
            <DefineArray Name="Vector" Dimensions="1" SizeDim1="6" SizeDim2="3"/>
            <ZLibrary Comment="Vector Library">
              <Source>
<![CDATA[//

void Sub(int K,
         float X1, float Y1, float Z1,
         float X2, float Y2, float Z2)
{
  Vector[K,0] = X1-X2;
  Vector[K,1] = Y1-Y2;
  Vector[K,2] = Z1-Z2;
}

//

void Cross(int K,
           float X1, float Y1, float Z1,
           float X2, float Y2, float Z2)
{
  Vector[K,0] = Y1*Z2-Z1*Y2;
  Vector[K,1] = Z1*X2-X1*Z2;
  Vector[K,2] = X1*Y2-Y1*X2;
}

//

float Dot(float X1, float Y1, float Z1,
          float X2, float Y2, float Z2)
{
  return X1*X2+Y1*Y2+Z1*Z2;
}

//

float getLength( float X, float Y, float Z ){
  float length = sqrt( pow( X, 2 ) + pow( Y, 2 ) + pow( Z, 2 ));
  return length;
}

// normalize
void Normalize( int K,
                float X, float Y, float Z ){
  float length = getLength( X, Y, Z );
  if( length == 0 ) return;
  Vector[ K, 0 ] = X / length;
  Vector[ K, 1 ] = Y / length;
  Vector[ K, 2 ] = Z / length;
  }]]>
              </Source>
            </ZLibrary>
          </Children>
        </Group>
      </Children>
    </Group>
    <Group Comment="External libraries">
      <Children>
        <ZExternalLibrary Comment="OpenGL 4.0 graphics" ModuleName="opengl32" DefinitionsFile="opengl.txt">
  <BeforeInitExp>
<![CDATA[if(ANDROID)
  this.ModuleName="libGLESv1_CM.so";]]>
  </BeforeInitExp>
        </ZExternalLibrary>
        <ZExternalLibrary Comment="Bullet 3D physics" ModuleName="ZGEBullet" CallingConvention="1" DefinitionsFile="zgebullet.txt"/>
        <ZExternalLibrary Comment="Bass music player" ModuleName="bass.dll">
          <Source>
<![CDATA[//BASS-dll from http://www.un4seen.com/
int BASS_GetVersion() { }

int BASS_ErrorGetCode() { }

int BASS_Free() { }
int BASS_Stop() { }

int BASS_Init(int device, int freq, int flags, int win, int clsid) { }

int BASS_MusicLoad(int mem, string filename, int of1, int of2, int length, int flags, int freq) { }

int BASS_ChannelPlay(int handle, int restart) { }
int BASS_ChannelGetLevel(int handle) { }]]>
          </Source>
        </ZExternalLibrary>
        <ZExternalLibrary Comment="Box2D physics" ModuleName="Box2DZGE.dll">
          <Source>
<![CDATA[//Box2D physics integration
//Get the DLL from here:
//
//   http://www.emix8.org/forum/viewtopic.php?t=586

// ================== WORLD
// init the world
void b2dll_InitWorld( float aabbxl, float aabbxh, // bounding box x limits
                      float aabbyl, float aabbyh, // bounding box y limits
                      float gx, float gy, // gravity vector (default [ 0, -10 ])
                      int doSleep ){ } // turn off simulation of resting bodies (default on)
// advance the simulation
void b2dll_Step( float timestep, int iterations ){ }
// count bodies
int b2dll_GetBodyCount( ){ }

// ================== BODIES
// create a static box (e.g. ground)
int b2dll_CreateStaticBox( float x, float y,
                           float width, float height ){ }
// create a dynamic box
int b2dll_CreateDynamicBox( float x, float y, // position
                            float width, float height ){ } // dimension
// getters
float b2dll_GetPositionX( int body ){ }
float b2dll_GetPositionY( int body ){ }
float b2dll_GetAngle( int body ){ }]]>
          </Source>
        </ZExternalLibrary>
      </Children>
    </Group>
    <Group Comment="Fonts">
      <Children>
        <Group Name="DinaFontGroup" Comment="Dina">
          <Children>
            <Font Name="DinaFont" Bitmap="DinaBitmap" FirstChar="32" CharPixelWidth="8" CharPixelHeight="16"/>
            <Bitmap Name="DinaBitmap" Comment="Font from http://www.donationcoder.com/Software/Jibz/Dina/index.html" Width="3" Height="3" Filter="1">
              <Producers>
                <BitmapFromFile Transparency="1">
                  <BitmapFile>
<![CDATA[78DAED5DDB96E3200CE3FF7F7AF66DCF9C6930B27C011AF969A64D49A2185F844DC69048241289E42DF2F34BC0837FFF810FFEF91364846628F69EF1FFBF8F57F2F9EDF282ED038EC21F57C29EC7F1792538EC20C8E7E03F9BA48FF3F76722E9F6C7981DAE93CE0E93FEBB9493B03FCBD14E7B04D583FFB9EB6AFB8F18B7D3BC7027FE5BE29FA5A1FB02908DF97E9497CFB263F6C1C1994BF8115BC93FCD4EB5E90323AB443FCED9D88DDA58743D360E2ECD37F09F6994EBABB7E5DDEF71BE1289E48BED18EE2C246D79AB2B2E92D0544C1CFF59724A8CEF4A7E0745A6E1F11B411212D444B5FED7E16F2F88C42968EF1C8FD3B915B4460A7F9BA27B89CA530DDAD5F82FCF5884FF2DFACFADBC18A11AB838FB6709A6E81164017894FE0F3FF1D5B0049912FF544FA52CFF8B78D8A0816AB0EA9D2705D785B3F0C7EB19885BDB5EDDD1A0FF5CF07C54FC7F35FE83E2759BD75FFA53E966FBCF39C7E6F517C999CCCFB1DE3CD1950BFF2B6E53F86FC71FA94B4CF4B0C2BFCDEFBBF29DD95776F18F51D7EA4AA9F038D3F87776FD447D7E29FEAEB411BC129CD705D352BBBE6579523026BC177F6F5ABA7C5E46F15204FF41D5E75F813FC7EBC6F1B727858BF6897FEEE5AB8BEC0F8DFFA3A2DAD5A45EFD373C05E1BE677E0D9C2004FECB7B8FD81F64F014FC47C6BAFFAEF86779BCD728D1F873FA734EFCF3E6DCF304FF2BFC85BFF097ECE27F24122254131AF229C23F328984E15EFD3FFF1120FC39629F91922A90325AAE47CC4E8D132048C083B73947FAEEB3F27DD7E72033839717562C5810F8D37577DCF8DE719078FB55F87BE73B81BF8B076BC0DF360EFDF877EAFF39F6E73BF097FDCFB53FCB602631FEF1AE472CEB2E1092875E2F8BE3D31936A7971B55575C77E60B445C2AFC9B33CAB6063170AAD207B80CF217F70BEC9AD4A28024128944C2C5E79DEB716FF05674F84D34A51A5BB3CEB23C246DA7F97CFC368375B606EF57877F303C23EAEA693EA701FFEA54A2223CF6F24811FCED1D6BC1FE0B425DAFC31FD7A514FC87A7FF221DFFA2B72A80C630B2FE5B8DFF58EDBF9D62C641FC830E258BCFA7F1AFE8BF08CE0BD7DD7D37FEF66DBA0C51A26B8EECB37DF27A16DD7FC1297C965FF6E2EFB2E759C7EFC29F88FF89B848E46A5628C82565C23F8BFFE1FAFD2512894422915CE4F7BDFDE3AEF8DF3829BDBF8777FF1FEF38E075D2EB2359FCB3972F0D76DAD2F59FCD75F5F8E7C1E75B5166BC0BFF7EFD8CD7F1DE823FC2639C807F90CFF1DA557C7CD77E6E2EFC233BA2180072F66724EDAB56A4FFA07921F4DF85BF519FC0BD7758F8BBECCF0CFFACBE0C6EDFA493E31F047F504F1EF704E3F607C3FB471AE2FF94B8DD7BA90D7D6DE24B2512894422919C268A4C4E7804BB9E3BD76FEE8A6F893E77049FE538B8AA2FA740B01FD64BCF8EBC82F3B1A38FC0F815817FBC453A8EFFA8E91349E7F3D30D4BD1FB37973432DDF1B4B45717E1EFEA63F2CEC4E16F61589AE2A5CD89BC6733B8EF4A9B5376191357E5B0EB2B57EF4CF0A5E134AFBBFC3C45FF6D83F3F855CA0B6B3E870A1A8A745E7DE97F73ED7F1BFF8F3B1A6E0A14EDF75514FF2C4DB177EA8171FBD2FE2F437722EFA8E0DB7BB6BB9174E6B912894422915CEDDDD2399F6552702F383DE3B7ED4E59340297F4E13C7C967635E0EF852225E08FE3FFB86F06B26340D6456665BE41FCAB8D00B29FBC412E75E24F90BD771961702B98D97E4A0DFA8F932D7B1F41B5FD6FA0C5B8BAD3E07CEFC7DFEE53B3DFE7DE89FF5EFD1F65EB9888FF9D1DD96C7F76D9FFEDF8DF1BFFEC7A04F624F56E31140FFBBFE3FDB0CDF837E4A1D76D329F32DFFBEF2E52DAF42A424682C83F99AF58DD]]>
                  </BitmapFile>
                </BitmapFromFile>
              </Producers>
            </Bitmap>
            <Material Name="DinaMaterial" Shading="1" Light="0" Font="DinaFont"/>
          </Children>
        </Group> <!-- DinaFontGroup -->

      </Children>
    </Group>
    <ZExpression Comment="Authors and Credits">
      <Expression>
<![CDATA[/*

Authors:
Kjell         (http://www.emix8.org/forum/profile.php?mode=viewprofile&u=55)
jph_wacheski  (http://www.emix8.org/forum/profile.php?mode=viewprofile&u=54)
Kattle87      (http://www.emix8.org/forum/profile.php?mode=viewprofile&u=47)
y offs et     (http://www.emix8.org/forum/profile.php?mode=viewprofile&u=80)
diki          (http://www.emix8.org/forum/profile.php?mode=viewprofile&u=67)

Code:
Bitmaps
  Anti-Aliased Circle (http://www.emix8.org/forum/viewtopic.php?t=137) Kjell
  Bricks (http://www.emix8.org/forum/viewtopic.php?t=347) Kattle87
  Dithering (http://www.emix8.org/forum/viewtopic.php?t=541) Kjell
  Polygon Bitmap (http://www.emix8.org/forum/viewtopic.php?t=561) diki
Meshes
  Better looking Spheres (http://www.emix8.org/forum/viewtopic.php?t=204) Kattle87
  Capsule (http://www.emix8.org/forum/viewtopic.php?p=2966#2966) Kjell
  Cylinder (http://www.emix8.org/forum/viewtopic.php?p=1629#1629) Kattle87
Models
  Ring from Cubes (http://www.emix8.org/forum/viewtopic.php?t=205) jph_wacheski
  Zwidget (http://www.emix8.org/forum/viewtopic.php?t=576) y offs et
Examples
  2D Culling (http://www.emix8.org/forum/viewtopic.php?t=491) Kjell
  GLSL Fog (http://www.emix8.org/forum/viewtopic.php?t=412) jph_wacheski
  Input Method (http://www.emix8.org/forum/viewtopic.php?t=331) Kjell
  Proportional Font (http://www.emix8.org/forum/viewtopic.php?t=551) Kjell
  RayCast (http://www.emix8.org/forum/viewtopic.php?t=392) Kjell
  Trails (http://www.emix8.org/forum/viewtopic.php?t=348) Kjell
  View Frustrum Culling (http://www.emix8.org/forum/viewtopic.php?t=513) diki
Libraries
  Bit Library (http://www.emix8.org/forum/viewtopic.php?t=532) Kjell
  HSV Color Library (http://www.emix8.org/forum/viewtopic.php?t=557) Kjell
  Matrix Library (http://www.emix8.org/forum/viewtopic.php?t=389) Kjell
  Vector Library (http://www.emix8.org/forum/viewtopic.php?t=392) Kjell

*/]]>
      </Expression>
    </ZExpression>
  </Content>
</ZApplication>

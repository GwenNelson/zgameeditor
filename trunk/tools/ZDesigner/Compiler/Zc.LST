
Listing
-------
0 errors and 38 warnings
*****  Warning: LL1 warning in ZcFuncBody:"model" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"string" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"const" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"xptr" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"int" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Font" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Camera" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"float" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sample" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"if" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"@" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"return" is start & successor of deletable structure
*****  Warning: LL1 warning in EmbeddedStatement:"else" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"null" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"continue" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"while" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"switch" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"break" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"for" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:dec is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:ident is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lbrace is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:inc is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:intCon is start & successor of deletable structure
*****  Warning: LL1 warning in Zc: contents of [...] or {...} must not be deletable
*****  Warning: LL1 warning in ZcFuncBody:stringCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:realCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lpar is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Shader" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sound" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Mesh" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Bitmap" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:not is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:minus is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Material" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:scolon is start & successor of deletable structure
**************************
    1  COMPILER Zc
    2  
    3  FRAME "delphi.frm"
    4  
    5  uses = (. Zc_Ops, Contnrs, uSymTab, ZClasses, Compiler, SysUtils, ZExpressions .)
    6  
    7  public = (.
    8      ZFunctions : TObjectList;
    9      SymTab : TSymbolTable;
   10      ReturnType : TZcDataType;
   11      AllowFunctions : boolean;
   12      GlobalNames : TObjectList;
   13      TempCounter : integer;
   14      destructor Destroy; override;
   15      procedure CheckHomograph(var sym: Integer); override;
   16  .)
   17  private = (.
   18      IsInIdent,IsInInvokeArg : boolean;
   19      CurrentFunction : TZcOpFunctionUserDefined;
   20      procedure CleanUp;
   21      procedure ZError(const S : string);
   22      procedure AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   23      function MakeTempName : string;
   24      procedure OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   25      .)
   26  precreate = (.
   27      ZFunctions := TObjectList.Create(False);
   28      Self.OnError := OnParserError;
   29  .)
   30  
   31  semErrors = (.
   32      200 : Result := 'Not a floating point value';
   33      201 : Result := 'Name already defined in this scope';
   34      202 : Result := 'Return value expected';
   35      203 : Result := 'Function should not return a value';
   36      204 : Result := 'Only function definitions are allowed here';
   37      205 : Result := 'Syntax not supported';
   38  .)
   39  
   40  implementation = (.
   41  
   42  procedure TZc.OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   43  begin
   44    ZError(Msg + ' ' + Data);
   45  end;
   46  
   47  procedure TZc.CheckHomograph(var sym: Integer);
   48  begin
   49    //Only Homographs are name of component datatypes
   50    //If inside identifier "x.y.z" then let it refer to identifier instead
   51    if IsInIdent or IsInInvokeArg then
   52      sym := identSym;
   53  end;
   54  
   55  destructor TZc.Destroy;
   56  begin
   57    inherited;
   58    CleanUp;
   59  end;
   60  
   61  procedure TZc.AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   62  begin
   63    if Op=nil then
   64    begin
   65      if SwitchOp.HasDefault then
   66        ZError('Only one default statement is allowed.');
   67      SwitchOp.HasDefault := True;
   68    end else
   69      Op := MakeCompatible(Op,SwitchOp.ValueOp.GetDataType);
   70    SwitchOp.CaseOps.Last.Children.Add( Op );
   71    Op := nil;
   72  end;
   73  
   74  procedure TZc.CleanUp;
   75  begin
   76    Zc_Ops.FunctionCleanUps.Clear;
   77    ZFunctions.Free;
   78  end;
   79  
   80  function TZc.MakeTempName : string;
   81  begin
   82    Inc(TempCounter);
   83    Result := '#temp' + IntToStr(TempCounter);
   84  end;
   85  
   86  procedure TZc.ZError(const S : string);
   87  var
   88    E : EParseError;
   89    P : TSymbolRec;
   90  begin
   91    E := EParseError.Create(S);
   92    E.Message := S;
   93    Scanner.GetPosition(P);
   94    E.Line := P.Line;
   95    E.Col := P.Col;
   96    raise E;
   97  end;
   98  
   99  .)
  100  
  101  END
  102  
  103  
  104  CHARACTERS
  105  
  106          tab                = CHR(9). /*  9 = tabulator */
  107          eol                = CHR(10). /* 10 = line feed */
  108          cr                 = CHR(13). /* 13 = carriage return */
  109          newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
  110  
  111          letter             = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  112          digit              = "0123456789".
  113          hexDigit           = digit + "ABCDEFabcdef".
  114          notDigit           = ANY - digit.
  115  
  116          char               = ANY - "'" - '\' - newLine.
  117          verbatimStringChar = ANY - '"'.
  118          regularStringChar  = ANY - '"' - '\' - newLine.
  119          notNewLine         = ANY - newLine .
  120  
  121  
  122  TOKENS
  123  
  124    /*--------------------------------------------------------------------------------*/
  125          intCon =
  126                  ( digit {digit}
  127                  | ("0x" | "0X") hexDigit {hexDigit}
  128                  )
  129                  /* ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"] */
  130                  .
  131    /*--------------------------------------------------------------------------------*/
  132          realCon =
  133                  "." digit {digit}
  134                  [("e" | "E") ["+" | "-"] digit {digit}]
  135                  ["F" | "f" | "D" | "d" | "M" | "m"]
  136          | digit {digit}
  137                  ( "." digit {digit}
  138                          [("e" | "E" ) ["+" | "-"] digit {digit} ]
  139                          ["F" | "f" | "D" | "d" | "M" | "m"]
  140                  | ("e" | "E") ["+" | "-"] digit {digit}
  141                          ["F" | "f" | "D" | "d" | "M" | "m"]
  142                  | "F" | "f" | "D" | "d" | "M" | "m"
  143                  ).
  144    /*--------------------------------------------------------------------------------*/
  145          stringCon =
  146                  '"'    { regularStringChar
  147            | "\'" | '\"' | "\\" | "\n"
  148            }
  149                  '"'.
  150  
  151          ident = letter { letter | digit }.
  152  
  153  
  154          /*----- operators and special characters needed in LL(1) resolvers --------------*/
  155          and    = "&".
  156          assgn  = "=".
  157          colon  = ":".
  158          comma  = ",".
  159          dec    = "--".
  160          div    = "/".
  161          dot    = ".".
  162          eq     = "==".
  163          gt     = ">".
  164          gte    = ">=".
  165          inc    = "++".
  166          lbrace = "{".
  167          lbrack = "[".
  168          lpar   = "(".
  169          lshift = "<<".
  170          lt     = "<".
  171          lte    = "<=".
  172          minus  = "-".
  173          mod    = "%".
  174          neq    = "!=".
  175          not    = "!".
  176          or     = "|".
  177          plus   = "+".
  178          rbrace = "}".
  179          rbrack = "]".
  180          rpar   = ")".
  181          rshift = ">>".
  182          scolon = ";".
  183          tilde  = "~".
  184          times  = "*".
  185          xor    = "^".
  186  
  187  
  188  
  189  COMMENTS FROM "/*" TO "*/"
  190  COMMENTS FROM "//" TO eol
  191  
  192  IGNORE eol + cr + tab
  193  
  194  HOMOGRAPHS
  195    "Material"
  196    "Sound"
  197    "Shader" 
  198    "Bitmap" 
  199    "Mesh"
  200    "Camera" 
  201    "Font"
  202    "Sample"
  203  
  204  
  205  PRODUCTIONS
  206  
  207  /*------------------------------------------------------------------------*
  208   *--------------------------- Declarations -------------------------------*
  209   *------------------------------------------------------------------------*/
  210  
  211  Zc (. var
  212          Func : TZcOpFunctionUserDefined;
  213          Typ : TZcDataType;
  214      .)
  215  =
  216    IF (. AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  217    {
  218      ConstantDeclaration
  219      |
  220      ("void" (. Typ.Kind := zctVoid; .) | Type<Typ> ) ident (.
  221            if SymTab.Contains(LexString) then
  222              ZError('Name already defined: ' + LexString);
  223  
  224            Func := TZcOpFunctionUserDefined.Create(GlobalNames);
  225            Func.Id := LexString;
  226            Func.ReturnType := Typ;
  227            SymTab.Add(Func.Id,Func);
  228            ZFunctions.Add(Func);
  229            Self.CurrentFunction := Func;
  230            SymTab.PushScope;
  231            try
  232         .)
  233      "(" [ FormalParams ] ")" "{" ZcFuncBody "}"
  234          (.
  235            finally
  236              SymTab.PopScope;
  237            end;
  238          .)
  239    }
  240    | IF (. not AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  241    {
  242  
  243    (.
  244         Func := TZcOpFunctionUserDefined.Create(nil);
  245         Func.ReturnType := Self.ReturnType;
  246         Self.CurrentFunction := Func;
  247         try
  248           SymTab.PushScope;
  249           try
  250             ZFunctions.Add(Func);
  251    .)
  252    /* A zc-expression is treated like the body of a nameless function
  253       to allow local var declarations  */
  254  
  255    ZcFuncBody
  256    (.
  257           finally
  258             SymTab.PopScope;
  259           end;
  260         except on E: Exception do
  261           ZError(E.Message);
  262         end;
  263    .)
  264    }
  265  
  266  .
  267  
  268  /*------------------------------------------------------------------------*/
  269  
  270  ZcFuncBody (. var Op : TZcOp; .)
  271  =  {  (. Op:=nil; .)
  272        Statement<Op>
  273        (. if Op<>nil then
  274             CurrentFunction.Statements.Add(Op);
  275           Op := nil;
  276        .)
  277     }
  278  .
  279  
  280  /*------------------------------------------------------------------------*/
  281  FormalParams                    
  282  = ( Par ["," FormalParams] )
  283  .
  284  /*------------------------------------------------------------------------*/
  285  Par (.
  286  var
  287    Typ : TZcDataType;
  288    Arg : TZcOpArgumentVar;
  289    IsPtr : boolean;
  290  .)
  291  =  (. IsPtr := False; .)
  292    ["ref" (. IsPtr := True; .) ]
  293    Type<Typ> ident
  294       (.
  295          Typ.IsPointer := IsPtr;
  296          if SymTab.ScopeContains(LexString) then
  297            SynError(201)
  298          else
  299          begin
  300            Arg := TZcOpArgumentVar.Create(GlobalNames);
  301            Arg.Id := LexString;
  302            Arg.Typ := Typ;
  303            CurrentFunction.AddArgument(Arg);
  304            SymTab.Add(Arg.Id,Arg);
  305          end;
  306       .)
  307  .
  308  /*------------------------------------------------------------------------*/
  309  
  310  LocalVarDecl<var OutOp : TZcOp> (. var Typ : TZcDataType; .)
  311  = (. OutOp := nil; .)
  312    Type<Typ> LocalVar<Typ,OutOp> {"," LocalVar<Typ,OutOp>}
  313  .
  314  
  315  /*------------------------------------------------------------------------*/
  316  
  317  LocalVar<Typ : TZcDataType; var OutOp : TZcOp> (. var Loc : TZcOpLocalVar; InitOp : TZcOp; .)
  318  = ident
  319       (. 
  320          if SymTab.ScopeContains(LexString) then
  321            ZError('Name already defined: ' + LexString);
  322  
  323          Loc := TZcOpLocalVar.Create(nil);
  324          Loc.Id := LexString;
  325          Loc.Typ := Typ;
  326       .)
  327       [ "=" Init<InitOp> (. Loc.InitExpression:=InitOp; .) ]
  328       (.
  329          SymTab.Add(Loc.Id,Loc);
  330          CurrentFunction.AddLocal(Loc);
  331  
  332          if Assigned(Loc.InitExpression) then
  333          begin
  334            //Generate tree for initial assignment
  335            if OutOp=nil then
  336              OutOp := MakeOp(zcBlock);
  337            OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),Loc.InitExpression) );
  338          end;
  339          
  340       .)
  341  .
  342  
  343  /*------------------------------------------------------------------------*/
  344  
  345  Init<var OutOp : TZcOp>
  346  = Expr<OutOp>
  347  .
  348  
  349  /*------------------------------------------------------------------------*/
  350  Argument<var OutOp : TZcOp>
  351  = /* ["ref" | "out"] */
  352    (. OutOp := nil; .)
  353    Expr<OutOp>
  354    (. if OutOp=nil then ZError('Missing argument'); .)
  355  .
  356  
  357  /*------------------------------------------------------------------------*
  358   *-------------------------------- Types ---------------------------------*
  359   *------------------------------------------------------------------------*/
  360  
  361  /* Attribute "type" is needed for error messages in EmbeddedStatement     *
  362   * and for array creation expressions                                     */
  363  
  364  
  365  Type<var Typ : TZcDataType>
  366  =  (. FillChar(Typ,SizeOf(Typ),0); .)
  367    ( SimpleType<Typ> )
  368  .
  369  
  370  /*------------------------------------------------------------------------*/
  371  
  372  SimpleType<var Typ : TZcDataType>
  373  /* = IntType | "float" | "double" | "decimal" | "bool" */
  374  = "float" (. Typ.Kind := zctFloat; .)
  375    | "int" (. Typ.Kind := zctInt; .)
  376    | "string" (. Typ.Kind := zctString; .)
  377    | "model" (. Typ.Kind := zctModel; .)
  378    | "xptr" (. Typ.Kind := zctXptr; .)
  379  
  380    /* Changes below also must be made in homographs-section */
  381    | "Material" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MaterialClassId; .)
  382    | "Sound" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SoundClassId; .)
  383    | "Shader" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ShaderClassId; .)
  384    | "Bitmap" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZBitmapClassId; .)
  385    | "Mesh" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MeshClassId; .)
  386    | "Camera" (. Typ.Kind := zctReference; Typ.ReferenceClassId := CameraClassId; .)
  387    | "Font" (. Typ.Kind := zctReference; Typ.ReferenceClassId := FontClassId; .)
  388    | "Sample" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SampleClassId; .)
  389  .
  390  
  391  /*------------------------------------------------------------------------*/
  392  
  393  /* IntType
  394  = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
  395  . */
  396  
  397  
  398  ConstantDeclaration
  399  (.
  400  var
  401    Cns : TDefineConstant;
  402    Typ : TZcDataType;
  403    Op : TZcOp;
  404    Lit : TZcOpLiteral;
  405    CnsName : string;
  406  .)
  407  =
  408  "const" Type<Typ> ident (. CnsName := LexString; .)"=" Expr<Op>
  409    (.
  410     Op := Op.Optimize;
  411     if not (Op is TZcOpLiteral) then
  412       ZError('Constant expression expected: ' + Op.ToString);
  413  
  414     Lit := Op as TZcOpLiteral;
  415  
  416     if Lit.Typ.Kind<>Typ.Kind then
  417       ZError('Constant expression is not of the expected type: ' + Op.ToString);
  418  
  419     Cns := TDefineConstant.Create(nil);
  420     Cns.SetString('Name',AnsiString(CnsName));
  421     GlobalNames.Add(Cns);
  422  
  423     case Typ.Kind of
  424       zctInt:
  425         begin
  426           Cns._Type := dvbInt;
  427           Cns.IntValue := Round(Lit.Value);
  428         end;
  429       zctFloat:
  430         begin
  431           Cns._Type := dvbFloat;
  432           Cns.Value := Lit.Value;
  433         end;
  434       zctString:
  435         begin
  436           Cns._Type := dvbString;
  437           Cns.SetString('StringValue',AnsiString(Lit.StringValue));
  438         end;
  439       else
  440         ZError('Wrong type of constant expression: ' + GetZcTypeName(Typ));
  441     end;
  442     SymTab.Add(CnsName,Cns);
  443    .)
  444  /* {"," ident "=" Expr<Op>} */
  445    ";"
  446  .
  447  
  448  /*------------------------------------------------------------------------*
  449   *------------------------------ Statements ------------------------------*
  450   *------------------------------------------------------------------------*/
  451  
  452  Statement<var OutOp : TZcOp>
  453  = (. OutOp := nil; .)
  454  
  455  ConstantDeclaration
  456  
  457  /*IF IsLocalVarDecl THEN
  458  BEGIN
  459    LocalVarDecl ";"
  460  END
  461  |  EmbeddedStatement<OutOp> */
  462  
  463  | LocalVarDecl<OutOp> ";"
  464  | EmbeddedStatement<OutOp>
  465    /* LL(1) confict between LocalVarDecl and StatementExpr: *
  466     * ident {"." ident} { "[" ...                           */
  467  .
  468  
  469  /*------------------------------------------------------------------------*/
  470  EmbeddedStatement<var OutOp : TZcOp>
  471    (. var
  472         SwitchValueOp,Op,IfOp,IfBody,ElseOp : TZcOp;
  473         ForInitOp,ForCondOp,ForIncOp,ForBodyOp : TZcOp;
  474         WhileCondOp,WhileBodyOp : TZcOp;
  475         SwitchOp : TZcOpSwitch;
  476         Loc : TZcOpLocalVar;
  477    .)
  478  = Block<OutOp>
  479  | ";"   (. OutOp := MakeOp(zcNop); .)
  480  | StatementExpr<OutOp> ";"
  481  | "if" (. ElseOp := nil; .)
  482    "(" Expr<IfOp> ")" EmbeddedStatement<IfBody> ["else" EmbeddedStatement<ElseOp>]
  483          (. OutOp := MakeOp(zcIf,[IfOp,IfBody,ElseOp]); .)
  484   | "switch" "(" Expr<SwitchValueOp> ")"
  485        (.
  486           Loc := TZcOpLocalVar.Create(nil);
  487           Loc.Id := MakeTempName;
  488           Loc.Typ := SwitchValueOp.GetDataType;
  489           SymTab.Add(Loc.Id,Loc);
  490           CurrentFunction.AddLocal(Loc);
  491  
  492           OutOp := MakeOp(zcBlock);
  493           OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),SwitchValueOp) );
  494  
  495           SwitchOp := TZcOpSwitch.Create(nil);
  496           SwitchOp.ValueOp := MakeIdentifier(Loc.Id);
  497           OutOp.Children.Add(SwitchOp);
  498        .)
  499     "{" {
  500       (. SwitchOp.CaseOps.Add( MakeOp(zcNop) ); SwitchOp.StatementsOps.Add( MakeOp(zcNop) ); .)
  501       SwitchSection<SwitchOp>
  502     } "}"
  503   | "while"
  504       (. try
  505           SymTab.PushScope;
  506           WhileCondOp := nil; WhileBodyOp := nil; .)
  507     "(" Expr<WhileCondOp> ")" EmbeddedStatement<WhileBodyOp>
  508     (.
  509           OutOp := MakeOp(zcWhile,[WhileCondOp,WhileBodyOp]);
  510         finally
  511           SymTab.PopScope;
  512         end;
  513     .)
  514   /* | "do" EmbeddedStatement<Op> "while" "(" Expr<Op> ")" ";" */
  515   | "for"
  516      (. try
  517           SymTab.PushScope;
  518           ForInitOp :=nil; ForCondOp := nil; ForIncOp := nil; .)
  519     "(" [ForInit<ForInitOp>] ";" [Expr<ForCondOp>] ";" [ForInc<ForIncOp>] ")" EmbeddedStatement<ForBodyOp>
  520     (.
  521           OutOp := MakeOp(zcForLoop,[ForInitOp,ForCondOp,ForIncOp,ForBodyOp]);
  522         finally
  523           SymTab.PopScope;
  524         end;
  525     .)
  526  /* | "foreach" "(" Type ident "in" Expr<Op> ")" EmbeddedStatement<Op> */
  527   | "break" ";"    (. OutOp := MakeOp(zcBreak); .)
  528   | "continue" ";" (. OutOp := MakeOp(zcContinue); .)
  529   | (. Op := nil; .) "return" [ Expr<Op> ] ";"
  530      (.
  531          if (Op=nil) then
  532          begin
  533            if CurrentFunction.ReturnType.Kind<>zctVoid then
  534              SynError(202)
  535            else
  536              OutOp := MakeOp(zcReturn);
  537          end else
  538          begin
  539            if CurrentFunction.ReturnType.Kind=zctVoid then
  540              SynError(203)
  541            else
  542              OutOp := MakeOp(zcReturn,[ MakeCompatible(Op,CurrentFunction.ReturnType) ]);
  543          end;
  544      .)
  545  .
  546  /*------------------------------------------------------------------------*/
  547  
  548  Block<var OutOp : TZcOp>
  549    (. var
  550         Op : TZcOp;
  551    .)
  552  = (. Op := nil;
  553       OutOp := MakeOp(zcBlock);
  554    .)
  555    "{" {Statement<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) } "}".
  556  
  557  /*------------------------------------------------------------------------*/
  558  StatementExpr<var OutOp : TZcOp>           (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  559  = (. Op1 :=nil; Op2 := nil; .)
  560    Unary<Op1>
  561    ( AssignOp<Kind> Expr<Op2>
  562      (.
  563        if Op2<>nil then
  564          OutOp := MakeAssign(Kind,Op1,Op2);
  565      .)
  566    |                             (. OutOp := Op1; .)
  567    )
  568  .
  569  
  570  /*------------------------------------------------------------------------*/
  571  AssignOp<var Kind : TZcAssignType>
  572  = "="     (. Kind := atAssign; .)
  573    | "+="  (. Kind := atPlusAssign; .)
  574    | "-="  (. Kind := atMinusAssign; .)
  575    | "*="  (. Kind := atMulAssign; .)
  576    | "/="  (. Kind := atDivAssign; .)
  577  /*  | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" */
  578  .
  579  
  580  /*------------------------------------------------------------------------*/
  581  
  582  SwitchSection<SwitchOp : TZcOpSwitch> (. var Op : TZcOp; .)
  583  = (. Op := nil; .)
  584    SwitchLabel<Op>   (. AddSwitchLabel(SwitchOp,Op); .)
  585    {
  586      SwitchLabel<Op> (. AddSwitchLabel(SwitchOp,Op); .)
  587    }
  588    Statement<Op>    (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  589    {
  590       Statement<Op> (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  591    }
  592  .
  593  
  594  /*------------------------------------------------------------------------*/
  595  
  596  SwitchLabel<var OutOp : TZcOp>
  597  = "case" Expr<OutOp> ":"
  598  | "default" ":"
  599  .
  600  
  601  /*------------------------------------------------------------------------*/
  602  
  603  ForInit<var OutOp : TZcOp>     (. var Op : TZcOp; .)
  604  = (. Op:=nil; OutOp := MakeOp(zcBlock); .)
  605  (
  606  LocalVarDecl<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  607  | (. Op:=nil; .) StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  608    { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  609  )
  610  .  
  611  
  612  /*------------------------------------------------------------------------*/
  613  
  614  ForInc<var OutOp : TZcOp>      (. var Op : TZcOp; .)
  615  = (. Op:=nil; 
  616       OutOp := MakeOp(zcBlock);
  617    .) 
  618  (
  619  StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) 
  620  { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  621  )
  622  . 
  623  
  624  
  625  /*------------------------------------------------------------------------*
  626   *----------------------------- Expressions ------------------------------*
  627   *------------------------------------------------------------------------*/
  628  
  629  
  630  Expr<var OutOp : TZcOp>   (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  631  = (. Op1 :=nil; Op2 := nil; .)
  632    Unary<Op1>
  633    ( OrExpr<Op1,OutOp>
  634        ["?" Expr<Op1> ":" Expr<Op2>
  635           (. if (OutOp=nil) or (Op1=nil) or (Op2=nil) then
  636                SynError(205)
  637              else
  638                OutOp := MakeOp(zcConditional,[OutOp,Op1,Op2]);
  639           .)
  640        ]
  641    | AssignOp<Kind> Expr<Op2>    (. OutOp := MakeAssign(Kind,Op1, Op2); .)
  642    )
  643  .
  644  /*------------------------------------------------------------------------*/
  645  OrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  646  = AndExpr<InOp,OutOp>   (. L := OutOp; .)
  647      {"||" Unary<Op> AndExpr<Op,R>
  648        (. OutOp := MakeOp(zcOr,[L,R]);
  649           L := OutOp; .)
  650      }
  651  .
  652  
  653  
  654  /*------------------------------------------------------------------------*/
  655  AndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  656  = BitOrExpr<InOp,OutOp>  (. L := OutOp; .)
  657      {"&&" Unary<Op> BitOrExpr<Op,R>
  658        (. OutOp := MakeOp(zcAnd,[L,R]);
  659           L := OutOp; .)
  660      }
  661  .
  662  /*------------------------------------------------------------------------*/
  663  BitOrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  664  = BitXorExpr<InOp,OutOp> (. L := OutOp; .)
  665    {"|" Unary<Op> BitXorExpr<Op,R>
  666      (. OutOp := MakeOp(zcBinaryOr,[L,R]);
  667         L := OutOp; .)
  668    }
  669  .
  670  
  671  /*------------------------------------------------------------------------*/
  672  BitXorExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  673  = BitAndExpr<InOp,OutOp> (. L := OutOp; .)
  674    {"^" Unary<Op> BitAndExpr<Op,R>
  675      (. OutOp := MakeOp(zcBinaryXor,[L,R]);
  676         L := OutOp; .)
  677    }
  678  .
  679  
  680  /*------------------------------------------------------------------------*/
  681  BitAndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  682  = EqlExpr<InOp,OutOp> (. L := OutOp; .)
  683    {"&" Unary<Op> EqlExpr<Op,R>
  684      (. OutOp := MakeOp(zcBinaryAnd,[L,R]);
  685         L := OutOp; .)
  686    }
  687  .
  688  
  689  /*------------------------------------------------------------------------*/
  690  EqlExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  691  = RelExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  692    {( "!="   (. Kind := zcCompNE; .)
  693     | "=="   (. Kind := zcCompEQ; .)
  694     )
  695     Unary<Op> RelExpr<Op,R>
  696           (. OutOp := MakeBinary(Kind, L,R);
  697              L := OutOp;
  698           .)
  699    }
  700  .
  701  /*------------------------------------------------------------------------*/
  702  RelExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind; .)
  703  = ShiftExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  704    { ( "<"       (. Kind := zcCompLT; .)
  705      | ">"       (. Kind := zcCompGT; .)
  706      | "<="      (. Kind := zcCompLE; .)
  707      | ">="      (. Kind := zcCompGE; .)
  708       )
  709      Unary<Op> ShiftExpr<Op,R>
  710           (. OutOp := MakeBinary(Kind, L,R );
  711              L := OutOp;
  712           .)
  713    }
  714  .
  715  /*------------------------------------------------------------------------*/
  716  ShiftExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  717  = AddExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  718    { ("<<"  (. Kind := zcBinaryShiftL; .)
  719      | ">>" (. Kind := zcBinaryShiftR; .)
  720      )
  721      Unary<Op> AddExpr<Op,R>
  722      (. OutOp := MakeOp(Kind,[L,R]);
  723         L := OutOp; .)
  724    }
  725  .
  726  /*------------------------------------------------------------------------*/
  727  AddExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind;.)
  728  = MulExpr<InOp,OutOp>   (. L := OutOp; Kind := zcNop; .)
  729      {( "+"    (. Kind := zcPlus; .)
  730       | "-"    (. Kind := zcMinus; .)
  731       ) Unary<Op> MulExpr<Op,R>
  732           (. 
  733              if (L=nil) or (R=nil) then
  734                ZError('Invalid syntax');
  735              OutOp := MakeBinary(Kind,L,R);
  736              L := OutOp;
  737           .)
  738      }
  739  .
  740  /*------------------------------------------------------------------------*/
  741  MulExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Tmp : TZcOp; Kind : TZcOpKind; .)
  742  = (. OutOp := InOp; Kind := zcNop; .)
  743    { ("*"      (. Kind := zcMul; .)
  744      | "/"     (. Kind := zcDiv; .)
  745    /*  | "%" */
  746      ) Unary<Tmp>
  747           (. OutOp := MakeBinary(Kind,InOp,Tmp);
  748              InOp := OutOp;
  749           .)
  750      }
  751  .
  752  /*------------------------------------------------------------------------*/
  753  Unary<var OutOp : TZcOp>         (. var LastOp,Tmp : TZcOp; Kind : TZcOpKind; .)
  754  =       (. LastOp := nil; Kind := zcNop; .)
  755    {
  756      (
  757        /* "+" | */
  758        "-"   (. Kind := zcNegate; .) |
  759        "++"  (. Kind := zcPreInc; .) |    
  760        "--"  (. Kind := zcPreDec; .) |
  761        "!"   (. Kind := zcNot; .)
  762        /* | "~" | "*" */
  763      )
  764      (.
  765         if Kind in [zcNegate,zcNot] then
  766         begin
  767           Tmp := MakeOp(Kind);
  768           if LastOp<>nil then
  769             LastOp.Children.Add(Tmp);
  770           LastOp := Tmp;
  771         end else if Assigned(LastOp) then
  772           ZError('-- and ++ cannot be combined with other unary ops');
  773      .)
  774    }
  775    Primary<Tmp>
  776      (.
  777         if Kind in [zcNop,zcNegate,zcNot] then
  778         begin
  779           if LastOp<>nil then
  780           begin
  781             LastOp.Children.Add(Tmp);
  782             OutOp := LastOp;
  783           end else
  784             OutOp := Tmp;
  785         end else
  786         begin
  787           OutOp := MakePrePostIncDec(Kind,Tmp);
  788         end;
  789      .)
  790  .
  791  
  792  
  793  
  794  /*------------------------------------------------------------------------*/
  795  InvokeArgument<var OutOp : TZcOp; Ci : TZComponentInfo>
  796  (.
  797    var
  798      Op : TZcOp;
  799      Prop : TZProperty;
  800  .)
  801  = (. OutOp := nil; Op := nil; .)
  802    ident (.
  803      Prop := Ci.GetProperties.GetByName(LexString);
  804      if Prop=nil then
  805        ZError(LexString + ' is not a property of ' + Ci.ZClassName);
  806      if not (Prop.PropertyType in [zptFloat,zptInteger,zptByte,zptBoolean,zptString,zptComponentRef]) then
  807        ZError(LexString + ' property of ' + Ci.ZClassName + ' is of a datatype that cannot be set using inline component invokation syntax');
  808      OutOp := MakeOp(zcIdentifier);
  809      OutOp.Id := LexString;
  810    .)
  811    ":" Expr<Op>
  812    (. if Op=nil then
  813         ZError('Missing argument');
  814       Op := MakeCompatible(Op, PropTypeToZType(Prop.PropertyType));
  815       OutOp.Children.Add(Op);
  816    .)
  817  .
  818  
  819  
  820  
  821  /*------------------------------------------------------------------------*/
  822  Primary<var OutOp : TZcOp>
  823  (. var Op : TZcOp; S : string; V : single;
  824       Typ : TZcDataType;
  825       Ci : TZComponentInfo;
  826  .)
  827  =            (. OutOp := nil; .)
  828    (
  829      ident    (. OutOp := CheckPrimary( MakeIdentifier(LexString) );  .)
  830    | "@" ident (.
  831         Ci := ComponentManager.GetInfoFromName(LexString);
  832         if not Ci.ZClass.InheritsFrom(TCommand) then
  833           ZError('Class must inherit TCommand: ' + LexString);
  834         OutOp := TZcOpInvokeComponent.Create(nil);
  835         OutOp.Id := LexString;
  836      .)
  837      "(" (. IsInInvokeArg := True; .)
  838          [InvokeArgument<Op,Ci>       (. OutOp.Children.Add(Op); .)
  839            {"," InvokeArgument<Op,Ci> (. OutOp.Children.Add(Op); .)
  840            }
  841          ]
  842      ")" (. IsInInvokeArg := False; .)
  843    | Literal<Typ>  (.
  844          if Typ.Kind in [zctString,zctNull] then
  845            OutOp := TZcOpLiteral.Create(Typ.Kind,LexString)
  846          else
  847          begin
  848            try
  849              S := LexString;
  850              V := ZcStrToFloat(S);
  851              OutOp := TZcOpLiteral.Create(Typ.Kind,V)
  852            except on EConvertError do
  853              SynError(200);
  854            end;
  855          end;
  856       .)
  857    | "(" Expr<OutOp> ")"
  858  /*  | ( "bool"   | "byte"   | "char" | "decimal" | "double"
  859      | "float"  | "int"    | "long" | "object"  | "sbyte"
  860      | "short"  | "string" | "uint" | "ulong"   | "ushort"
  861      ) "." ident */
  862    )
  863  
  864    {
  865    "++" (. OutOp := MakePrePostIncDec(zcPostInc,OutOp); .)
  866    | "--" (. OutOp := MakePrePostIncDec(zcPostDec,OutOp); .)
  867  
  868  /*  | "->" ident */
  869  
  870    | "." (. IsInIdent := True; .) ident (.
  871  
  872        if not (OutOp.Kind in [zcIdentifier,zcSelect,zcFuncCall,zcArrayAccess]) then
  873          ZError('Invalid use of "."');
  874  
  875        Op := MakeOp(zcSelect,LexString);
  876        Op.Children.Add(OutOp);
  877  
  878        OutOp := CheckPrimary(Op);
  879  
  880        IsInIdent := False;
  881  
  882      .)
  883  
  884    | "(" (. Assert(OutOp.Kind=zcIdentifier);
  885             OutOp.Kind:=zcFuncCall;
  886           .)
  887          [Argument<Op> (. OutOp.Children.Add(Op); .)
  888            {"," Argument<Op> (. OutOp.Children.Add(Op); .)
  889            }
  890          ]
  891          (.
  892             if not VerifyFunctionCall(OutOp,S) then
  893               ZError(S);
  894          .)
  895      ")"
  896  
  897    | "[" (. Assert(OutOp.Kind=zcIdentifier);
  898             OutOp.Kind:=zcArrayAccess;
  899           .)
  900      Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .)
  901        {"," Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .) }
  902      "]"
  903  
  904    }
  905  .
  906  /*------------------------------------------------------------------------*/
  907  Literal<var Typ : TZcDataType>
  908  = intCon (. Typ.Kind :=zctInt; .) |
  909    realCon (. Typ.Kind := zctFloat; .) |
  910    stringCon (. Typ.Kind := zctString; .)
  911    | "null" (. Typ.Kind := zctNull; .)
  912    /* | "true" | "false"  */
  913  .
  914  
  915  END Zc.




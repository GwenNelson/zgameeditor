
Listing
-------
0 errors and 39 warnings
*****  Warning: LL1 warning in ZcFuncBody:"xptr" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"model" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"if" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"const" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"string" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sample" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Font" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"int" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"float" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"switch" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"@" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"reinterpret_cast" is start & successor of deletable structure
*****  Warning: LL1 warning in EmbeddedStatement:"else" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"null" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"return" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"for" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"while" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"continue" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"break" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Camera" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:dec is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:ident is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lbrace is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:inc is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:intCon is start & successor of deletable structure
*****  Warning: LL1 warning in Zc: contents of [...] or {...} must not be deletable
*****  Warning: LL1 warning in ZcFuncBody:stringCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:realCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lpar is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Shader" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sound" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Mesh" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Bitmap" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:not is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:minus is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Material" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:scolon is start & successor of deletable structure
**************************
    1  COMPILER Zc
    2  
    3  FRAME "delphi.frm"
    4  
    5  uses = (. Zc_Ops, Contnrs, uSymTab, ZClasses, Compiler, SysUtils, ZExpressions .)
    6  
    7  public = (.
    8      ZFunctions : TObjectList;
    9      SymTab : TSymbolTable;
   10      ReturnType : TZcDataType;
   11      AllowFunctions : boolean;
   12      GlobalNames : TObjectList;
   13      TempCounter : integer;
   14      destructor Destroy; override;
   15      procedure CheckHomograph(var sym: Integer); override;
   16  .)
   17  private = (.
   18      IsInIdent,IsInInvokeArg : boolean;
   19      CurrentFunction : TZcOpFunctionUserDefined;
   20      procedure CleanUp;
   21      procedure ZError(const S : string);
   22      procedure AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   23      function MakeTempName : string;
   24      procedure OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   25      .)
   26  precreate = (.
   27      ZFunctions := TObjectList.Create(False);
   28      Self.OnError := OnParserError;
   29  .)
   30  
   31  semErrors = (.
   32      200 : Result := 'Not a floating point value';
   33      201 : Result := 'Name already defined in this scope';
   34      202 : Result := 'Return value expected';
   35      203 : Result := 'Function should not return a value';
   36      204 : Result := 'Only function definitions are allowed here';
   37      205 : Result := 'Syntax not supported';
   38  .)
   39  
   40  implementation = (.
   41  
   42  procedure TZc.OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   43  begin
   44    ZError(Msg + ' ' + Data);
   45  end;
   46  
   47  procedure TZc.CheckHomograph(var sym: Integer);
   48  begin
   49    //Only Homographs are name of component datatypes
   50    //If inside identifier "x.y.z" then let it refer to identifier instead
   51    if IsInIdent or IsInInvokeArg then
   52      sym := identSym;
   53  end;
   54  
   55  destructor TZc.Destroy;
   56  begin
   57    inherited;
   58    CleanUp;
   59  end;
   60  
   61  procedure TZc.AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   62  begin
   63    if Op=nil then
   64    begin
   65      if SwitchOp.HasDefault then
   66        ZError('Only one default statement is allowed.');
   67      SwitchOp.HasDefault := True;
   68    end else
   69      Op := MakeCompatible(Op,SwitchOp.ValueOp.GetDataType);
   70    SwitchOp.CaseOps.Last.Children.Add( Op );
   71    Op := nil;
   72  end;
   73  
   74  procedure TZc.CleanUp;
   75  begin
   76    Zc_Ops.FunctionCleanUps.Clear;
   77    ZFunctions.Free;
   78  end;
   79  
   80  function TZc.MakeTempName : string;
   81  begin
   82    Inc(TempCounter);
   83    Result := '#temp' + IntToStr(TempCounter);
   84  end;
   85  
   86  procedure TZc.ZError(const S : string);
   87  var
   88    E : EParseError;
   89    P : TSymbolRec;
   90  begin
   91    E := EParseError.Create(S);
   92    E.Message := S;
   93    Scanner.GetPosition(P);
   94    E.Line := P.Line;
   95    E.Col := P.Col;
   96    if (E.Line<>0) or (E.Col<>0) then
   97      E.Message := E.Message + ' (line: ' + IntToStr(E.Line) + ', col: ' + IntToStr(E.Col) + ')';
   98    raise E;
   99  end;
  100  
  101  .)
  102  
  103  END
  104  
  105  
  106  CHARACTERS
  107  
  108          tab                = CHR(9). /*  9 = tabulator */
  109          eol                = CHR(10). /* 10 = line feed */
  110          cr                 = CHR(13). /* 13 = carriage return */
  111          newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
  112  
  113          letter             = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  114          digit              = "0123456789".
  115          hexDigit           = digit + "ABCDEFabcdef".
  116          notDigit           = ANY - digit.
  117  
  118          char               = ANY - "'" - '\' - newLine.
  119          verbatimStringChar = ANY - '"'.
  120          regularStringChar  = ANY - '"' - '\' - newLine.
  121          notNewLine         = ANY - newLine .
  122  
  123  
  124  TOKENS
  125  
  126    /*--------------------------------------------------------------------------------*/
  127          intCon =
  128                  ( digit {digit}
  129                  | ("0x" | "0X") hexDigit {hexDigit}
  130                  )
  131                  /* ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"] */
  132                  .
  133    /*--------------------------------------------------------------------------------*/
  134          realCon =
  135                  "." digit {digit}
  136                  [("e" | "E") ["+" | "-"] digit {digit}]
  137                  ["F" | "f" | "D" | "d" | "M" | "m"]
  138          | digit {digit}
  139                  ( "." digit {digit}
  140                          [("e" | "E" ) ["+" | "-"] digit {digit} ]
  141                          ["F" | "f" | "D" | "d" | "M" | "m"]
  142                  | ("e" | "E") ["+" | "-"] digit {digit}
  143                          ["F" | "f" | "D" | "d" | "M" | "m"]
  144                  | "F" | "f" | "D" | "d" | "M" | "m"
  145                  ).
  146    /*--------------------------------------------------------------------------------*/
  147          stringCon =
  148                  '"'    { regularStringChar
  149            | "\'" | '\"' | "\\" | "\n"
  150            }
  151                  '"'.
  152  
  153          ident = letter { letter | digit }.
  154  
  155  
  156          /*----- operators and special characters needed in LL(1) resolvers --------------*/
  157          and    = "&".
  158          assgn  = "=".
  159          colon  = ":".
  160          comma  = ",".
  161          dec    = "--".
  162          div    = "/".
  163          dot    = ".".
  164          eq     = "==".
  165          gt     = ">".
  166          gte    = ">=".
  167          inc    = "++".
  168          lbrace = "{".
  169          lbrack = "[".
  170          lpar   = "(".
  171          lshift = "<<".
  172          lt     = "<".
  173          lte    = "<=".
  174          minus  = "-".
  175          mod    = "%".
  176          neq    = "!=".
  177          not    = "!".
  178          or     = "|".
  179          plus   = "+".
  180          rbrace = "}".
  181          rbrack = "]".
  182          rpar   = ")".
  183          rshift = ">>".
  184          scolon = ";".
  185          tilde  = "~".
  186          times  = "*".
  187          xor    = "^".
  188  
  189  
  190  
  191  COMMENTS FROM "/*" TO "*/"
  192  COMMENTS FROM "//" TO eol
  193  
  194  IGNORE eol + cr + tab
  195  
  196  HOMOGRAPHS
  197    "Material"
  198    "Sound"
  199    "Shader" 
  200    "Bitmap" 
  201    "Mesh"
  202    "Camera" 
  203    "Font"
  204    "Sample"
  205  
  206  
  207  PRODUCTIONS
  208  
  209  /*------------------------------------------------------------------------*
  210   *--------------------------- Declarations -------------------------------*
  211   *------------------------------------------------------------------------*/
  212  
  213  Zc (. var
  214          Func : TZcOpFunctionUserDefined;
  215          Typ : TZcDataType;
  216      .)
  217  =
  218    IF (. AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  219    {
  220      ConstantDeclarationList
  221      |
  222      ("void" (. Typ.Kind := zctVoid; .) | Type<Typ> ) ident (.
  223            if SymTab.Contains(LexString) then
  224              ZError('Name already defined: ' + LexString);
  225  
  226            Func := TZcOpFunctionUserDefined.Create(GlobalNames);
  227            Func.Id := LexString;
  228            Func.ReturnType := Typ;
  229            SymTab.Add(Func.Id,Func);
  230            ZFunctions.Add(Func);
  231            Self.CurrentFunction := Func;
  232            SymTab.PushScope;
  233            try
  234         .)
  235      "(" [ FormalParams ] ")" "{" ZcFuncBody "}"
  236          (.
  237            finally
  238              SymTab.PopScope;
  239            end;
  240          .)
  241    }
  242    | IF (. not AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  243    {
  244  
  245    (.
  246         Func := TZcOpFunctionUserDefined.Create(nil);
  247         Func.ReturnType := Self.ReturnType;
  248         Self.CurrentFunction := Func;
  249         try
  250           SymTab.PushScope;
  251           try
  252             ZFunctions.Add(Func);
  253    .)
  254    /* A zc-expression is treated like the body of a nameless function
  255       to allow local var declarations  */
  256  
  257    ZcFuncBody
  258    (.
  259           finally
  260             SymTab.PopScope;
  261           end;
  262         except on E: Exception do
  263           ZError(E.Message);
  264         end;
  265    .)
  266    }
  267  
  268  .
  269  
  270  /*------------------------------------------------------------------------*/
  271  
  272  ZcFuncBody (. var Op : TZcOp; .)
  273  =  {  (. Op:=nil; .)
  274        Statement<Op>
  275        (. if Op<>nil then
  276             CurrentFunction.Statements.Add(Op);
  277           Op := nil;
  278        .)
  279     }
  280  .
  281  
  282  /*------------------------------------------------------------------------*/
  283  FormalParams                    
  284  = ( Par ["," FormalParams] )
  285  .
  286  /*------------------------------------------------------------------------*/
  287  Par (.
  288  var
  289    Typ : TZcDataType;
  290    Arg : TZcOpArgumentVar;
  291    IsPtr : boolean;
  292  .)
  293  =  (. IsPtr := False; .)
  294    ["ref" (. IsPtr := True; .) ]
  295    Type<Typ> ident
  296       (.
  297          Typ.IsPointer := IsPtr;
  298          if SymTab.ScopeContains(LexString) then
  299            SynError(201)
  300          else
  301          begin
  302            Arg := TZcOpArgumentVar.Create;
  303            Arg.Id := LexString;
  304            Arg.Typ := Typ;
  305            CurrentFunction.AddArgument(Arg);
  306            SymTab.Add(Arg.Id,Arg);
  307          end;
  308       .)
  309  .
  310  /*------------------------------------------------------------------------*/
  311  
  312  LocalVarDecl<var OutOp : TZcOp> (. var Typ : TZcDataType; .)
  313  = (. OutOp := nil; .)
  314    Type<Typ> LocalVar<Typ,OutOp> {"," LocalVar<Typ,OutOp>}
  315  .
  316  
  317  /*------------------------------------------------------------------------*/
  318  
  319  LocalVar<Typ : TZcDataType; var OutOp : TZcOp> (. var Loc : TZcOpLocalVar; InitOp : TZcOp; .)
  320  = ident
  321       (. 
  322          if SymTab.ScopeContains(LexString) then
  323            ZError('Name already defined: ' + LexString);
  324  
  325          Loc := TZcOpLocalVar.Create(nil);
  326          Loc.Id := LexString;
  327          Loc.Typ := Typ;
  328       .)
  329       [ "=" Init<InitOp> (. Loc.InitExpression:=InitOp; .) ]
  330       (.
  331          SymTab.Add(Loc.Id,Loc);
  332          CurrentFunction.AddLocal(Loc);
  333  
  334          if Assigned(Loc.InitExpression) then
  335          begin
  336            //Generate tree for initial assignment
  337            if OutOp=nil then
  338              OutOp := MakeOp(zcBlock);
  339            OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),Loc.InitExpression) );
  340          end;
  341          
  342       .)
  343  .
  344  
  345  /*------------------------------------------------------------------------*/
  346  
  347  Init<var OutOp : TZcOp>
  348  = Expr<OutOp>
  349  .
  350  
  351  /*------------------------------------------------------------------------*/
  352  Argument<var OutOp : TZcOp>
  353  = /* ["ref" | "out"] */
  354    (. OutOp := nil; .)
  355    Expr<OutOp>
  356    (. if OutOp=nil then ZError('Missing argument'); .)
  357  .
  358  
  359  /*------------------------------------------------------------------------*
  360   *-------------------------------- Types ---------------------------------*
  361   *------------------------------------------------------------------------*/
  362  
  363  /* Attribute "type" is needed for error messages in EmbeddedStatement     *
  364   * and for array creation expressions                                     */
  365  
  366  
  367  Type<var Typ : TZcDataType>
  368  (.
  369    var
  370      A : TDefineArray;
  371  .)
  372  =  (. FillChar(Typ,SizeOf(Typ),0); .)
  373    ( SimpleType<Typ> )
  374    {
  375      (
  376        "["       (.
  377                     A := TDefineArray.Create(nil);
  378                     GlobalNames.Add(A);
  379                     A._Type := ZTypeToVarType(Typ.Kind);
  380                     Typ.Kind := zctArray;
  381                     Typ.TheArray := A;
  382                  .)
  383           [ intCon (. A.SizeDim1 := StrToInt(LexString); .) ]
  384           { ","  (. if A.Dimensions=High(TArrayDimensions) then ZError('Too many array dimensions'); Inc(A.Dimensions); .)
  385             [ intCon (. if (A.Dimensions=dadTwo) then A.SizeDim2 := StrToInt(LexString) else A.SizeDim3 := StrToInt(LexString);
  386             .) ]
  387           }
  388         "]"
  389      )
  390    }
  391  .
  392  
  393  /*------------------------------------------------------------------------*/
  394  
  395  SimpleType<var Typ : TZcDataType>
  396  /* = IntType | "float" | "double" | "decimal" | "bool" */
  397  = "float" (. Typ.Kind := zctFloat; .)
  398    | "int" (. Typ.Kind := zctInt; .)
  399    | "string" (. Typ.Kind := zctString; .)
  400    | "model" (. Typ.Kind := zctModel; .)
  401    | "xptr" (. Typ.Kind := zctXptr; .)
  402  
  403    /* Changes below also must be made in homographs-section */
  404    | "Material" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MaterialClassId; .)
  405    | "Sound" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SoundClassId; .)
  406    | "Shader" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ShaderClassId; .)
  407    | "Bitmap" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZBitmapClassId; .)
  408    | "Mesh" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MeshClassId; .)
  409    | "Camera" (. Typ.Kind := zctReference; Typ.ReferenceClassId := CameraClassId; .)
  410    | "Font" (. Typ.Kind := zctReference; Typ.ReferenceClassId := FontClassId; .)
  411    | "Sample" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SampleClassId; .)
  412  .
  413  
  414  /*------------------------------------------------------------------------*/
  415  
  416  /* IntType
  417  = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
  418  . */
  419  
  420  
  421  ConstantDeclarationList
  422  (.
  423  var
  424    Typ : TZcDataType;
  425  .)
  426  = "const" Type<Typ> ConstantDeclaration<Typ> {"," ConstantDeclaration<Typ> }
  427    ";"
  428  .
  429  
  430  ConstantDeclaration<var Typ : TZcDataType>
  431  (.
  432  var
  433    Cns : TDefineConstant;
  434    Op : TZcOp;
  435    Lit : TZcOpLiteral;
  436    CnsName : string;
  437  .)
  438  =
  439  ident (. CnsName := LexString; .) "=" Expr<Op>
  440    (.
  441     Op := Op.Optimize;
  442     if not (Op is TZcOpLiteral) then
  443       ZError('Constant expression expected: ' + Op.ToString);
  444  
  445     Lit := Op as TZcOpLiteral;
  446  
  447     if Lit.Typ.Kind<>Typ.Kind then
  448       ZError('Constant expression is not of the expected type: ' + Op.ToString);
  449  
  450     Cns := TDefineConstant.Create(nil);
  451     Cns.SetString('Name',AnsiString(CnsName));
  452     GlobalNames.Add(Cns);
  453  
  454     case Typ.Kind of
  455       zctInt:
  456         begin
  457           Cns._Type := dvbInt;
  458           Cns.IntValue := Round(Lit.Value);
  459         end;
  460       zctFloat:
  461         begin
  462           Cns._Type := dvbFloat;
  463           Cns.Value := Lit.Value;
  464         end;
  465       zctString:
  466         begin
  467           Cns._Type := dvbString;
  468           Cns.SetString('StringValue',AnsiString(Lit.StringValue));
  469         end;
  470       else
  471         ZError('Wrong type of constant expression: ' + GetZcTypeName(Typ));
  472     end;
  473     SymTab.Add(CnsName,Cns);
  474    .)
  475  /* {"," ident "=" Expr<Op>} */
  476  .
  477  
  478  /*------------------------------------------------------------------------*
  479   *------------------------------ Statements ------------------------------*
  480   *------------------------------------------------------------------------*/
  481  
  482  Statement<var OutOp : TZcOp>
  483  = (. OutOp := nil; .)
  484  
  485  ConstantDeclarationList
  486  
  487  /*IF IsLocalVarDecl THEN
  488  BEGIN
  489    LocalVarDecl ";"
  490  END
  491  |  EmbeddedStatement<OutOp> */
  492  
  493  | LocalVarDecl<OutOp> ";"
  494  | EmbeddedStatement<OutOp>
  495    /* LL(1) confict between LocalVarDecl and StatementExpr: *
  496     * ident {"." ident} { "[" ...                           */
  497  .
  498  
  499  /*------------------------------------------------------------------------*/
  500  EmbeddedStatement<var OutOp : TZcOp>
  501    (. var
  502         SwitchValueOp,Op,IfOp,IfBody,ElseOp : TZcOp;
  503         ForInitOp,ForCondOp,ForIncOp,ForBodyOp : TZcOp;
  504         WhileCondOp,WhileBodyOp : TZcOp;
  505         SwitchOp : TZcOpSwitch;
  506         Loc : TZcOpLocalVar;
  507    .)
  508  = Block<OutOp>
  509  | ";"   (. OutOp := MakeOp(zcNop); .)
  510  | StatementExpr<OutOp> ";"
  511  | "if" (. ElseOp := nil; .)
  512    "(" Expr<IfOp> ")" EmbeddedStatement<IfBody> ["else" EmbeddedStatement<ElseOp>]
  513          (. OutOp := MakeOp(zcIf,[IfOp,IfBody,ElseOp]); .)
  514   | "switch" "(" Expr<SwitchValueOp> ")"
  515        (.
  516           Loc := TZcOpLocalVar.Create(nil);
  517           Loc.Id := MakeTempName;
  518           Loc.Typ := SwitchValueOp.GetDataType;
  519           SymTab.Add(Loc.Id,Loc);
  520           CurrentFunction.AddLocal(Loc);
  521  
  522           OutOp := MakeOp(zcBlock);
  523           OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),SwitchValueOp) );
  524  
  525           SwitchOp := TZcOpSwitch.Create(nil);
  526           SwitchOp.ValueOp := MakeIdentifier(Loc.Id);
  527           OutOp.Children.Add(SwitchOp);
  528        .)
  529     "{" {
  530       (. SwitchOp.CaseOps.Add( MakeOp(zcNop) ); SwitchOp.StatementsOps.Add( MakeOp(zcNop) ); .)
  531       SwitchSection<SwitchOp>
  532     } "}"
  533   | "while"
  534       (. try
  535           SymTab.PushScope;
  536           WhileCondOp := nil; WhileBodyOp := nil; .)
  537     "(" Expr<WhileCondOp> ")" EmbeddedStatement<WhileBodyOp>
  538     (.
  539           OutOp := MakeOp(zcWhile,[WhileCondOp,WhileBodyOp]);
  540         finally
  541           SymTab.PopScope;
  542         end;
  543     .)
  544   /* | "do" EmbeddedStatement<Op> "while" "(" Expr<Op> ")" ";" */
  545   | "for"
  546      (. try
  547           SymTab.PushScope;
  548           ForInitOp :=nil; ForCondOp := nil; ForIncOp := nil; .)
  549     "(" [ForInit<ForInitOp>] ";" [Expr<ForCondOp>] ";" [ForInc<ForIncOp>] ")" EmbeddedStatement<ForBodyOp>
  550     (.
  551           OutOp := MakeOp(zcForLoop,[ForInitOp,ForCondOp,ForIncOp,ForBodyOp]);
  552         finally
  553           SymTab.PopScope;
  554         end;
  555     .)
  556  /* | "foreach" "(" Type ident "in" Expr<Op> ")" EmbeddedStatement<Op> */
  557   | "break" ";"    (. OutOp := MakeOp(zcBreak); .)
  558   | "continue" ";" (. OutOp := MakeOp(zcContinue); .)
  559   | (. Op := nil; .) "return" [ Expr<Op> ] ";"
  560      (.
  561          if (Op=nil) then
  562          begin
  563            if CurrentFunction.ReturnType.Kind<>zctVoid then
  564              SynError(202)
  565            else
  566              OutOp := MakeOp(zcReturn);
  567          end else
  568          begin
  569            if CurrentFunction.ReturnType.Kind=zctVoid then
  570              SynError(203)
  571            else
  572              OutOp := MakeOp(zcReturn,[ MakeCompatible(Op,CurrentFunction.ReturnType) ]);
  573          end;
  574      .)
  575  .
  576  /*------------------------------------------------------------------------*/
  577  
  578  Block<var OutOp : TZcOp>
  579    (. var
  580         Op : TZcOp;
  581    .)
  582  = (. Op := nil;
  583       OutOp := MakeOp(zcBlock);
  584    .)
  585    "{" {Statement<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) } "}".
  586  
  587  /*------------------------------------------------------------------------*/
  588  StatementExpr<var OutOp : TZcOp>           (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  589  = (. Op1 :=nil; Op2 := nil; .)
  590    Unary<Op1>
  591    ( AssignOp<Kind> Expr<Op2>
  592      (.
  593        if Op2<>nil then
  594          OutOp := MakeAssign(Kind,Op1,Op2);
  595      .)
  596    |                             (. OutOp := Op1; .)
  597    )
  598  .
  599  
  600  /*------------------------------------------------------------------------*/
  601  AssignOp<var Kind : TZcAssignType>
  602  = "="     (. Kind := atAssign; .)
  603    | "+="  (. Kind := atPlusAssign; .)
  604    | "-="  (. Kind := atMinusAssign; .)
  605    | "*="  (. Kind := atMulAssign; .)
  606    | "/="  (. Kind := atDivAssign; .)
  607  /*  | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" */
  608  .
  609  
  610  /*------------------------------------------------------------------------*/
  611  
  612  SwitchSection<SwitchOp : TZcOpSwitch> (. var Op : TZcOp; .)
  613  = (. Op := nil; .)
  614    SwitchLabel<Op>   (. AddSwitchLabel(SwitchOp,Op); .)
  615    {
  616      SwitchLabel<Op> (. AddSwitchLabel(SwitchOp,Op); .)
  617    }
  618    Statement<Op>    (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  619    {
  620       Statement<Op> (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  621    }
  622  .
  623  
  624  /*------------------------------------------------------------------------*/
  625  
  626  SwitchLabel<var OutOp : TZcOp>
  627  = "case" Expr<OutOp> ":"
  628  | "default" ":"
  629  .
  630  
  631  /*------------------------------------------------------------------------*/
  632  
  633  ForInit<var OutOp : TZcOp>     (. var Op : TZcOp; .)
  634  = (. Op:=nil; OutOp := MakeOp(zcBlock); .)
  635  (
  636  LocalVarDecl<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  637  | (. Op:=nil; .) StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  638    { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  639  )
  640  .  
  641  
  642  /*------------------------------------------------------------------------*/
  643  
  644  ForInc<var OutOp : TZcOp>      (. var Op : TZcOp; .)
  645  = (. Op:=nil; 
  646       OutOp := MakeOp(zcBlock);
  647    .) 
  648  (
  649  StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) 
  650  { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  651  )
  652  . 
  653  
  654  
  655  /*------------------------------------------------------------------------*
  656   *----------------------------- Expressions ------------------------------*
  657   *------------------------------------------------------------------------*/
  658  
  659  
  660  Expr<var OutOp : TZcOp>   (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  661  = (. Op1 :=nil; Op2 := nil; .)
  662    Unary<Op1>
  663    ( OrExpr<Op1,OutOp>
  664        ["?" Expr<Op1> ":" Expr<Op2>
  665           (. if (OutOp=nil) or (Op1=nil) or (Op2=nil) then
  666                SynError(205)
  667              else
  668                OutOp := MakeOp(zcConditional,[OutOp,Op1, MakeCompatible(Op2,Op1.GetDataType) ]);
  669           .)
  670        ]
  671    | AssignOp<Kind> Expr<Op2>    (. OutOp := MakeAssign(Kind,Op1, Op2); .)
  672    )
  673  .
  674  /*------------------------------------------------------------------------*/
  675  OrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  676  = AndExpr<InOp,OutOp>   (. L := OutOp; .)
  677      {"||" Unary<Op> AndExpr<Op,R>
  678        (. OutOp := MakeOp(zcOr,[L,R]);
  679           L := OutOp; .)
  680      }
  681  .
  682  
  683  
  684  /*------------------------------------------------------------------------*/
  685  AndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  686  = BitOrExpr<InOp,OutOp>  (. L := OutOp; .)
  687      {"&&" Unary<Op> BitOrExpr<Op,R>
  688        (. OutOp := MakeOp(zcAnd,[L,R]);
  689           L := OutOp; .)
  690      }
  691  .
  692  /*------------------------------------------------------------------------*/
  693  BitOrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  694  = BitXorExpr<InOp,OutOp> (. L := OutOp; .)
  695    {"|" Unary<Op> BitXorExpr<Op,R>
  696      (. OutOp := MakeOp(zcBinaryOr,[L,R]);
  697         L := OutOp; .)
  698    }
  699  .
  700  
  701  /*------------------------------------------------------------------------*/
  702  BitXorExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  703  = BitAndExpr<InOp,OutOp> (. L := OutOp; .)
  704    {"^" Unary<Op> BitAndExpr<Op,R>
  705      (. OutOp := MakeOp(zcBinaryXor,[L,R]);
  706         L := OutOp; .)
  707    }
  708  .
  709  
  710  /*------------------------------------------------------------------------*/
  711  BitAndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  712  = EqlExpr<InOp,OutOp> (. L := OutOp; .)
  713    {"&" Unary<Op> EqlExpr<Op,R>
  714      (. OutOp := MakeOp(zcBinaryAnd,[L,R]);
  715         L := OutOp; .)
  716    }
  717  .
  718  
  719  /*------------------------------------------------------------------------*/
  720  EqlExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  721  = RelExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  722    {( "!="   (. Kind := zcCompNE; .)
  723     | "=="   (. Kind := zcCompEQ; .)
  724     )
  725     Unary<Op> RelExpr<Op,R>
  726           (. OutOp := MakeBinary(Kind, L,R);
  727              L := OutOp;
  728           .)
  729    }
  730  .
  731  /*------------------------------------------------------------------------*/
  732  RelExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind; .)
  733  = ShiftExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  734    { ( "<"       (. Kind := zcCompLT; .)
  735      | ">"       (. Kind := zcCompGT; .)
  736      | "<="      (. Kind := zcCompLE; .)
  737      | ">="      (. Kind := zcCompGE; .)
  738       )
  739      Unary<Op> ShiftExpr<Op,R>
  740           (. OutOp := MakeBinary(Kind, L,R );
  741              L := OutOp;
  742           .)
  743    }
  744  .
  745  /*------------------------------------------------------------------------*/
  746  ShiftExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  747  = AddExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  748    { ("<<"  (. Kind := zcBinaryShiftL; .)
  749      | ">>" (. Kind := zcBinaryShiftR; .)
  750      )
  751      Unary<Op> AddExpr<Op,R>
  752      (. OutOp := MakeOp(Kind,[L,R]);
  753         L := OutOp; .)
  754    }
  755  .
  756  /*------------------------------------------------------------------------*/
  757  AddExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind;.)
  758  = MulExpr<InOp,OutOp>   (. L := OutOp; Kind := zcNop; .)
  759      {( "+"    (. Kind := zcPlus; .)
  760       | "-"    (. Kind := zcMinus; .)
  761       ) Unary<Op> MulExpr<Op,R>
  762           (. 
  763              if (L=nil) or (R=nil) then
  764                ZError('Invalid syntax');
  765              OutOp := MakeBinary(Kind,L,R);
  766              L := OutOp;
  767           .)
  768      }
  769  .
  770  /*------------------------------------------------------------------------*/
  771  MulExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Tmp : TZcOp; Kind : TZcOpKind; .)
  772  = (. OutOp := InOp; Kind := zcNop; .)
  773    { ("*"      (. Kind := zcMul; .)
  774      | "/"     (. Kind := zcDiv; .)
  775      | "%"     (. Kind := zcMod; .)
  776      ) Unary<Tmp>
  777           (. OutOp := MakeBinary(Kind,InOp,Tmp);
  778              InOp := OutOp;
  779           .)
  780      }
  781  .
  782  /*------------------------------------------------------------------------*/
  783  Unary<var OutOp : TZcOp>         (. var LastOp,Tmp : TZcOp; Kind : TZcOpKind; .)
  784  =       (. LastOp := nil; Kind := zcNop; .)
  785    {
  786      (
  787        /* "+" | */
  788        "-"   (. Kind := zcNegate; .) |
  789        "++"  (. Kind := zcPreInc; .) |    
  790        "--"  (. Kind := zcPreDec; .) |
  791        "!"   (. Kind := zcNot; .)
  792        /* | "~" | "*" */
  793      )
  794      (.
  795         if Kind in [zcNegate,zcNot] then
  796         begin
  797           Tmp := MakeOp(Kind);
  798           if LastOp<>nil then
  799             LastOp.Children.Add(Tmp);
  800           LastOp := Tmp;
  801         end else if Assigned(LastOp) then
  802           ZError('-- and ++ cannot be combined with other unary ops');
  803      .)
  804    }
  805    Primary<Tmp>
  806      (.
  807         if Kind in [zcNop,zcNegate,zcNot] then
  808         begin
  809           if LastOp<>nil then
  810           begin
  811             LastOp.Children.Add(Tmp);
  812             OutOp := LastOp;
  813           end else
  814             OutOp := Tmp;
  815         end else
  816         begin
  817           OutOp := MakePrePostIncDec(Kind,Tmp);
  818         end;
  819      .)
  820  .
  821  
  822  
  823  
  824  /*------------------------------------------------------------------------*/
  825  InvokeArgument<var OutOp : TZcOp; Ci : TZComponentInfo>
  826  (.
  827    var
  828      Op : TZcOp;
  829      Prop : TZProperty;
  830  .)
  831  = (. OutOp := nil; Op := nil; .)
  832    ident (.
  833      Prop := Ci.GetProperties.GetByName(LexString);
  834      if Prop=nil then
  835        ZError(LexString + ' is not a property of ' + Ci.ZClassName);
  836      if not (Prop.PropertyType in [zptFloat,zptInteger,zptByte,zptBoolean,zptString,zptComponentRef]) then
  837        ZError(LexString + ' property of ' + Ci.ZClassName + ' is of a datatype that cannot be set using inline component invokation syntax');
  838      OutOp := MakeOp(zcIdentifier);
  839      OutOp.Id := LexString;
  840    .)
  841    ":" Expr<Op>
  842    (. if Op=nil then
  843         ZError('Missing argument');
  844       Op := MakeCompatible(Op, PropTypeToZType(Prop.PropertyType));
  845       OutOp.Children.Add(Op);
  846    .)
  847  .
  848  
  849  
  850  /*------------------------------------------------------------------------*/
  851  ReinterpretCast<var OutOp : TZcOp>
  852  (.
  853  var
  854    Op : TZcOp;
  855    Typ : TZcDataType;
  856  .)
  857  = "reinterpret_cast" "<" SimpleType<Typ> ">"
  858    "(" Expr<Op> ")"
  859    (.
  860       OutOp := TZcOpReinterpretCast.Create(nil);
  861       OutOp.Children.Add(Op);
  862       (OutOp as TZcOpReinterpretCast).Typ := Typ;
  863    .)
  864  .
  865  
  866  /*------------------------------------------------------------------------*/
  867  Primary<var OutOp : TZcOp>
  868  (. var Op : TZcOp; S : string; V : double;
  869       Typ : TZcDataType;
  870       Ci : TZComponentInfo;
  871  .)
  872  =            (. OutOp := nil; .)
  873    (
  874      ident    (. OutOp := CheckPrimary( MakeIdentifier(LexString) );  .)
  875    | "@" ident (.
  876         Ci := ComponentManager.GetInfoFromName(LexString);
  877         if not Ci.ZClass.InheritsFrom(TCommand) then
  878           ZError('Class must inherit TCommand: ' + LexString);
  879         OutOp := TZcOpInvokeComponent.Create(nil);
  880         OutOp.Id := LexString;
  881      .)
  882      "(" (. IsInInvokeArg := True; .)
  883          [InvokeArgument<Op,Ci>       (. OutOp.Children.Add(Op); .)
  884            {"," InvokeArgument<Op,Ci> (. OutOp.Children.Add(Op); .)
  885            }
  886          ]
  887      ")" (. IsInInvokeArg := False; .)
  888    | Literal<Typ>  (.
  889          if Typ.Kind in [zctString,zctNull] then
  890            OutOp := TZcOpLiteral.Create(Typ.Kind,LexString)
  891          else
  892          begin
  893            try
  894              S := LexString;
  895              V := ZcStrToFloat(S);
  896              OutOp := TZcOpLiteral.Create(Typ.Kind,V)
  897            except on EConvertError do
  898              SynError(200);
  899            end;
  900          end;
  901       .)
  902    | "(" Expr<OutOp> ")"
  903  /*  | ( "bool"   | "byte"   | "char" | "decimal" | "double"
  904      | "float"  | "int"    | "long" | "object"  | "sbyte"
  905      | "short"  | "string" | "uint" | "ulong"   | "ushort"
  906      ) "." ident */
  907    | ReinterpretCast<OutOp>
  908    )
  909  
  910    {
  911    "++" (. OutOp := MakePrePostIncDec(zcPostInc,OutOp); .)
  912    | "--" (. OutOp := MakePrePostIncDec(zcPostDec,OutOp); .)
  913  
  914  /*  | "->" ident */
  915  
  916    | "." (. IsInIdent := True; .) ident (.
  917  
  918        if not (OutOp.Kind in [zcIdentifier,zcSelect,zcFuncCall,zcArrayAccess]) then
  919          ZError('Invalid use of "."');
  920  
  921        Op := MakeOp(zcSelect,LexString);
  922        Op.Children.Add(OutOp);
  923  
  924        OutOp := CheckPrimary(Op);
  925  
  926        IsInIdent := False;
  927  
  928      .)
  929  
  930    | "(" (. Assert(OutOp.Kind=zcIdentifier);
  931             OutOp.Kind:=zcFuncCall;
  932           .)
  933          [Argument<Op> (. OutOp.Children.Add(Op); .)
  934            {"," Argument<Op> (. OutOp.Children.Add(Op); .)
  935            }
  936          ]
  937          (.
  938             if not VerifyFunctionCall(OutOp,S) then
  939               ZError(S);
  940          .)
  941      ")"
  942  
  943    | "[" (. Assert(OutOp.Kind in [zcIdentifier,zcSelect]);
  944             Op := TZcOpArrayAccess.Create(OutOp.Id, OutOp);
  945             OutOp := Op;
  946           .)
  947  
  948          Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .)
  949            {"," Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .) }
  950          "]"
  951    }
  952  .
  953  /*------------------------------------------------------------------------*/
  954  Literal<var Typ : TZcDataType>
  955  = intCon (. Typ.Kind :=zctInt; .) |
  956    realCon (. Typ.Kind := zctFloat; .) |
  957    stringCon (. Typ.Kind := zctString; .)
  958    | "null" (. Typ.Kind := zctNull; .)
  959    /* | "true" | "false"  */
  960  .
  961  
  962  END Zc.





Listing
-------
0 errors and 37 warnings
*****  Warning: LL1 warning in ZcFuncBody:"model" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"string" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"if" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"const" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"int" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Font" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Camera" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"float" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sample" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"@" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"return" is start & successor of deletable structure
*****  Warning: LL1 warning in EmbeddedStatement:"else" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"null" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"continue" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"while" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"switch" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"break" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"for" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Mesh" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:dec is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:ident is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lbrace is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:inc is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:intCon is start & successor of deletable structure
*****  Warning: LL1 warning in Zc: contents of [...] or {...} must not be deletable
*****  Warning: LL1 warning in ZcFuncBody:stringCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:realCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sound" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Material" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Bitmap" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Shader" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:minus is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lpar is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:scolon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:not is start & successor of deletable structure
**************************
    1  COMPILER Zc
    2  
    3  FRAME "delphi.frm"
    4  
    5  uses = (. Zc_Ops, Contnrs, uSymTab, ZClasses, Compiler, SysUtils, ZExpressions .)
    6  
    7  public = (.
    8      ZFunctions : TObjectList;
    9      SymTab : TSymbolTable;
   10      ReturnType : TZcDataType;
   11      AllowFunctions : boolean;
   12      GlobalNames : TObjectList;
   13      TempCounter : integer;
   14      destructor Destroy; override;
   15      procedure CheckHomograph(var sym: Integer); override;
   16  .)
   17  private = (.
   18      IsInIdent,IsInInvokeArg : boolean;
   19      CurrentFunction : TZcOpFunctionUserDefined;
   20      procedure CleanUp;
   21      procedure ZError(const S : string);
   22      procedure AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   23      function MakeTempName : string;
   24      procedure OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   25      .)
   26  precreate = (.
   27      ZFunctions := TObjectList.Create(False);
   28      Self.OnError := OnParserError;
   29  .)
   30  
   31  semErrors = (.
   32      200 : Result := 'Not a floating point value';
   33      201 : Result := 'Name already defined in this scope';
   34      202 : Result := 'Return value expected';
   35      203 : Result := 'Function should not return a value';
   36      204 : Result := 'Only function definitions are allowed here';
   37      205 : Result := 'Syntax not supported';
   38  .)
   39  
   40  implementation = (.
   41  
   42  procedure TZc.OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   43  begin
   44    ZError(Msg + ' ' + Data);
   45  end;
   46  
   47  procedure TZc.CheckHomograph(var sym: Integer);
   48  begin
   49    //Only Homographs are name of component datatypes
   50    //If inside identifier "x.y.z" then let it refer to identifier instead
   51    if IsInIdent or IsInInvokeArg then
   52      sym := identSym;
   53  end;
   54  
   55  destructor TZc.Destroy;
   56  begin
   57    inherited;
   58    CleanUp;
   59  end;
   60  
   61  procedure TZc.AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   62  begin
   63    if Op=nil then
   64    begin
   65      if SwitchOp.HasDefault then
   66        ZError('Only one default statement is allowed.');
   67      SwitchOp.HasDefault := True;
   68    end else
   69      Op := MakeCompatible(Op,SwitchOp.ValueOp.GetDataType);
   70    SwitchOp.CaseOps.Last.Children.Add( Op );
   71    Op := nil;
   72  end;
   73  
   74  procedure TZc.CleanUp;
   75  begin
   76    Zc_Ops.FunctionCleanUps.Clear;
   77    ZFunctions.Free;
   78  end;
   79  
   80  function TZc.MakeTempName : string;
   81  begin
   82    Inc(TempCounter);
   83    Result := '#temp' + IntToStr(TempCounter);
   84  end;
   85  
   86  procedure TZc.ZError(const S : string);
   87  var
   88    E : EParseError;
   89    P : TSymbolRec;
   90  begin
   91    E := EParseError.Create(S);
   92    E.Message := S;
   93    Scanner.GetPosition(P);
   94    E.Line := P.Line;
   95    E.Col := P.Col;
   96    raise E;
   97  end;
   98  
   99  .)
  100  
  101  END
  102  
  103  
  104  CHARACTERS
  105  
  106          tab                = CHR(9). /*  9 = tabulator */
  107          eol                = CHR(10). /* 10 = line feed */
  108          cr                 = CHR(13). /* 13 = carriage return */
  109          newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
  110  
  111          letter             = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  112          digit              = "0123456789".
  113          hexDigit           = digit + "ABCDEFabcdef".
  114          notDigit           = ANY - digit.
  115  
  116          char               = ANY - "'" - '\' - newLine.
  117          verbatimStringChar = ANY - '"'.
  118          regularStringChar  = ANY - '"' - '\' - newLine.
  119          notNewLine         = ANY - newLine .
  120  
  121  
  122  TOKENS
  123  
  124    /*--------------------------------------------------------------------------------*/
  125          intCon =
  126                  ( digit {digit}
  127                  | ("0x" | "0X") hexDigit {hexDigit}
  128                  )
  129                  /* ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"] */
  130                  .
  131    /*--------------------------------------------------------------------------------*/
  132          realCon =
  133                  "." digit {digit}
  134                  [("e" | "E") ["+" | "-"] digit {digit}]
  135                  ["F" | "f" | "D" | "d" | "M" | "m"]
  136          | digit {digit}
  137                  ( "." digit {digit}
  138                          [("e" | "E" ) ["+" | "-"] digit {digit} ]
  139                          ["F" | "f" | "D" | "d" | "M" | "m"]
  140                  | ("e" | "E") ["+" | "-"] digit {digit}
  141                          ["F" | "f" | "D" | "d" | "M" | "m"]
  142                  | "F" | "f" | "D" | "d" | "M" | "m"
  143                  ).
  144    /*--------------------------------------------------------------------------------*/
  145          stringCon =
  146                  '"'    { regularStringChar
  147            | "\'" | '\"' | "\\" | "\n"
  148            }
  149                  '"'.
  150  
  151          ident = letter { letter | digit }.
  152  
  153  
  154          /*----- operators and special characters needed in LL(1) resolvers --------------*/
  155          and    = "&".
  156          assgn  = "=".
  157          colon  = ":".
  158          comma  = ",".
  159          dec    = "--".
  160          div    = "/".
  161          dot    = ".".
  162          eq     = "==".
  163          gt     = ">".
  164          gte    = ">=".
  165          inc    = "++".
  166          lbrace = "{".
  167          lbrack = "[".
  168          lpar   = "(".
  169          lshift = "<<".
  170          lt     = "<".
  171          lte    = "<=".
  172          minus  = "-".
  173          mod    = "%".
  174          neq    = "!=".
  175          not    = "!".
  176          or     = "|".
  177          plus   = "+".
  178          rbrace = "}".
  179          rbrack = "]".
  180          rpar   = ")".
  181          rshift = ">>".
  182          scolon = ";".
  183          tilde  = "~".
  184          times  = "*".
  185          xor    = "^".
  186  
  187  
  188  
  189  COMMENTS FROM "/*" TO "*/"
  190  COMMENTS FROM "//" TO eol
  191  
  192  IGNORE eol + cr + tab
  193  
  194  HOMOGRAPHS
  195    "Material"
  196    "Sound"
  197    "Shader" 
  198    "Bitmap" 
  199    "Mesh"
  200    "Camera" 
  201    "Font"
  202    "Sample"
  203  
  204  
  205  PRODUCTIONS
  206  
  207  /*------------------------------------------------------------------------*
  208   *--------------------------- Declarations -------------------------------*
  209   *------------------------------------------------------------------------*/
  210  
  211  Zc (. var
  212          Func : TZcOpFunctionUserDefined;
  213          Typ : TZcDataType;
  214      .)
  215  =
  216    IF (. AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  217    {
  218      ConstantDeclaration
  219      |
  220      ("void" (. Typ.Kind := zctVoid; .) | Type<Typ> ) ident (.
  221            if SymTab.Contains(LexString) then
  222              ZError('Name already defined: ' + LexString);
  223  
  224            Func := TZcOpFunctionUserDefined.Create(GlobalNames);
  225            Func.Id := LexString;
  226            Func.ReturnType := Typ;
  227            SymTab.Add(Func.Id,Func);
  228            ZFunctions.Add(Func);
  229            Self.CurrentFunction := Func;
  230            SymTab.PushScope;
  231            try
  232         .)
  233      "(" [ FormalParams ] ")" "{" ZcFuncBody "}"
  234          (.
  235            finally
  236              SymTab.PopScope;
  237            end;
  238          .)
  239    }
  240    | IF (. not AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  241    {
  242  
  243    (.
  244         Func := TZcOpFunctionUserDefined.Create(nil);
  245         Func.ReturnType := Self.ReturnType;
  246         Self.CurrentFunction := Func;
  247         try
  248           SymTab.PushScope;
  249           try
  250             ZFunctions.Add(Func);
  251    .)
  252    /* A zc-expression is treated like the body of a nameless function
  253       to allow local var declarations  */
  254  
  255    ZcFuncBody
  256    (.
  257           finally
  258             SymTab.PopScope;
  259           end;
  260         except on E: Exception do
  261           ZError(E.Message);
  262         end;
  263    .)
  264    }
  265  
  266  .
  267  
  268  /*------------------------------------------------------------------------*/
  269  
  270  ZcFuncBody (. var Op : TZcOp; .)
  271  =  {  (. Op:=nil; .)
  272        Statement<Op>
  273        (. if Op<>nil then
  274             CurrentFunction.Statements.Add(Op);
  275           Op := nil;
  276        .)
  277     }
  278  .
  279  
  280  /*------------------------------------------------------------------------*/
  281  FormalParams                    
  282  = ( Par ["," FormalParams] )
  283  .
  284  /*------------------------------------------------------------------------*/
  285  Par (.
  286  var
  287    Typ : TZcDataType;
  288    Arg : TZcOpArgumentVar;
  289    IsPtr : boolean;
  290  .)
  291  =  (. IsPtr := False; .)
  292    ["ref" (. IsPtr := True; .) ]
  293    Type<Typ> ident
  294       (.
  295          Typ.IsPointer := IsPtr;
  296          if SymTab.ScopeContains(LexString) then
  297            SynError(201)
  298          else
  299          begin
  300            Arg := TZcOpArgumentVar.Create(GlobalNames);
  301            Arg.Id := LexString;
  302            Arg.Typ := Typ;
  303            CurrentFunction.AddArgument(Arg);
  304            SymTab.Add(Arg.Id,Arg);
  305          end;
  306       .)
  307  .
  308  /*------------------------------------------------------------------------*/
  309  
  310  LocalVarDecl<var OutOp : TZcOp> (. var Typ : TZcDataType; .)
  311  = (. OutOp := nil; .)
  312    Type<Typ> LocalVar<Typ,OutOp> {"," LocalVar<Typ,OutOp>}
  313  .
  314  
  315  /*------------------------------------------------------------------------*/
  316  
  317  LocalVar<Typ : TZcDataType; var OutOp : TZcOp> (. var Loc : TZcOpLocalVar; InitOp : TZcOp; .)
  318  = ident
  319       (. 
  320          if SymTab.ScopeContains(LexString) then
  321            ZError('Name already defined: ' + LexString);
  322  
  323          Loc := TZcOpLocalVar.Create(nil);
  324          Loc.Id := LexString;
  325          Loc.Typ := Typ;
  326       .)
  327       [ "=" Init<InitOp> (. Loc.InitExpression:=InitOp; .) ]
  328       (.
  329          SymTab.Add(Loc.Id,Loc);
  330          CurrentFunction.AddLocal(Loc);
  331  
  332          if Assigned(Loc.InitExpression) then
  333          begin
  334            //Generate tree for initial assignment
  335            if OutOp=nil then
  336              OutOp := MakeOp(zcBlock);
  337            OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),Loc.InitExpression) );
  338          end;
  339          
  340       .)
  341  .
  342  
  343  /*------------------------------------------------------------------------*/
  344  
  345  Init<var OutOp : TZcOp>
  346  = Expr<OutOp>
  347  .
  348  
  349  /*------------------------------------------------------------------------*/
  350  Argument<var OutOp : TZcOp>
  351  = /* ["ref" | "out"] */
  352    (. OutOp := nil; .)
  353    Expr<OutOp>
  354    (. if OutOp=nil then ZError('Missing argument'); .)
  355  .
  356  
  357  /*------------------------------------------------------------------------*
  358   *-------------------------------- Types ---------------------------------*
  359   *------------------------------------------------------------------------*/
  360  
  361  /* Attribute "type" is needed for error messages in EmbeddedStatement     *
  362   * and for array creation expressions                                     */
  363  
  364  
  365  Type<var Typ : TZcDataType>
  366  =  (. FillChar(Typ,SizeOf(Typ),0); .)
  367    ( SimpleType<Typ> )
  368  .
  369  
  370  /*------------------------------------------------------------------------*/
  371  
  372  SimpleType<var Typ : TZcDataType>
  373  /* = IntType | "float" | "double" | "decimal" | "bool" */
  374  = "float" (. Typ.Kind := zctFloat; .)
  375    | "int" (. Typ.Kind := zctInt; .)
  376    | "string" (. Typ.Kind := zctString; .)
  377    | "model" (. Typ.Kind := zctModel; .)
  378  
  379    /* Changes below also must be made in homographs-section */
  380    | "Material" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MaterialClassId; .)
  381    | "Sound" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SoundClassId; .)
  382    | "Shader" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ShaderClassId; .)
  383    | "Bitmap" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZBitmapClassId; .)
  384    | "Mesh" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MeshClassId; .)
  385    | "Camera" (. Typ.Kind := zctReference; Typ.ReferenceClassId := CameraClassId; .)
  386    | "Font" (. Typ.Kind := zctReference; Typ.ReferenceClassId := FontClassId; .)
  387    | "Sample" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SampleClassId; .)
  388  .
  389  
  390  /*------------------------------------------------------------------------*/
  391  
  392  /* IntType
  393  = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
  394  . */
  395  
  396  
  397  ConstantDeclaration
  398  (.
  399  var
  400    Cns : TDefineConstant;
  401    Typ : TZcDataType;
  402    Op : TZcOp;
  403    Lit : TZcOpLiteral;
  404    CnsName : string;
  405  .)
  406  =
  407  "const" Type<Typ> ident (. CnsName := LexString; .)"=" Expr<Op>
  408    (.
  409     Op := Op.Optimize;
  410     if not (Op is TZcOpLiteral) then
  411       ZError('Constant expression expected: ' + Op.ToString);
  412  
  413     Lit := Op as TZcOpLiteral;
  414  
  415     if Lit.Typ.Kind<>Typ.Kind then
  416       ZError('Constant expression is not of the expected type: ' + Op.ToString);
  417  
  418     Cns := TDefineConstant.Create(nil);
  419     Cns.SetString('Name',AnsiString(CnsName));
  420     GlobalNames.Add(Cns);
  421  
  422     case Typ.Kind of
  423       zctInt:
  424         begin
  425           Cns._Type := dvbInt;
  426           Cns.IntValue := Round(Lit.Value);
  427         end;
  428       zctFloat:
  429         begin
  430           Cns._Type := dvbFloat;
  431           Cns.Value := Lit.Value;
  432         end;
  433       zctString:
  434         begin
  435           Cns._Type := dvbString;
  436           Cns.SetString('StringValue',AnsiString(Lit.StringValue));
  437         end;
  438       else
  439         ZError('Wrong type of constant expression: ' + GetZcTypeName(Typ));
  440     end;
  441     SymTab.Add(CnsName,Cns);
  442    .)
  443  /* {"," ident "=" Expr<Op>} */
  444    ";"
  445  .
  446  
  447  /*------------------------------------------------------------------------*
  448   *------------------------------ Statements ------------------------------*
  449   *------------------------------------------------------------------------*/
  450  
  451  Statement<var OutOp : TZcOp>
  452  = (. OutOp := nil; .)
  453  
  454  ConstantDeclaration
  455  
  456  /*IF IsLocalVarDecl THEN
  457  BEGIN
  458    LocalVarDecl ";"
  459  END
  460  |  EmbeddedStatement<OutOp> */
  461  
  462  | LocalVarDecl<OutOp> ";"
  463  | EmbeddedStatement<OutOp>
  464    /* LL(1) confict between LocalVarDecl and StatementExpr: *
  465     * ident {"." ident} { "[" ...                           */
  466  .
  467  
  468  /*------------------------------------------------------------------------*/
  469  EmbeddedStatement<var OutOp : TZcOp>
  470    (. var
  471         SwitchValueOp,Op,IfOp,IfBody,ElseOp : TZcOp;
  472         ForInitOp,ForCondOp,ForIncOp,ForBodyOp : TZcOp;
  473         WhileCondOp,WhileBodyOp : TZcOp;
  474         SwitchOp : TZcOpSwitch;
  475         Loc : TZcOpLocalVar;
  476    .)
  477  = Block<OutOp>
  478  | ";"   (. OutOp := MakeOp(zcNop); .)
  479  | StatementExpr<OutOp> ";"
  480  | "if" (. ElseOp := nil; .)
  481    "(" Expr<IfOp> ")" EmbeddedStatement<IfBody> ["else" EmbeddedStatement<ElseOp>]
  482          (. OutOp := MakeOp(zcIf,[IfOp,IfBody,ElseOp]); .)
  483   | "switch" "(" Expr<SwitchValueOp> ")"
  484        (.
  485           Loc := TZcOpLocalVar.Create(nil);
  486           Loc.Id := MakeTempName;
  487           Loc.Typ := SwitchValueOp.GetDataType;
  488           SymTab.Add(Loc.Id,Loc);
  489           CurrentFunction.AddLocal(Loc);
  490  
  491           OutOp := MakeOp(zcBlock);
  492           OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),SwitchValueOp) );
  493  
  494           SwitchOp := TZcOpSwitch.Create(nil);
  495           SwitchOp.ValueOp := MakeIdentifier(Loc.Id);
  496           OutOp.Children.Add(SwitchOp);
  497        .)
  498     "{" {
  499       (. SwitchOp.CaseOps.Add( MakeOp(zcNop) ); SwitchOp.StatementsOps.Add( MakeOp(zcNop) ); .)
  500       SwitchSection<SwitchOp>
  501     } "}"
  502   | "while"
  503       (. try
  504           SymTab.PushScope;
  505           WhileCondOp := nil; WhileBodyOp := nil; .)
  506     "(" Expr<WhileCondOp> ")" EmbeddedStatement<WhileBodyOp>
  507     (.
  508           OutOp := MakeOp(zcWhile,[WhileCondOp,WhileBodyOp]);
  509         finally
  510           SymTab.PopScope;
  511         end;
  512     .)
  513   /* | "do" EmbeddedStatement<Op> "while" "(" Expr<Op> ")" ";" */
  514   | "for"
  515      (. try
  516           SymTab.PushScope;
  517           ForInitOp :=nil; ForCondOp := nil; ForIncOp := nil; .)
  518     "(" [ForInit<ForInitOp>] ";" [Expr<ForCondOp>] ";" [ForInc<ForIncOp>] ")" EmbeddedStatement<ForBodyOp>
  519     (.
  520           OutOp := MakeOp(zcForLoop,[ForInitOp,ForCondOp,ForIncOp,ForBodyOp]);
  521         finally
  522           SymTab.PopScope;
  523         end;
  524     .)
  525  /* | "foreach" "(" Type ident "in" Expr<Op> ")" EmbeddedStatement<Op> */
  526   | "break" ";"    (. OutOp := MakeOp(zcBreak); .)
  527   | "continue" ";" (. OutOp := MakeOp(zcContinue); .)
  528   | (. Op := nil; .) "return" [ Expr<Op> ] ";"
  529      (.
  530          if (Op=nil) then
  531          begin
  532            if CurrentFunction.ReturnType.Kind<>zctVoid then
  533              SynError(202)
  534            else
  535              OutOp := MakeOp(zcReturn);
  536          end else
  537          begin
  538            if CurrentFunction.ReturnType.Kind=zctVoid then
  539              SynError(203)
  540            else
  541              OutOp := MakeOp(zcReturn,[ MakeCompatible(Op,CurrentFunction.ReturnType) ]);
  542          end;
  543      .)
  544  .
  545  /*------------------------------------------------------------------------*/
  546  
  547  Block<var OutOp : TZcOp>
  548    (. var
  549         Op : TZcOp;
  550    .)
  551  = (. Op := nil;
  552       OutOp := MakeOp(zcBlock);
  553    .)
  554    "{" {Statement<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) } "}".
  555  
  556  /*------------------------------------------------------------------------*/
  557  StatementExpr<var OutOp : TZcOp>           (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  558  = (. Op1 :=nil; Op2 := nil; .)
  559    Unary<Op1>
  560    ( AssignOp<Kind> Expr<Op2>
  561      (.
  562        if Op2<>nil then
  563          OutOp := MakeAssign(Kind,Op1,Op2);
  564      .)
  565    |                             (. OutOp := Op1; .)
  566    )
  567  .
  568  
  569  /*------------------------------------------------------------------------*/
  570  AssignOp<var Kind : TZcAssignType>
  571  = "="     (. Kind := atAssign; .)
  572    | "+="  (. Kind := atPlusAssign; .)
  573    | "-="  (. Kind := atMinusAssign; .)
  574    | "*="  (. Kind := atMulAssign; .)
  575    | "/="  (. Kind := atDivAssign; .)
  576  /*  | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" */
  577  .
  578  
  579  /*------------------------------------------------------------------------*/
  580  
  581  SwitchSection<SwitchOp : TZcOpSwitch> (. var Op : TZcOp; .)
  582  = (. Op := nil; .)
  583    SwitchLabel<Op>   (. AddSwitchLabel(SwitchOp,Op); .)
  584    {
  585      SwitchLabel<Op> (. AddSwitchLabel(SwitchOp,Op); .)
  586    }
  587    Statement<Op>    (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  588    {
  589       Statement<Op> (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  590    }
  591  .
  592  
  593  /*------------------------------------------------------------------------*/
  594  
  595  SwitchLabel<var OutOp : TZcOp>
  596  = "case" Expr<OutOp> ":"
  597  | "default" ":"
  598  .
  599  
  600  /*------------------------------------------------------------------------*/
  601  
  602  ForInit<var OutOp : TZcOp>     (. var Op : TZcOp; .)
  603  = (. Op:=nil; OutOp := MakeOp(zcBlock); .)
  604  (
  605  LocalVarDecl<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  606  | (. Op:=nil; .) StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  607    { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  608  )
  609  .  
  610  
  611  /*------------------------------------------------------------------------*/
  612  
  613  ForInc<var OutOp : TZcOp>      (. var Op : TZcOp; .)
  614  = (. Op:=nil; 
  615       OutOp := MakeOp(zcBlock);
  616    .) 
  617  (
  618  StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) 
  619  { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  620  )
  621  . 
  622  
  623  
  624  /*------------------------------------------------------------------------*
  625   *----------------------------- Expressions ------------------------------*
  626   *------------------------------------------------------------------------*/
  627  
  628  
  629  Expr<var OutOp : TZcOp>   (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  630  = (. Op1 :=nil; Op2 := nil; .)
  631    Unary<Op1>
  632    ( OrExpr<Op1,OutOp>
  633        ["?" Expr<Op1> ":" Expr<Op2>
  634           (. if (OutOp=nil) or (Op1=nil) or (Op2=nil) then
  635                SynError(205)
  636              else
  637                OutOp := MakeOp(zcConditional,[OutOp,Op1,Op2]);
  638           .)
  639        ]
  640    | AssignOp<Kind> Expr<Op2>    (. OutOp := MakeAssign(Kind,Op1, Op2); .)
  641    )
  642  .
  643  /*------------------------------------------------------------------------*/
  644  OrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  645  = AndExpr<InOp,OutOp>   (. L := OutOp; .)
  646      {"||" Unary<Op> AndExpr<Op,R>
  647        (. OutOp := MakeOp(zcOr,[L,R]);
  648           L := OutOp; .)
  649      }
  650  .
  651  
  652  
  653  /*------------------------------------------------------------------------*/
  654  AndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  655  = BitOrExpr<InOp,OutOp>  (. L := OutOp; .)
  656      {"&&" Unary<Op> BitOrExpr<Op,R>
  657        (. OutOp := MakeOp(zcAnd,[L,R]);
  658           L := OutOp; .)
  659      }
  660  .
  661  /*------------------------------------------------------------------------*/
  662  BitOrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  663  = BitXorExpr<InOp,OutOp> (. L := OutOp; .)
  664    {"|" Unary<Op> BitXorExpr<Op,R>
  665      (. OutOp := MakeOp(zcBinaryOr,[L,R]);
  666         L := OutOp; .)
  667    }
  668  .
  669  
  670  /*------------------------------------------------------------------------*/
  671  BitXorExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  672  = BitAndExpr<InOp,OutOp> (. L := OutOp; .)
  673    {"^" Unary<Op> BitAndExpr<Op,R>
  674      (. OutOp := MakeOp(zcBinaryXor,[L,R]);
  675         L := OutOp; .)
  676    }
  677  .
  678  
  679  /*------------------------------------------------------------------------*/
  680  BitAndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  681  = EqlExpr<InOp,OutOp> (. L := OutOp; .)
  682    {"&" Unary<Op> EqlExpr<Op,R>
  683      (. OutOp := MakeOp(zcBinaryAnd,[L,R]);
  684         L := OutOp; .)
  685    }
  686  .
  687  
  688  /*------------------------------------------------------------------------*/
  689  EqlExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  690  = RelExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  691    {( "!="   (. Kind := zcCompNE; .)
  692     | "=="   (. Kind := zcCompEQ; .)
  693     )
  694     Unary<Op> RelExpr<Op,R>
  695           (. OutOp := MakeBinary(Kind, L,R);
  696              L := OutOp;
  697           .)
  698    }
  699  .
  700  /*------------------------------------------------------------------------*/
  701  RelExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind; .)
  702  = ShiftExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  703    { ( "<"       (. Kind := zcCompLT; .)
  704      | ">"       (. Kind := zcCompGT; .)
  705      | "<="      (. Kind := zcCompLE; .)
  706      | ">="      (. Kind := zcCompGE; .)
  707       )
  708      Unary<Op> ShiftExpr<Op,R>
  709           (. OutOp := MakeBinary(Kind, L,R );
  710              L := OutOp;
  711           .)
  712    }
  713  .
  714  /*------------------------------------------------------------------------*/
  715  ShiftExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  716  = AddExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  717    { ("<<"  (. Kind := zcBinaryShiftL; .)
  718      | ">>" (. Kind := zcBinaryShiftR; .)
  719      )
  720      Unary<Op> AddExpr<Op,R>
  721      (. OutOp := MakeOp(Kind,[L,R]);
  722         L := OutOp; .)
  723    }
  724  .
  725  /*------------------------------------------------------------------------*/
  726  AddExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind;.)
  727  = MulExpr<InOp,OutOp>   (. L := OutOp; Kind := zcNop; .)
  728      {( "+"    (. Kind := zcPlus; .)
  729       | "-"    (. Kind := zcMinus; .)
  730       ) Unary<Op> MulExpr<Op,R>
  731           (. 
  732              if (L=nil) or (R=nil) then
  733                ZError('Invalid syntax');
  734              OutOp := MakeBinary(Kind,L,R);
  735              L := OutOp;
  736           .)
  737      }
  738  .
  739  /*------------------------------------------------------------------------*/
  740  MulExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Tmp : TZcOp; Kind : TZcOpKind; .)
  741  = (. OutOp := InOp; Kind := zcNop; .)
  742    { ("*"      (. Kind := zcMul; .)
  743      | "/"     (. Kind := zcDiv; .)
  744    /*  | "%" */
  745      ) Unary<Tmp>
  746           (. OutOp := MakeBinary(Kind,InOp,Tmp);
  747              InOp := OutOp;
  748           .)
  749      }
  750  .
  751  /*------------------------------------------------------------------------*/
  752  Unary<var OutOp : TZcOp>         (. var LastOp,Tmp : TZcOp; Kind : TZcOpKind; .)
  753  =       (. LastOp := nil; Kind := zcNop; .)
  754    {
  755      (
  756        /* "+" | */
  757        "-"   (. Kind := zcNegate; .) |
  758        "++"  (. Kind := zcPreInc; .) |    
  759        "--"  (. Kind := zcPreDec; .) |
  760        "!"   (. Kind := zcNot; .)
  761        /* | "~" | "*" */
  762      )
  763      (.
  764         if Kind in [zcNegate,zcNot] then
  765         begin
  766           Tmp := MakeOp(Kind);
  767           if LastOp<>nil then
  768             LastOp.Children.Add(Tmp);
  769           LastOp := Tmp;
  770         end else if Assigned(LastOp) then
  771           ZError('-- and ++ cannot be combined with other unary ops');
  772      .)
  773    }
  774    Primary<Tmp>
  775      (.
  776         if Kind in [zcNop,zcNegate,zcNot] then
  777         begin
  778           if LastOp<>nil then
  779           begin
  780             LastOp.Children.Add(Tmp);
  781             OutOp := LastOp;
  782           end else
  783             OutOp := Tmp;
  784         end else
  785         begin
  786           OutOp := MakePrePostIncDec(Kind,Tmp);
  787         end;
  788      .)
  789  .
  790  
  791  
  792  
  793  /*------------------------------------------------------------------------*/
  794  InvokeArgument<var OutOp : TZcOp; Ci : TZComponentInfo>
  795  (.
  796    var
  797      Op : TZcOp;
  798      Prop : TZProperty;
  799  .)
  800  = (. OutOp := nil; Op := nil; .)
  801    ident (.
  802      Prop := Ci.GetProperties.GetByName(LexString);
  803      if Prop=nil then
  804        ZError(LexString + ' is not a property of ' + Ci.ZClassName);
  805      if not (Prop.PropertyType in [zptFloat,zptInteger,zptByte,zptBoolean,zptString,zptComponentRef]) then
  806        ZError(LexString + ' property of ' + Ci.ZClassName + ' is of a datatype that cannot be set using inline component invokation syntax');
  807      OutOp := MakeOp(zcIdentifier);
  808      OutOp.Id := LexString;
  809    .)
  810    ":" Expr<Op>
  811    (. if Op=nil then
  812         ZError('Missing argument');
  813       Op := MakeCompatible(Op, PropTypeToZType(Prop.PropertyType));
  814       OutOp.Children.Add(Op);
  815    .)
  816  .
  817  
  818  
  819  
  820  /*------------------------------------------------------------------------*/
  821  Primary<var OutOp : TZcOp>
  822  (. var Op : TZcOp; S : string; V : single;
  823       Typ : TZcDataType;
  824       Ci : TZComponentInfo;
  825  .)
  826  =            (. OutOp := nil; .)
  827    (
  828      ident    (. OutOp := CheckPrimary( MakeIdentifier(LexString) );  .)
  829    | "@" ident (.
  830         Ci := ComponentManager.GetInfoFromName(LexString);
  831         if not Ci.ZClass.InheritsFrom(TCommand) then
  832           ZError('Class must inherit TCommand: ' + LexString);
  833         OutOp := TZcOpInvokeComponent.Create(nil);
  834         OutOp.Id := LexString;
  835      .)
  836      "(" (. IsInInvokeArg := True; .)
  837          [InvokeArgument<Op,Ci>       (. OutOp.Children.Add(Op); .)
  838            {"," InvokeArgument<Op,Ci> (. OutOp.Children.Add(Op); .)
  839            }
  840          ]
  841      ")" (. IsInInvokeArg := False; .)
  842    | Literal<Typ>  (.
  843          if Typ.Kind in [zctString,zctNull] then
  844            OutOp := TZcOpLiteral.Create(Typ.Kind,LexString)
  845          else
  846          begin
  847            try
  848              S := LexString;
  849              V := ZcStrToFloat(S);
  850              OutOp := TZcOpLiteral.Create(Typ.Kind,V)
  851            except on EConvertError do
  852              SynError(200);
  853            end;
  854          end;
  855       .)
  856    | "(" Expr<OutOp> ")"
  857  /*  | ( "bool"   | "byte"   | "char" | "decimal" | "double"
  858      | "float"  | "int"    | "long" | "object"  | "sbyte"
  859      | "short"  | "string" | "uint" | "ulong"   | "ushort"
  860      ) "." ident */
  861    )
  862  
  863    {
  864    "++" (. OutOp := MakePrePostIncDec(zcPostInc,OutOp); .)
  865    | "--" (. OutOp := MakePrePostIncDec(zcPostDec,OutOp); .)
  866  
  867  /*  | "->" ident */
  868  
  869    | "." (. IsInIdent := True; .) ident (.
  870  
  871        if not (OutOp.Kind in [zcIdentifier,zcSelect,zcFuncCall,zcArrayAccess]) then
  872          ZError('Invalid use of "."');
  873  
  874        Op := MakeOp(zcSelect,LexString);
  875        Op.Children.Add(OutOp);
  876  
  877        OutOp := CheckPrimary(Op);
  878  
  879        IsInIdent := False;
  880  
  881      .)
  882  
  883    | "(" (. Assert(OutOp.Kind=zcIdentifier);
  884             OutOp.Kind:=zcFuncCall;
  885           .)
  886          [Argument<Op> (. OutOp.Children.Add(Op); .)
  887            {"," Argument<Op> (. OutOp.Children.Add(Op); .)
  888            }
  889          ]
  890          (.
  891             if not VerifyFunctionCall(OutOp,S) then
  892               ZError(S);
  893          .)
  894      ")"
  895  
  896    | "[" (. Assert(OutOp.Kind=zcIdentifier);
  897             OutOp.Kind:=zcArrayAccess;
  898           .)
  899      Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .)
  900        {"," Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .) }
  901      "]"
  902  
  903    }
  904  .
  905  /*------------------------------------------------------------------------*/
  906  Literal<var Typ : TZcDataType>
  907  = intCon (. Typ.Kind :=zctInt; .) |
  908    realCon (. Typ.Kind := zctFloat; .) |
  909    stringCon (. Typ.Kind := zctString; .)
  910    | "null" (. Typ.Kind := zctNull; .)
  911    /* | "true" | "false"  */
  912  .
  913  
  914  END Zc.




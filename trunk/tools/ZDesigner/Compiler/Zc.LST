
Listing
-------
0 errors and 39 warnings
*****  Warning: LL1 warning in ZcFuncBody:"xptr" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"model" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"if" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"const" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"string" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sample" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Font" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"int" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"float" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"switch" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"@" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"reinterpret_cast" is start & successor of deletable structure
*****  Warning: LL1 warning in EmbeddedStatement:"else" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"null" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"return" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"for" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"while" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"continue" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"break" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Camera" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:dec is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:ident is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lbrace is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:inc is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:intCon is start & successor of deletable structure
*****  Warning: LL1 warning in Zc: contents of [...] or {...} must not be deletable
*****  Warning: LL1 warning in ZcFuncBody:stringCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:realCon is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:lpar is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Shader" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Sound" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Mesh" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Bitmap" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:not is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:minus is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:"Material" is start & successor of deletable structure
*****  Warning: LL1 warning in ZcFuncBody:scolon is start & successor of deletable structure
**************************
    1  COMPILER Zc
    2  
    3  FRAME "delphi.frm"
    4  
    5  uses = (. Zc_Ops, Contnrs, uSymTab, ZClasses, Compiler, SysUtils, ZExpressions .)
    6  
    7  public = (.
    8      ZFunctions : TObjectList;
    9      SymTab : TSymbolTable;
   10      ReturnType : TZcDataType;
   11      AllowFunctions : boolean;
   12      GlobalNames : TObjectList;
   13      TempCounter : integer;
   14      destructor Destroy; override;
   15      procedure CheckHomograph(var sym: Integer); override;
   16  .)
   17  private = (.
   18      IsInIdent,IsInInvokeArg : boolean;
   19      CurrentFunction : TZcOpFunctionUserDefined;
   20      procedure CleanUp;
   21      procedure ZError(const S : string);
   22      procedure AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   23      function MakeTempName : string;
   24      procedure OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   25      .)
   26  precreate = (.
   27      ZFunctions := TObjectList.Create(False);
   28      Self.OnError := OnParserError;
   29  .)
   30  
   31  semErrors = (.
   32      200 : Result := 'Not a floating point value';
   33      201 : Result := 'Name already defined in this scope';
   34      202 : Result := 'Return value expected';
   35      203 : Result := 'Function should not return a value';
   36      204 : Result := 'Only function definitions are allowed here';
   37      205 : Result := 'Syntax not supported';
   38  .)
   39  
   40  implementation = (.
   41  
   42  procedure TZc.OnParserError(Sender: TObject; ErrorType,ErrorCode, line,col: Integer; const Msg, data: string);
   43  begin
   44    ZError(Msg + ' ' + Data);
   45  end;
   46  
   47  procedure TZc.CheckHomograph(var sym: Integer);
   48  begin
   49    //Only Homographs are name of component datatypes
   50    //If inside identifier "x.y.z" then let it refer to identifier instead
   51    if IsInIdent or IsInInvokeArg then
   52      sym := identSym;
   53  end;
   54  
   55  destructor TZc.Destroy;
   56  begin
   57    inherited;
   58    CleanUp;
   59  end;
   60  
   61  procedure TZc.AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   62  begin
   63    if Op=nil then
   64    begin
   65      if SwitchOp.HasDefault then
   66        ZError('Only one default statement is allowed.');
   67      SwitchOp.HasDefault := True;
   68    end else
   69      Op := MakeCompatible(Op,SwitchOp.ValueOp.GetDataType);
   70    SwitchOp.CaseOps.Last.Children.Add( Op );
   71    Op := nil;
   72  end;
   73  
   74  procedure TZc.CleanUp;
   75  begin
   76    Zc_Ops.FunctionCleanUps.Clear;
   77    ZFunctions.Free;
   78  end;
   79  
   80  function TZc.MakeTempName : string;
   81  begin
   82    Inc(TempCounter);
   83    Result := '#temp' + IntToStr(TempCounter);
   84  end;
   85  
   86  procedure TZc.ZError(const S : string);
   87  var
   88    E : EParseError;
   89    P : TSymbolRec;
   90  begin
   91    E := EParseError.Create(S);
   92    E.Message := S;
   93    Scanner.GetPosition(P);
   94    E.Line := P.Line;
   95    E.Col := P.Col;
   96    if (E.Line<>0) or (E.Col<>0) then
   97      E.Message := E.Message + ' (line: ' + IntToStr(E.Line) + ', col: ' + IntToStr(E.Col) + ')';
   98    raise E;
   99  end;
  100  
  101  .)
  102  
  103  END
  104  
  105  
  106  CHARACTERS
  107  
  108          tab                = CHR(9). /*  9 = tabulator */
  109          eol                = CHR(10). /* 10 = line feed */
  110          cr                 = CHR(13). /* 13 = carriage return */
  111          newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
  112  
  113          letter             = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  114          digit              = "0123456789".
  115          hexDigit           = digit + "ABCDEFabcdef".
  116          notDigit           = ANY - digit.
  117  
  118          char               = ANY - "'" - '\' - newLine.
  119          verbatimStringChar = ANY - '"'.
  120          regularStringChar  = ANY - '"' - '\' - newLine.
  121          notNewLine         = ANY - newLine .
  122  
  123  
  124  TOKENS
  125  
  126    /*--------------------------------------------------------------------------------*/
  127          intCon =
  128                  ( digit {digit}
  129                  | ("0x" | "0X") hexDigit {hexDigit}
  130                  )
  131                  /* ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"] */
  132                  .
  133    /*--------------------------------------------------------------------------------*/
  134          realCon =
  135                  "." digit {digit}
  136                  [("e" | "E") ["+" | "-"] digit {digit}]
  137                  ["F" | "f" | "D" | "d" | "M" | "m"]
  138          | digit {digit}
  139                  ( "." digit {digit}
  140                          [("e" | "E" ) ["+" | "-"] digit {digit} ]
  141                          ["F" | "f" | "D" | "d" | "M" | "m"]
  142                  | ("e" | "E") ["+" | "-"] digit {digit}
  143                          ["F" | "f" | "D" | "d" | "M" | "m"]
  144                  | "F" | "f" | "D" | "d" | "M" | "m"
  145                  ).
  146    /*--------------------------------------------------------------------------------*/
  147          stringCon =
  148                  '"'    { regularStringChar
  149            | "\'" | '\"' | "\\" | "\n"
  150            }
  151                  '"'.
  152  
  153          ident = letter { letter | digit }.
  154  
  155  
  156          /*----- operators and special characters needed in LL(1) resolvers --------------*/
  157          and    = "&".
  158          assgn  = "=".
  159          colon  = ":".
  160          comma  = ",".
  161          dec    = "--".
  162          div    = "/".
  163          dot    = ".".
  164          eq     = "==".
  165          gt     = ">".
  166          gte    = ">=".
  167          inc    = "++".
  168          lbrace = "{".
  169          lbrack = "[".
  170          lpar   = "(".
  171          lshift = "<<".
  172          lt     = "<".
  173          lte    = "<=".
  174          minus  = "-".
  175          mod    = "%".
  176          neq    = "!=".
  177          not    = "!".
  178          or     = "|".
  179          plus   = "+".
  180          rbrace = "}".
  181          rbrack = "]".
  182          rpar   = ")".
  183          rshift = ">>".
  184          scolon = ";".
  185          tilde  = "~".
  186          times  = "*".
  187          xor    = "^".
  188  
  189  
  190  
  191  COMMENTS FROM "/*" TO "*/"
  192  COMMENTS FROM "//" TO eol
  193  
  194  IGNORE eol + cr + tab
  195  
  196  HOMOGRAPHS
  197    "Material"
  198    "Sound"
  199    "Shader" 
  200    "Bitmap" 
  201    "Mesh"
  202    "Camera" 
  203    "Font"
  204    "Sample"
  205  
  206  
  207  PRODUCTIONS
  208  
  209  /*------------------------------------------------------------------------*
  210   *--------------------------- Declarations -------------------------------*
  211   *------------------------------------------------------------------------*/
  212  
  213  Zc (. var
  214          Func : TZcOpFunctionUserDefined;
  215          Typ : TZcDataType;
  216      .)
  217  =
  218    IF (. AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  219    {
  220      ConstantDeclarationList
  221      |
  222      ("void" (. Typ.Kind := zctVoid; .) | Type<Typ> ) ident (.
  223            if SymTab.Contains(LexString) then
  224              ZError('Name already defined: ' + LexString);
  225  
  226            Func := TZcOpFunctionUserDefined.Create(GlobalNames);
  227            Func.Id := LexString;
  228            Func.ReturnType := Typ;
  229            SymTab.Add(Func.Id,Func);
  230            ZFunctions.Add(Func);
  231            Self.CurrentFunction := Func;
  232            SymTab.PushScope;
  233            try
  234         .)
  235      "(" [ FormalParams ] ")" "{" ZcFuncBody "}"
  236          (.
  237            finally
  238              SymTab.PopScope;
  239            end;
  240          .)
  241    }
  242    | IF (. not AllowFunctions .)
***** ^ Warning: Misplaced resolver: no LL(1) conflict
  243    {
  244  
  245    (.
  246         Func := TZcOpFunctionUserDefined.Create(nil);
  247         Func.ReturnType := Self.ReturnType;
  248         Self.CurrentFunction := Func;
  249         try
  250           SymTab.PushScope;
  251           try
  252             ZFunctions.Add(Func);
  253    .)
  254    /* A zc-expression is treated like the body of a nameless function
  255       to allow local var declarations  */
  256  
  257    ZcFuncBody
  258    (.
  259           finally
  260             SymTab.PopScope;
  261           end;
  262         except on E: Exception do
  263           ZError(E.Message);
  264         end;
  265    .)
  266    }
  267  
  268  .
  269  
  270  /*------------------------------------------------------------------------*/
  271  
  272  ZcFuncBody (. var Op : TZcOp; .)
  273  =  {  (. Op:=nil; .)
  274        Statement<Op>
  275        (. if Op<>nil then
  276             CurrentFunction.Statements.Add(Op);
  277           Op := nil;
  278        .)
  279     }
  280  .
  281  
  282  /*------------------------------------------------------------------------*/
  283  FormalParams                    
  284  = ( Par ["," FormalParams] )
  285  .
  286  /*------------------------------------------------------------------------*/
  287  Par (.
  288  var
  289    Typ : TZcDataType;
  290    Arg : TZcOpArgumentVar;
  291    IsPtr : boolean;
  292  .)
  293  =  (. IsPtr := False; .)
  294    ["ref" (. IsPtr := True; .) ]
  295    Type<Typ> ident
  296       (.
  297          Typ.IsPointer := IsPtr;
  298          if SymTab.ScopeContains(LexString) then
  299            SynError(201)
  300          else
  301          begin
  302            Arg := TZcOpArgumentVar.Create;
  303            Arg.Id := LexString;
  304            Arg.Typ := Typ;
  305            CurrentFunction.AddArgument(Arg);
  306            SymTab.Add(Arg.Id,Arg);
  307          end;
  308       .)
  309  .
  310  /*------------------------------------------------------------------------*/
  311  
  312  LocalVarDecl<var OutOp : TZcOp> (. var Typ : TZcDataType; .)
  313  = (. OutOp := nil; .)
  314    Type<Typ> LocalVar<Typ,OutOp> {"," LocalVar<Typ,OutOp>}
  315  .
  316  
  317  /*------------------------------------------------------------------------*/
  318  
  319  LocalVar<Typ : TZcDataType; var OutOp : TZcOp> (. var Loc : TZcOpLocalVar; InitOp : TZcOp; .)
  320  = ident
  321       (. 
  322          if SymTab.ScopeContains(LexString) then
  323            ZError('Name already defined: ' + LexString);
  324  
  325          Loc := TZcOpLocalVar.Create(nil);
  326          Loc.Id := LexString;
  327          Loc.Typ := Typ;
  328       .)
  329       [ "=" Init<InitOp> (. Loc.InitExpression:=InitOp; .) ]
  330       (.
  331          SymTab.Add(Loc.Id,Loc);
  332          CurrentFunction.AddLocal(Loc);
  333  
  334          if Assigned(Loc.InitExpression) then
  335          begin
  336            //Generate tree for initial assignment
  337            if OutOp=nil then
  338              OutOp := MakeOp(zcBlock);
  339            OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),Loc.InitExpression) );
  340          end;
  341          
  342       .)
  343  .
  344  
  345  /*------------------------------------------------------------------------*/
  346  
  347  Init<var OutOp : TZcOp>
  348  = Expr<OutOp>
  349  .
  350  
  351  /*------------------------------------------------------------------------*/
  352  Argument<var OutOp : TZcOp>
  353  = /* ["ref" | "out"] */
  354    (. OutOp := nil; .)
  355    Expr<OutOp>
  356    (. if OutOp=nil then ZError('Missing argument'); .)
  357  .
  358  
  359  /*------------------------------------------------------------------------*
  360   *-------------------------------- Types ---------------------------------*
  361   *------------------------------------------------------------------------*/
  362  
  363  /* Attribute "type" is needed for error messages in EmbeddedStatement     *
  364   * and for array creation expressions                                     */
  365  
  366  
  367  Type<var Typ : TZcDataType>
  368  (.
  369    var
  370      A : TDefineArray;
  371  .)
  372  =  (. FillChar(Typ,SizeOf(Typ),0); .)
  373    ( SimpleType<Typ> )
  374    {
  375      (
  376        "["       (.
  377                     A := TDefineArray.Create(nil);
  378                     GlobalNames.Add(A);
  379                     A._Type := ZTypeToVarType(Typ.Kind);
  380                     Typ.Kind := zctArray;
  381                     Typ.TheArray := A;
  382                  .)
  383           { ","  (. if A.Dimensions=High(TArrayDimensions) then ZError('Too many array dimensions'); Inc(A.Dimensions); .)
  384         } "]"
  385      )
  386    }
  387  .
  388  
  389  /*------------------------------------------------------------------------*/
  390  
  391  SimpleType<var Typ : TZcDataType>
  392  /* = IntType | "float" | "double" | "decimal" | "bool" */
  393  = "float" (. Typ.Kind := zctFloat; .)
  394    | "int" (. Typ.Kind := zctInt; .)
  395    | "string" (. Typ.Kind := zctString; .)
  396    | "model" (. Typ.Kind := zctModel; .)
  397    | "xptr" (. Typ.Kind := zctXptr; .)
  398  
  399    /* Changes below also must be made in homographs-section */
  400    | "Material" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MaterialClassId; .)
  401    | "Sound" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SoundClassId; .)
  402    | "Shader" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ShaderClassId; .)
  403    | "Bitmap" (. Typ.Kind := zctReference; Typ.ReferenceClassId := ZBitmapClassId; .)
  404    | "Mesh" (. Typ.Kind := zctReference; Typ.ReferenceClassId := MeshClassId; .)
  405    | "Camera" (. Typ.Kind := zctReference; Typ.ReferenceClassId := CameraClassId; .)
  406    | "Font" (. Typ.Kind := zctReference; Typ.ReferenceClassId := FontClassId; .)
  407    | "Sample" (. Typ.Kind := zctReference; Typ.ReferenceClassId := SampleClassId; .)
  408  .
  409  
  410  /*------------------------------------------------------------------------*/
  411  
  412  /* IntType
  413  = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
  414  . */
  415  
  416  
  417  ConstantDeclarationList
  418  (.
  419  var
  420    Typ : TZcDataType;
  421  .)
  422  = "const" Type<Typ> ConstantDeclaration<Typ> {"," ConstantDeclaration<Typ> }
  423    ";"
  424  .
  425  
  426  ConstantDeclaration<var Typ : TZcDataType>
  427  (.
  428  var
  429    Cns : TDefineConstant;
  430    Op : TZcOp;
  431    Lit : TZcOpLiteral;
  432    CnsName : string;
  433  .)
  434  =
  435  ident (. CnsName := LexString; .) "=" Expr<Op>
  436    (.
  437     Op := Op.Optimize;
  438     if not (Op is TZcOpLiteral) then
  439       ZError('Constant expression expected: ' + Op.ToString);
  440  
  441     Lit := Op as TZcOpLiteral;
  442  
  443     if Lit.Typ.Kind<>Typ.Kind then
  444       ZError('Constant expression is not of the expected type: ' + Op.ToString);
  445  
  446     Cns := TDefineConstant.Create(nil);
  447     Cns.SetString('Name',AnsiString(CnsName));
  448     GlobalNames.Add(Cns);
  449  
  450     case Typ.Kind of
  451       zctInt:
  452         begin
  453           Cns._Type := dvbInt;
  454           Cns.IntValue := Round(Lit.Value);
  455         end;
  456       zctFloat:
  457         begin
  458           Cns._Type := dvbFloat;
  459           Cns.Value := Lit.Value;
  460         end;
  461       zctString:
  462         begin
  463           Cns._Type := dvbString;
  464           Cns.SetString('StringValue',AnsiString(Lit.StringValue));
  465         end;
  466       else
  467         ZError('Wrong type of constant expression: ' + GetZcTypeName(Typ));
  468     end;
  469     SymTab.Add(CnsName,Cns);
  470    .)
  471  /* {"," ident "=" Expr<Op>} */
  472  .
  473  
  474  /*------------------------------------------------------------------------*
  475   *------------------------------ Statements ------------------------------*
  476   *------------------------------------------------------------------------*/
  477  
  478  Statement<var OutOp : TZcOp>
  479  = (. OutOp := nil; .)
  480  
  481  ConstantDeclarationList
  482  
  483  /*IF IsLocalVarDecl THEN
  484  BEGIN
  485    LocalVarDecl ";"
  486  END
  487  |  EmbeddedStatement<OutOp> */
  488  
  489  | LocalVarDecl<OutOp> ";"
  490  | EmbeddedStatement<OutOp>
  491    /* LL(1) confict between LocalVarDecl and StatementExpr: *
  492     * ident {"." ident} { "[" ...                           */
  493  .
  494  
  495  /*------------------------------------------------------------------------*/
  496  EmbeddedStatement<var OutOp : TZcOp>
  497    (. var
  498         SwitchValueOp,Op,IfOp,IfBody,ElseOp : TZcOp;
  499         ForInitOp,ForCondOp,ForIncOp,ForBodyOp : TZcOp;
  500         WhileCondOp,WhileBodyOp : TZcOp;
  501         SwitchOp : TZcOpSwitch;
  502         Loc : TZcOpLocalVar;
  503    .)
  504  = Block<OutOp>
  505  | ";"   (. OutOp := MakeOp(zcNop); .)
  506  | StatementExpr<OutOp> ";"
  507  | "if" (. ElseOp := nil; .)
  508    "(" Expr<IfOp> ")" EmbeddedStatement<IfBody> ["else" EmbeddedStatement<ElseOp>]
  509          (. OutOp := MakeOp(zcIf,[IfOp,IfBody,ElseOp]); .)
  510   | "switch" "(" Expr<SwitchValueOp> ")"
  511        (.
  512           Loc := TZcOpLocalVar.Create(nil);
  513           Loc.Id := MakeTempName;
  514           Loc.Typ := SwitchValueOp.GetDataType;
  515           SymTab.Add(Loc.Id,Loc);
  516           CurrentFunction.AddLocal(Loc);
  517  
  518           OutOp := MakeOp(zcBlock);
  519           OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),SwitchValueOp) );
  520  
  521           SwitchOp := TZcOpSwitch.Create(nil);
  522           SwitchOp.ValueOp := MakeIdentifier(Loc.Id);
  523           OutOp.Children.Add(SwitchOp);
  524        .)
  525     "{" {
  526       (. SwitchOp.CaseOps.Add( MakeOp(zcNop) ); SwitchOp.StatementsOps.Add( MakeOp(zcNop) ); .)
  527       SwitchSection<SwitchOp>
  528     } "}"
  529   | "while"
  530       (. try
  531           SymTab.PushScope;
  532           WhileCondOp := nil; WhileBodyOp := nil; .)
  533     "(" Expr<WhileCondOp> ")" EmbeddedStatement<WhileBodyOp>
  534     (.
  535           OutOp := MakeOp(zcWhile,[WhileCondOp,WhileBodyOp]);
  536         finally
  537           SymTab.PopScope;
  538         end;
  539     .)
  540   /* | "do" EmbeddedStatement<Op> "while" "(" Expr<Op> ")" ";" */
  541   | "for"
  542      (. try
  543           SymTab.PushScope;
  544           ForInitOp :=nil; ForCondOp := nil; ForIncOp := nil; .)
  545     "(" [ForInit<ForInitOp>] ";" [Expr<ForCondOp>] ";" [ForInc<ForIncOp>] ")" EmbeddedStatement<ForBodyOp>
  546     (.
  547           OutOp := MakeOp(zcForLoop,[ForInitOp,ForCondOp,ForIncOp,ForBodyOp]);
  548         finally
  549           SymTab.PopScope;
  550         end;
  551     .)
  552  /* | "foreach" "(" Type ident "in" Expr<Op> ")" EmbeddedStatement<Op> */
  553   | "break" ";"    (. OutOp := MakeOp(zcBreak); .)
  554   | "continue" ";" (. OutOp := MakeOp(zcContinue); .)
  555   | (. Op := nil; .) "return" [ Expr<Op> ] ";"
  556      (.
  557          if (Op=nil) then
  558          begin
  559            if CurrentFunction.ReturnType.Kind<>zctVoid then
  560              SynError(202)
  561            else
  562              OutOp := MakeOp(zcReturn);
  563          end else
  564          begin
  565            if CurrentFunction.ReturnType.Kind=zctVoid then
  566              SynError(203)
  567            else
  568              OutOp := MakeOp(zcReturn,[ MakeCompatible(Op,CurrentFunction.ReturnType) ]);
  569          end;
  570      .)
  571  .
  572  /*------------------------------------------------------------------------*/
  573  
  574  Block<var OutOp : TZcOp>
  575    (. var
  576         Op : TZcOp;
  577    .)
  578  = (. Op := nil;
  579       OutOp := MakeOp(zcBlock);
  580    .)
  581    "{" {Statement<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) } "}".
  582  
  583  /*------------------------------------------------------------------------*/
  584  StatementExpr<var OutOp : TZcOp>           (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  585  = (. Op1 :=nil; Op2 := nil; .)
  586    Unary<Op1>
  587    ( AssignOp<Kind> Expr<Op2>
  588      (.
  589        if Op2<>nil then
  590          OutOp := MakeAssign(Kind,Op1,Op2);
  591      .)
  592    |                             (. OutOp := Op1; .)
  593    )
  594  .
  595  
  596  /*------------------------------------------------------------------------*/
  597  AssignOp<var Kind : TZcAssignType>
  598  = "="     (. Kind := atAssign; .)
  599    | "+="  (. Kind := atPlusAssign; .)
  600    | "-="  (. Kind := atMinusAssign; .)
  601    | "*="  (. Kind := atMulAssign; .)
  602    | "/="  (. Kind := atDivAssign; .)
  603  /*  | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" */
  604  .
  605  
  606  /*------------------------------------------------------------------------*/
  607  
  608  SwitchSection<SwitchOp : TZcOpSwitch> (. var Op : TZcOp; .)
  609  = (. Op := nil; .)
  610    SwitchLabel<Op>   (. AddSwitchLabel(SwitchOp,Op); .)
  611    {
  612      SwitchLabel<Op> (. AddSwitchLabel(SwitchOp,Op); .)
  613    }
  614    Statement<Op>    (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  615    {
  616       Statement<Op> (. if Assigned(Op) then SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  617    }
  618  .
  619  
  620  /*------------------------------------------------------------------------*/
  621  
  622  SwitchLabel<var OutOp : TZcOp>
  623  = "case" Expr<OutOp> ":"
  624  | "default" ":"
  625  .
  626  
  627  /*------------------------------------------------------------------------*/
  628  
  629  ForInit<var OutOp : TZcOp>     (. var Op : TZcOp; .)
  630  = (. Op:=nil; OutOp := MakeOp(zcBlock); .)
  631  (
  632  LocalVarDecl<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  633  | (. Op:=nil; .) StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  634    { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  635  )
  636  .  
  637  
  638  /*------------------------------------------------------------------------*/
  639  
  640  ForInc<var OutOp : TZcOp>      (. var Op : TZcOp; .)
  641  = (. Op:=nil; 
  642       OutOp := MakeOp(zcBlock);
  643    .) 
  644  (
  645  StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) 
  646  { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  647  )
  648  . 
  649  
  650  
  651  /*------------------------------------------------------------------------*
  652   *----------------------------- Expressions ------------------------------*
  653   *------------------------------------------------------------------------*/
  654  
  655  
  656  Expr<var OutOp : TZcOp>   (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  657  = (. Op1 :=nil; Op2 := nil; .)
  658    Unary<Op1>
  659    ( OrExpr<Op1,OutOp>
  660        ["?" Expr<Op1> ":" Expr<Op2>
  661           (. if (OutOp=nil) or (Op1=nil) or (Op2=nil) then
  662                SynError(205)
  663              else
  664                OutOp := MakeOp(zcConditional,[OutOp,Op1, MakeCompatible(Op2,Op1.GetDataType) ]);
  665           .)
  666        ]
  667    | AssignOp<Kind> Expr<Op2>    (. OutOp := MakeAssign(Kind,Op1, Op2); .)
  668    )
  669  .
  670  /*------------------------------------------------------------------------*/
  671  OrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  672  = AndExpr<InOp,OutOp>   (. L := OutOp; .)
  673      {"||" Unary<Op> AndExpr<Op,R>
  674        (. OutOp := MakeOp(zcOr,[L,R]);
  675           L := OutOp; .)
  676      }
  677  .
  678  
  679  
  680  /*------------------------------------------------------------------------*/
  681  AndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  682  = BitOrExpr<InOp,OutOp>  (. L := OutOp; .)
  683      {"&&" Unary<Op> BitOrExpr<Op,R>
  684        (. OutOp := MakeOp(zcAnd,[L,R]);
  685           L := OutOp; .)
  686      }
  687  .
  688  /*------------------------------------------------------------------------*/
  689  BitOrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  690  = BitXorExpr<InOp,OutOp> (. L := OutOp; .)
  691    {"|" Unary<Op> BitXorExpr<Op,R>
  692      (. OutOp := MakeOp(zcBinaryOr,[L,R]);
  693         L := OutOp; .)
  694    }
  695  .
  696  
  697  /*------------------------------------------------------------------------*/
  698  BitXorExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  699  = BitAndExpr<InOp,OutOp> (. L := OutOp; .)
  700    {"^" Unary<Op> BitAndExpr<Op,R>
  701      (. OutOp := MakeOp(zcBinaryXor,[L,R]);
  702         L := OutOp; .)
  703    }
  704  .
  705  
  706  /*------------------------------------------------------------------------*/
  707  BitAndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
  708  = EqlExpr<InOp,OutOp> (. L := OutOp; .)
  709    {"&" Unary<Op> EqlExpr<Op,R>
  710      (. OutOp := MakeOp(zcBinaryAnd,[L,R]);
  711         L := OutOp; .)
  712    }
  713  .
  714  
  715  /*------------------------------------------------------------------------*/
  716  EqlExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  717  = RelExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  718    {( "!="   (. Kind := zcCompNE; .)
  719     | "=="   (. Kind := zcCompEQ; .)
  720     )
  721     Unary<Op> RelExpr<Op,R>
  722           (. OutOp := MakeBinary(Kind, L,R);
  723              L := OutOp;
  724           .)
  725    }
  726  .
  727  /*------------------------------------------------------------------------*/
  728  RelExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind; .)
  729  = ShiftExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  730    { ( "<"       (. Kind := zcCompLT; .)
  731      | ">"       (. Kind := zcCompGT; .)
  732      | "<="      (. Kind := zcCompLE; .)
  733      | ">="      (. Kind := zcCompGE; .)
  734       )
  735      Unary<Op> ShiftExpr<Op,R>
  736           (. OutOp := MakeBinary(Kind, L,R );
  737              L := OutOp;
  738           .)
  739    }
  740  .
  741  /*------------------------------------------------------------------------*/
  742  ShiftExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
  743  = AddExpr<InOp,OutOp> (. L := OutOp; Kind := zcNop; .)
  744    { ("<<"  (. Kind := zcBinaryShiftL; .)
  745      | ">>" (. Kind := zcBinaryShiftR; .)
  746      )
  747      Unary<Op> AddExpr<Op,R>
  748      (. OutOp := MakeOp(Kind,[L,R]);
  749         L := OutOp; .)
  750    }
  751  .
  752  /*------------------------------------------------------------------------*/
  753  AddExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind;.)
  754  = MulExpr<InOp,OutOp>   (. L := OutOp; Kind := zcNop; .)
  755      {( "+"    (. Kind := zcPlus; .)
  756       | "-"    (. Kind := zcMinus; .)
  757       ) Unary<Op> MulExpr<Op,R>
  758           (. 
  759              if (L=nil) or (R=nil) then
  760                ZError('Invalid syntax');
  761              OutOp := MakeBinary(Kind,L,R);
  762              L := OutOp;
  763           .)
  764      }
  765  .
  766  /*------------------------------------------------------------------------*/
  767  MulExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Tmp : TZcOp; Kind : TZcOpKind; .)
  768  = (. OutOp := InOp; Kind := zcNop; .)
  769    { ("*"      (. Kind := zcMul; .)
  770      | "/"     (. Kind := zcDiv; .)
  771      | "%"     (. Kind := zcMod; .)
  772      ) Unary<Tmp>
  773           (. OutOp := MakeBinary(Kind,InOp,Tmp);
  774              InOp := OutOp;
  775           .)
  776      }
  777  .
  778  /*------------------------------------------------------------------------*/
  779  Unary<var OutOp : TZcOp>         (. var LastOp,Tmp : TZcOp; Kind : TZcOpKind; .)
  780  =       (. LastOp := nil; Kind := zcNop; .)
  781    {
  782      (
  783        /* "+" | */
  784        "-"   (. Kind := zcNegate; .) |
  785        "++"  (. Kind := zcPreInc; .) |    
  786        "--"  (. Kind := zcPreDec; .) |
  787        "!"   (. Kind := zcNot; .)
  788        /* | "~" | "*" */
  789      )
  790      (.
  791         if Kind in [zcNegate,zcNot] then
  792         begin
  793           Tmp := MakeOp(Kind);
  794           if LastOp<>nil then
  795             LastOp.Children.Add(Tmp);
  796           LastOp := Tmp;
  797         end else if Assigned(LastOp) then
  798           ZError('-- and ++ cannot be combined with other unary ops');
  799      .)
  800    }
  801    Primary<Tmp>
  802      (.
  803         if Kind in [zcNop,zcNegate,zcNot] then
  804         begin
  805           if LastOp<>nil then
  806           begin
  807             LastOp.Children.Add(Tmp);
  808             OutOp := LastOp;
  809           end else
  810             OutOp := Tmp;
  811         end else
  812         begin
  813           OutOp := MakePrePostIncDec(Kind,Tmp);
  814         end;
  815      .)
  816  .
  817  
  818  
  819  
  820  /*------------------------------------------------------------------------*/
  821  InvokeArgument<var OutOp : TZcOp; Ci : TZComponentInfo>
  822  (.
  823    var
  824      Op : TZcOp;
  825      Prop : TZProperty;
  826  .)
  827  = (. OutOp := nil; Op := nil; .)
  828    ident (.
  829      Prop := Ci.GetProperties.GetByName(LexString);
  830      if Prop=nil then
  831        ZError(LexString + ' is not a property of ' + Ci.ZClassName);
  832      if not (Prop.PropertyType in [zptFloat,zptInteger,zptByte,zptBoolean,zptString,zptComponentRef]) then
  833        ZError(LexString + ' property of ' + Ci.ZClassName + ' is of a datatype that cannot be set using inline component invokation syntax');
  834      OutOp := MakeOp(zcIdentifier);
  835      OutOp.Id := LexString;
  836    .)
  837    ":" Expr<Op>
  838    (. if Op=nil then
  839         ZError('Missing argument');
  840       Op := MakeCompatible(Op, PropTypeToZType(Prop.PropertyType));
  841       OutOp.Children.Add(Op);
  842    .)
  843  .
  844  
  845  
  846  /*------------------------------------------------------------------------*/
  847  ReinterpretCast<var OutOp : TZcOp>
  848  (.
  849  var
  850    Op : TZcOp;
  851    Typ : TZcDataType;
  852  .)
  853  = "reinterpret_cast" "<" SimpleType<Typ> ">"
  854    "(" Expr<Op> ")"
  855    (.
  856       OutOp := TZcOpReinterpretCast.Create(nil);
  857       OutOp.Children.Add(Op);
  858       (OutOp as TZcOpReinterpretCast).Typ := Typ;
  859    .)
  860  .
  861  
  862  /*------------------------------------------------------------------------*/
  863  Primary<var OutOp : TZcOp>
  864  (. var Op : TZcOp; S : string; V : double;
  865       Typ : TZcDataType;
  866       Ci : TZComponentInfo;
  867  .)
  868  =            (. OutOp := nil; .)
  869    (
  870      ident    (. OutOp := CheckPrimary( MakeIdentifier(LexString) );  .)
  871    | "@" ident (.
  872         Ci := ComponentManager.GetInfoFromName(LexString);
  873         if not Ci.ZClass.InheritsFrom(TCommand) then
  874           ZError('Class must inherit TCommand: ' + LexString);
  875         OutOp := TZcOpInvokeComponent.Create(nil);
  876         OutOp.Id := LexString;
  877      .)
  878      "(" (. IsInInvokeArg := True; .)
  879          [InvokeArgument<Op,Ci>       (. OutOp.Children.Add(Op); .)
  880            {"," InvokeArgument<Op,Ci> (. OutOp.Children.Add(Op); .)
  881            }
  882          ]
  883      ")" (. IsInInvokeArg := False; .)
  884    | Literal<Typ>  (.
  885          if Typ.Kind in [zctString,zctNull] then
  886            OutOp := TZcOpLiteral.Create(Typ.Kind,LexString)
  887          else
  888          begin
  889            try
  890              S := LexString;
  891              V := ZcStrToFloat(S);
  892              OutOp := TZcOpLiteral.Create(Typ.Kind,V)
  893            except on EConvertError do
  894              SynError(200);
  895            end;
  896          end;
  897       .)
  898    | "(" Expr<OutOp> ")"
  899  /*  | ( "bool"   | "byte"   | "char" | "decimal" | "double"
  900      | "float"  | "int"    | "long" | "object"  | "sbyte"
  901      | "short"  | "string" | "uint" | "ulong"   | "ushort"
  902      ) "." ident */
  903    | ReinterpretCast<OutOp>
  904    )
  905  
  906    {
  907    "++" (. OutOp := MakePrePostIncDec(zcPostInc,OutOp); .)
  908    | "--" (. OutOp := MakePrePostIncDec(zcPostDec,OutOp); .)
  909  
  910  /*  | "->" ident */
  911  
  912    | "." (. IsInIdent := True; .) ident (.
  913  
  914        if not (OutOp.Kind in [zcIdentifier,zcSelect,zcFuncCall,zcArrayAccess]) then
  915          ZError('Invalid use of "."');
  916  
  917        Op := MakeOp(zcSelect,LexString);
  918        Op.Children.Add(OutOp);
  919  
  920        OutOp := CheckPrimary(Op);
  921  
  922        IsInIdent := False;
  923  
  924      .)
  925  
  926    | "(" (. Assert(OutOp.Kind=zcIdentifier);
  927             OutOp.Kind:=zcFuncCall;
  928           .)
  929          [Argument<Op> (. OutOp.Children.Add(Op); .)
  930            {"," Argument<Op> (. OutOp.Children.Add(Op); .)
  931            }
  932          ]
  933          (.
  934             if not VerifyFunctionCall(OutOp,S) then
  935               ZError(S);
  936          .)
  937      ")"
  938  
  939    | "[" (. Assert(OutOp.Kind in [zcIdentifier,zcSelect]);
  940             Op := TZcOpArrayAccess.Create(OutOp.Id, OutOp);
  941             OutOp := Op;
  942           .)
  943  
  944          Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .)
  945            {"," Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .) }
  946          "]"
  947    }
  948  .
  949  /*------------------------------------------------------------------------*/
  950  Literal<var Typ : TZcDataType>
  951  = intCon (. Typ.Kind :=zctInt; .) |
  952    realCon (. Typ.Kind := zctFloat; .) |
  953    stringCon (. Typ.Kind := zctString; .)
  954    | "null" (. Typ.Kind := zctNull; .)
  955    /* | "true" | "false"  */
  956  .
  957  
  958  END Zc.




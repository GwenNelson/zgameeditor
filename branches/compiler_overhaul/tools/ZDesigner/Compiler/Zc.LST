

Compiled: den 3 september 2010 - 15:56:45
Output sent to: C:\DATA\Delphi32\ZzDC_Public\tools\ZDesigner\Compiler\

================================================================================
Switches:
  Generate version information
  Use Hash functions to lookup literals
  Use SysUtils.SameText for case insensitive compares
  Treat space character as whitespace


================================================================================
Grammar Tests:
  Deletable symbols:
     MulExpr
     AddExpr
     ShiftExpr
     RelExpr
     EqlExpr
     BitAndExpr
     BitXorExpr
     BitOrExpr
     AndExpr
     OrExpr
     ZcFuncBody
  Undefined nonterminals:   -- none --
  Unreachable nonterminals: -- none --
  Circular derivations:     -- none --
  Underivable nonterminals: -- none --
  LL(1) conditions:
     LL(1) error in EmbeddedStatement: "else" is the start & successor of a deletable structure

================================================================================
Time Compiled: den 3 september 2010 @ 15:56:45

Statistics:
  number of terminals:        87 (limit  2561)
  number of non-terminals:    33 (limit  1281)
  number of pragmas:           0 (limit  2474)
  number of symbolnodes:     120 (limit  2561)
  number of graphnodes:      388 (limit 15001)
  number of conditionsets:     1 (limit   101)
  number of charactersets:    25 (limit  4001)


================================================================================
Listing

    1  COMPILER Zc
    2  
    3  DELPHI
    4    USES (INTERFACE) Zc_Ops,contnrs,uSymTab,ZClasses
    5    USES (IMPLEMENTATION) Compiler
    6  
    7    TYPE
    8  
    9  
   10    PUBLIC
   11      ZFunctions : TObjectList;
   12      SymTab : TSymbolTable;
   13      ReturnType : TZcDataType;
   14      AllowFunctions : boolean;
   15      GlobalNames : TObjectList;
   16    PRIVATE
   17      CurrentFunction : TZcOpFunctionUserDefined;
   18      procedure CleanUp;
   19      procedure ZError(const S : string);
   20      procedure AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   21    CREATE
   22      ZFunctions := TObjectList.Create(False);
   23    DESTROY
   24      CleanUp;
   25    ERRORS
   26      200 : Result := 'Not a floating point value';
   27      201 : Result := 'Name already defined in this scope';
   28      202 : Result := 'Return value expected';
   29      203 : Result := 'Function should not return a value';
   30      204 : Result := 'Only function definitions are allowed here';
   31      205 : Result := 'Syntax not supported';
   32  END_DELPHI
   33  
   34  (* Arbitrary Code *)
   35  
   36  
   37  
   38  
   39  procedure T-->Grammar<--.AddSwitchLabel(SwitchOp : TZcOpSwitch; var Op: TZcOp);
   40  begin
   41    if Op=nil then
   42    begin
   43      if SwitchOp.HasDefault then
   44        ZError('Only one default statement is allowed.');
   45      SwitchOp.HasDefault := True;
   46    end else
   47      Op := MakeCompatible(Op,SwitchOp.ValueOp.GetDataType);
   48    SwitchOp.CaseOps.Last.Children.Add( Op );
   49    Op := nil;
   50  end;
   51  
   52  procedure T-->Grammar<--.CleanUp;
   53  begin
   54    Zc_Ops.FunctionCleanUps.Clear;
   55    ZFunctions.Free;
   56  end;
   57  
   58  procedure T-->Grammar<--.ZError(const S : string);
   59  var
   60    E : EParseError;
   61  begin
   62    E := EParseError.Create(S);
   63    E.Message := S;
   64    E.Line := (Scanner as TZcScanner).CurrentSymbol.Line;
   65    E.Col := (Scanner as TZcScanner).CurrentSymbol.Col;
   66    raise E;
   67  end;
   68  
   69  
   70  CHARACTERS
   71  
   72          tab                = CHR(9). /*  9 = tabulator */
   73          eol                = CHR(10). /* 10 = line feed */
   74          cr                 = CHR(13). /* 13 = carriage return */
   75          newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
   76  
   77          letter             = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
   78          digit              = "0123456789".
   79          hexDigit           = digit + "ABCDEFabcdef".
   80          notDigit           = ANY - digit.
   81  
   82          char               = ANY - "'" - '\' - newLine.
   83          verbatimStringChar = ANY - '"'.
   84          regularStringChar  = ANY - '"' - '\' - newLine.
   85          notNewLine         = ANY - newLine .
   86  
   87  
   88  TOKENS
   89  
   90    /*--------------------------------------------------------------------------------*/
   91          intCon =
   92                  ( digit {digit}
   93                  | ("0x" | "0X") hexDigit {hexDigit}
   94                  )
   95                  (* ["U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu"] *)
   96                  .
   97    /*--------------------------------------------------------------------------------*/
   98          realCon =
   99                  "." digit {digit}
  100                  [("e" | "E") ["+" | "-"] digit {digit}]
  101                  ["F" | "f" | "D" | "d" | "M" | "m"]
  102          | digit {digit}
  103                  ( "." digit {digit}
  104                          [("e" | "E" ) ["+" | "-"] digit {digit} ]
  105                          ["F" | "f" | "D" | "d" | "M" | "m"]
  106                  | ("e" | "E") ["+" | "-"] digit {digit}
  107                          ["F" | "f" | "D" | "d" | "M" | "m"]
  108                  | "F" | "f" | "D" | "d" | "M" | "m"
  109                  ).
  110    /*--------------------------------------------------------------------------------*/
  111          stringCon =
  112                  '"'    { regularStringChar
  113            | "\'" | '\"' | "\\" | "\n"
  114            }
  115                  '"'.
  116  
  117          ident = ['@'] letter { letter | digit }.
  118  
  119  
  120          /*----- operators and special characters needed in LL(1) resolvers --------------*/
  121          and    = "&".
  122          assgn  = "=".
  123          colon  = ":".
  124          comma  = ",".
  125          dec    = "--".
  126          div    = "/".
  127          dot    = ".".
  128          eq     = "==".
  129          gt     = ">".
  130          gte    = ">=".
  131          inc    = "++".
  132          lbrace = "{".
  133          lbrack = "[".
  134          lpar   = "(".
  135          lshift = "<<".
  136          lt     = "<".
  137          lte    = "<=".
  138          minus  = "-".
  139          mod    = "%".
  140          neq    = "!=".
  141          not    = "!".
  142          or     = "|".
  143          plus   = "+".
  144          rbrace = "}".
  145          rbrack = "]".
  146          rpar   = ")".
  147          rshift = ">>".
  148          scolon = ";".
  149          tilde  = "~".
  150          times  = "*".
  151          xor    = "^".
  152  
  153  
  154  
  155  COMMENTS FROM "/*" TO "*/"
  156  COMMENTS FROM "//" TO eol
  157  
  158  IGNORE eol + cr + tab
  159  
  160  PRODUCTIONS
  161  
  162  /*------------------------------------------------------------------------*
  163   *--------------------------- Declarations -------------------------------*
  164   *------------------------------------------------------------------------*/
  165  
  166  Zc (. var 
  167          I : integer;
  168          Func : TZcOpFunctionUserDefined; 
  169          Typ : TZcDataType;
  170      .)
  171  = 
  172  
  173    IF AllowFunctions THEN 
  174    BEGIN { 
  175      ("void" (. Typ := zctVoid; .) | Type<Typ> ) ident (. 
  176            if SymTab.Contains(LexString) then
  177              ZError('Name already defined: ' + LexString);
  178              
  179            Func := TZcOpFunctionUserDefined.Create(GlobalNames);
  180            Func.Id := LexString;
  181            Func.ReturnType := Typ;
  182            SymTab.Add(Func.Id,Func);
  183            ZFunctions.Add(Func); 
  184            Self.CurrentFunction := Func;
  185            SymTab.PushScope;
  186            try
  187         .)
  188      "(" [ FormalParams ] ")" "{" ZcFuncBody "}"  
  189          (. 
  190            finally
  191            SymTab.PopScope;
  192            end;
  193          .)
  194      } 
  195    END ELSE
  196    BEGIN
  197  
  198  
  199    (. 
  200         Func := TZcOpFunctionUserDefined.Create(nil);
  201         Func.ReturnType := Self.ReturnType;
  202         Self.CurrentFunction := Func;
  203         SymTab.PushScope;
  204         try
  205         ZFunctions.Add(Func);
  206    .)
  207  
  208    /* A zc-expression is treated like the body of a nameless function
  209       to allow local var declarations  */
  210  
  211    ZcFuncBody
  212  
  213    (. 
  214         finally
  215         SymTab.PopScope;
  216         end;
  217    .)
  218    END
  219  
  220  (.  
  221         if Successful then
  222         begin
  223           for I:=0 to ZFunctions.Count-1 do
  224             ZFunctions[I] := TZcOp(ZFunctions[I]).Optimize;
  225         end;
  226  .)
  227  .
  228  
  229  /*------------------------------------------------------------------------*/
  230  
  231  ZcFuncBody (. var Op : TZcOp; .)
*****  ^ ZcFuncBody is a deletable symbol
  232  =  {  (. Op:=nil; .)
  233        Statement<Op>
  234        (. if Op<>nil then
  235             CurrentFunction.Statements.Add(Op);
  236           Op := nil;
  237        .)
  238     }
  239  .
  240  
  241  /*------------------------------------------------------------------------*/
  242  FormalParams                    
  243  = ( Par ["," FormalParams] )
  244  .
  245  /*------------------------------------------------------------------------*/
  246  Par (. var Typ : TZcDataType; Arg : TZcOpArgumentVar; .)
  247  = Type<Typ> ident
  248       (.
  249          if SymTab.ScopeContains(LexString) then
  250            SynError(201)
  251          else
  252          begin
  253            Arg := TZcOpArgumentVar.Create(GlobalNames);
  254            Arg.Id := LexString;
  255            Arg.Typ := Typ;
  256            CurrentFunction.AddArgument(Arg);
  257            SymTab.Add(Arg.Id,Arg);
  258          end;
  259       .)
  260  .
  261  /*------------------------------------------------------------------------*/
  262  
  263  LocalVarDecl<var OutOp : TZcOp> (. var Typ : TZcDataType; .)
  264  = (. OutOp := nil; .)
  265    Type<Typ> LocalVar<Typ,OutOp> {"," LocalVar<Typ,OutOp>}
  266  .
  267  
  268  /*------------------------------------------------------------------------*/
  269  
  270  LocalVar<Typ : TZcDataType; var OutOp : TZcOp> (. var Loc : TZcOpLocalVar; InitOp : TZcOp; .)
  271  = ident
  272       (. 
  273          if SymTab.ScopeContains(LexString) then
  274            ZError('Name already defined: ' + LexString);
  275  
  276          Loc := TZcOpLocalVar.Create(nil);
  277          Loc.Id := LexString;
  278          Loc.Typ := Typ;        
  279       .)
  280       [ "=" Init<InitOp> (. Loc.InitExpression:=InitOp; .) ]
  281       (. 
  282          SymTab.Add(Loc.Id,Loc);
  283          CurrentFunction.AddLocal(Loc);
  284  
  285          if Assigned(Loc.InitExpression) then
  286          begin
  287            //Generate tree for initial assignment
  288            if OutOp=nil then
  289              OutOp := MakeOp(zcBlock);
  290            OutOp.Children.Add( MakeAssign(atAssign, MakeOp(zcIdentifier,Loc.Id),Loc.InitExpression) );
  291          end;
  292          
  293       .)
  294  .
  295  
  296  /*------------------------------------------------------------------------*/
  297  
  298  Init<var OutOp : TZcOp>
  299  = Expr<OutOp>
  300  .
  301  
  302  /*------------------------------------------------------------------------*/
  303  Argument<var OutOp : TZcOp>
  304  = /* ["ref" | "out"] */
  305    (. OutOp := nil; .)
  306    Expr<OutOp>
  307    (. if OutOp=nil then ZError('Missing argument'); .)
  308  .
  309  
  310  /*------------------------------------------------------------------------*
  311   *-------------------------------- Types ---------------------------------*
  312   *------------------------------------------------------------------------*/
  313  
  314  /* Attribute "type" is needed for error messages in EmbeddedStatement     *
  315   * and for array creation expressions                                     */
  316  
  317  
  318  Type<var Typ : TZcDataType>
  319  = ( SimpleType<Typ> )
  320  .
  321  
  322  /*------------------------------------------------------------------------*/
  323  
  324  SimpleType<var Typ : TZcDataType>
  325  /* = IntType | "float" | "double" | "decimal" | "bool" */
  326  = "float" (. Typ := zctFloat; .) |
  327    "int" (. Typ := zctInt; .) |
  328    "string" (. Typ := zctString; .)
  329  .
  330  
  331  /*------------------------------------------------------------------------*/
  332  
  333  /* IntType
  334  = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char"
  335  . */
  336  
  337  
  338  /*------------------------------------------------------------------------*
  339   *------------------------------ Statements ------------------------------*
  340   *------------------------------------------------------------------------*/
  341  
  342  Statement<var OutOp : TZcOp>
  343  = (. OutOp := nil; .)
  344  /* "const" Type ident "=" Expr<Op> {"," ident "=" Expr<Op>} ";" */
  345  (*IF IsLocalVarDecl THEN
  346  BEGIN
  347    LocalVarDecl ";"
  348  END
  349  |  EmbeddedStatement<OutOp> *)
  350  
  351  LocalVarDecl<OutOp> ";"
  352  | EmbeddedStatement<OutOp>
  353    /* LL(1) confict between LocalVarDecl and StatementExpr: *
  354     * ident {"." ident} { "[" ...                           */
  355  .
  356  
  357  /*------------------------------------------------------------------------*/
  358  EmbeddedStatement<var OutOp : TZcOp>
  359    (. var
  360         Op,IfOp,IfBody,ElseOp : TZcOp;
  361         ForInitOp,ForCondOp,ForIncOp,ForBodyOp : TZcOp;
  362         WhileCondOp,WhileBodyOp : TZcOp;
  363         SwitchOp : TZcOpSwitch;
  364    .)
  365  = Block<OutOp>
  366  | ";"   (. OutOp := MakeOp(zcNop); .)
  367  | StatementExpr<OutOp> ";"
  368  | "if" (. ElseOp := nil; .)
  369    "(" Expr<IfOp> ")" EmbeddedStatement<IfBody> ["else" EmbeddedStatement<ElseOp>]
*****  ^  in EmbeddedStatement:  "else" is the start & successor of a deletable structure
  370          (. OutOp := MakeOp(zcIf,[IfOp,IfBody,ElseOp]); .)
  371   | "switch" "(" Expr<Op> ")"
  372        (.
  373           SwitchOp := TZcOpSwitch.Create(nil);
  374           SwitchOp.ValueOp := Op;
  375           OutOp := SwitchOp;
  376        .)
  377     "{" {
  378       (. SwitchOp.CaseOps.Add( MakeOp(zcNop) ); SwitchOp.StatementsOps.Add( MakeOp(zcNop) ); .)
  379       SwitchSection<SwitchOp>
  380     } "}"
  381   | "while"
  382       (. try
  383           SymTab.PushScope;
  384           WhileCondOp := nil; WhileBodyOp := nil; .)
  385     "(" Expr<WhileCondOp> ")" EmbeddedStatement<WhileBodyOp>
  386     (.
  387           OutOp := MakeOp(zcWhile,[WhileCondOp,WhileBodyOp]);
  388         finally
  389           SymTab.PopScope;
  390         end;
  391     .)
  392   /* | "do" EmbeddedStatement<Op> "while" "(" Expr<Op> ")" ";" */
  393   | "for"
  394      (. try
  395           SymTab.PushScope;
  396           ForInitOp :=nil; ForCondOp := nil; ForIncOp := nil; .)
  397     "(" [ForInit<ForInitOp>] ";" [Expr<ForCondOp>] ";" [ForInc<ForIncOp>] ")" EmbeddedStatement<ForBodyOp>
  398     (.
  399           OutOp := MakeOp(zcForLoop,[ForInitOp,ForCondOp,ForIncOp,ForBodyOp]);
  400         finally
  401           SymTab.PopScope;
  402         end;
  403     .)
  404  /* | "foreach" "(" Type ident "in" Expr<Op> ")" EmbeddedStatement<Op> */
  405   | "break" ";"    (. OutOp := MakeOp(zcBreak); .)
  406   | "continue" ";" (. OutOp := MakeOp(zcContinue); .)
  407   | (. Op := nil; .) "return" [ Expr<Op> ] ";"
  408      (.
  409          if (Op=nil) then
  410          begin
  411            if CurrentFunction.ReturnType<>zctVoid then
  412              SynError(202)
  413            else
  414              OutOp := MakeOp(zcReturn);
  415          end else
  416          begin
  417            if CurrentFunction.ReturnType=zctVoid then
  418              SynError(203)
  419            else
  420              OutOp := MakeOp(zcReturn,[ MakeCompatible(Op,CurrentFunction.ReturnType) ]);
  421          end;
  422      .)
  423  .
  424  /*------------------------------------------------------------------------*/
  425  
  426  Block<var OutOp : TZcOp>
  427    (. var
  428         Op : TZcOp;
  429    .)
  430  = (. Op := nil;
  431       OutOp := MakeOp(zcBlock);
  432    .)
  433    "{" {Statement<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) } "}".
  434  
  435  /*------------------------------------------------------------------------*/
  436  StatementExpr<var OutOp : TZcOp>           (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  437  = (. Op1 :=nil; Op2 := nil; .)
  438    Unary<Op1>
  439    ( AssignOp<Kind> Expr<Op2>
  440      (.
  441        if Op2<>nil then
  442          OutOp := MakeAssign(Kind,Op1,Op2);
  443      .)
  444    |                             (. OutOp := Op1; .)
  445    )
  446  .
  447  
  448  /*------------------------------------------------------------------------*/
  449  AssignOp<var Kind : TZcAssignType>
  450  = "="     (. Kind := atAssign; .)
  451    | "+="  (. Kind := atPlusAssign; .)
  452    | "-="  (. Kind := atMinusAssign; .)
  453    | "*="  (. Kind := atMulAssign; .)
  454    | "/="  (. Kind := atDivAssign; .)
  455  /*  | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" */
  456  .
  457  
  458  /*------------------------------------------------------------------------*/
  459  
  460  SwitchSection<SwitchOp : TZcOpSwitch> (. var Op : TZcOp; .)
  461  = (. Op := nil; .)
  462    SwitchLabel<Op>   (. AddSwitchLabel(SwitchOp,Op); .)
  463    {
  464      SwitchLabel<Op> (. AddSwitchLabel(SwitchOp,Op); .)
  465    }
  466    Statement<Op>    (. SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  467    {
  468       Statement<Op> (. SwitchOp.StatementsOps.Last.Children.Add(Op); .)
  469    }
  470  .
  471  
  472  /*------------------------------------------------------------------------*/
  473  
  474  SwitchLabel<var OutOp : TZcOp>
  475  = "case" Expr<OutOp> ":"
  476  | "default" ":"
  477  .
  478  
  479  /*------------------------------------------------------------------------*/
  480  
  481  ForInit<var OutOp : TZcOp>     (. var Op : TZcOp; .)
  482  = (. Op:=nil; OutOp := MakeOp(zcBlock); .)
  483  (
  484  LocalVarDecl<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  485  | (. Op:=nil; .) StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .)
  486    { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  487  )
  488  .  
  489  
  490  /*------------------------------------------------------------------------*/
  491  
  492  ForInc<var OutOp : TZcOp>      (. var Op : TZcOp; .)
  493  = (. Op:=nil; 
  494       OutOp := MakeOp(zcBlock);
  495    .) 
  496  (
  497  StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) 
  498  { (. Op:=nil; .) "," StatementExpr<Op> (. if Assigned(Op) then OutOp.Children.Add(Op); .) }
  499  )
  500  . 
  501  
  502  
  503  /*------------------------------------------------------------------------*
  504   *----------------------------- Expressions ------------------------------*
  505   *------------------------------------------------------------------------*/
  506  
  507  
  508  Expr<var OutOp : TZcOp>   (. var Op1,Op2 : TZcOp; Kind : TZcAssignType; .)
  509  = (. Op1 :=nil; Op2 := nil; .)
  510    Unary<Op1>
  511    ( OrExpr<Op1,OutOp>
  512        ["?" Expr<Op1> ":" Expr<Op2>
  513           (. if (OutOp=nil) or (Op1=nil) or (Op2=nil) then
  514                SynError(205)
  515              else
  516                OutOp := MakeOp(zcConditional,[OutOp,Op1,Op2]);
  517           .)
  518        ]
  519    | AssignOp<Kind> Expr<Op2>    (. OutOp := MakeAssign(Kind,Op1, MakeCompatible(Op2,Op1.GetDataType) ); .)
  520    )
  521  .
  522  /*------------------------------------------------------------------------*/
  523  OrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
*****  ^ OrExpr is a deletable symbol
  524  = AndExpr<InOp,OutOp>   (. L := OutOp; .)
  525      {"||" Unary<Op> AndExpr<Op,R>
  526        (. OutOp := MakeOp(zcOr,[L,R]);
  527           L := OutOp; .)
  528      }
  529  .
  530  
  531  
  532  /*------------------------------------------------------------------------*/
  533  AndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
*****  ^ AndExpr is a deletable symbol
  534  = BitOrExpr<InOp,OutOp>  (. L := OutOp; .)
  535      {"&&" Unary<Op> BitOrExpr<Op,R>
  536        (. OutOp := MakeOp(zcAnd,[L,R]);
  537           L := OutOp; .)
  538      }
  539  .
  540  /*------------------------------------------------------------------------*/
  541  BitOrExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
*****  ^ BitOrExpr is a deletable symbol
  542  = BitXorExpr<InOp,OutOp> (. L := OutOp; .)
  543    {"|" Unary<Op> BitXorExpr<Op,R>
  544      (. OutOp := MakeOp(zcBinaryOr,[L,R]);
  545         L := OutOp; .)
  546    }
  547  .
  548  
  549  /*------------------------------------------------------------------------*/
  550  BitXorExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op : TZcOp; .)
*****  ^ BitXorExpr is a deletable symbol
  551  = BitAndExpr<InOp,OutOp> {"^" (. SynError(205); .) Unary<Op> BitAndExpr<InOp,OutOp>}
  552  .
  553  
  554  /*------------------------------------------------------------------------*/
  555  BitAndExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; .)
*****  ^ BitAndExpr is a deletable symbol
  556  = EqlExpr<InOp,OutOp> (. L := OutOp; .)
  557    {"&" Unary<Op> EqlExpr<Op,R>
  558      (. OutOp := MakeOp(zcBinaryAnd,[L,R]);
  559         L := OutOp; .)
  560    }
  561  .
  562  
  563  /*------------------------------------------------------------------------*/
  564  EqlExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
*****  ^ EqlExpr is a deletable symbol
  565  = RelExpr<InOp,OutOp>   (. L := OutOp; .)
  566    {( "!="   (. Kind := zcCompNE; .)
  567     | "=="   (. Kind := zcCompEQ; .)
  568     )
  569     Unary<Op> RelExpr<Op,R>
  570           (. OutOp := MakeBinary(Kind, L,R);
  571              L := OutOp;
  572           .)
  573    }
  574  .
  575  /*------------------------------------------------------------------------*/
  576  RelExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind; .)
*****  ^ RelExpr is a deletable symbol
  577  = ShiftExpr<InOp,OutOp>         (. L := OutOp; .)
  578    { ( "<"       (. Kind := zcCompLT; .)
  579      | ">"       (. Kind := zcCompGT; .)
  580      | "<="      (. Kind := zcCompLE; .)
  581      | ">="      (. Kind := zcCompGE; .)
  582       )
  583      Unary<Op> ShiftExpr<Op,R>
  584           (. OutOp := MakeBinary(Kind, L,R );
  585              L := OutOp;
  586           .)
  587    }
  588  .
  589  /*------------------------------------------------------------------------*/
  590  ShiftExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp; Kind : TZcOpKind; .)
*****  ^ ShiftExpr is a deletable symbol
  591  = AddExpr<InOp,OutOp> (. L := OutOp; .)
  592    { ("<<"  (. Kind := zcBinaryShiftL; .)
  593      | ">>" (. Kind := zcBinaryShiftR; .)
  594      )
  595      Unary<Op> AddExpr<Op,R>
  596      (. OutOp := MakeOp(Kind,[L,R]);
  597         L := OutOp; .)
  598    }
  599  .
  600  /*------------------------------------------------------------------------*/
  601  AddExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Op,L,R : TZcOp;  Kind : TZcOpKind;.)
*****  ^ AddExpr is a deletable symbol
  602  = MulExpr<InOp,OutOp>   (. L := OutOp; .)
  603      {( "+"    (. Kind := zcPlus; .)
  604       | "-"    (. Kind := zcMinus; .)
  605       ) Unary<Op> MulExpr<Op,R>
  606           (. 
  607              if (L=nil) or (R=nil) then
  608                ZError('Invalid syntax');
  609              OutOp := MakeBinary(Kind,L,R);
  610              L := OutOp;
  611           .)
  612      }
  613  .
  614  /*------------------------------------------------------------------------*/
  615  MulExpr<InOp : TZcOp; var OutOp : TZcOp>         (. var Tmp : TZcOp; Kind : TZcOpKind; .)
*****  ^ MulExpr is a deletable symbol
  616  =       (. OutOp := InOp; .)
  617    { ("*"      (. Kind := zcMul; .)
  618      | "/"     (. Kind := zcDiv; .)
  619    (*  | "%" *)
  620      ) Unary<Tmp>
  621           (. OutOp := MakeBinary(Kind,InOp,Tmp);
  622              InOp := OutOp;
  623           .)
  624      }
  625  .
  626  /*------------------------------------------------------------------------*/
  627  Unary<var OutOp : TZcOp>         (. var LastOp,Tmp : TZcOp; Kind : TZcOpKind; .)
  628  =       (. LastOp := nil; Kind := zcNop; .)
  629    {
  630      (
  631        (* "+" | *)
  632        "-"   (. Kind := zcNegate; .) |
  633        "++"  (. Kind := zcPreInc; .) |    
  634        "--"  (. Kind := zcPreDec; .) |
  635        "!"   (. Kind := zcNot; .)
  636        (* | "~" | "*" *)
  637      )
  638      (.
  639         if Kind in [zcNegate,zcNot] then
  640         begin
  641           Tmp := MakeOp(Kind);
  642           if LastOp<>nil then
  643             LastOp.Children.Add(Tmp);
  644           LastOp := Tmp;
  645         end else if Assigned(LastOp) then
  646           ZError('-- and ++ cannot be combined with other unary ops');
  647      .)
  648    }
  649    Primary<Tmp>
  650      (.
  651         if Kind in [zcNop,zcNegate,zcNot] then
  652         begin
  653           if LastOp<>nil then
  654           begin
  655             LastOp.Children.Add(Tmp);
  656             OutOp := LastOp;
  657           end else
  658             OutOp := Tmp;
  659         end else 
  660         begin
  661           OutOp := MakePrePostIncDec(Kind,Tmp);
  662         end;
  663      .)
  664  .
  665  /*------------------------------------------------------------------------*/
  666  Primary<var OutOp : TZcOp>         
  667  (. var Op : TZcOp; S : string; V : single;
  668       Typ : TZcDataType;
  669  .)
  670  =            (. OutOp := nil; .)
  671    ( 
  672      ident    (. OutOp := MakeIdentifier(LexString);  .)
  673    | Literal<Typ>  (. 
  674          if Typ=zctString then
  675            OutOp := TZcOpLiteral.Create(Typ,LexString)
  676          else
  677          begin
  678            try
  679              S := LexString;
  680              V := ZcStrToFloat(S);
  681              OutOp := TZcOpLiteral.Create(Typ,V)
  682            except on EConvertError do
  683              SynError(200);
  684            end;
  685          end;
  686       .)
  687    | "(" Expr<OutOp> ")"
  688  (*  | ( "bool"   | "byte"   | "char" | "decimal" | "double" /* predefined type member access */
  689      | "float"  | "int"    | "long" | "object"  | "sbyte"
  690      | "short"  | "string" | "uint" | "ulong"   | "ushort"
  691      ) "." ident *)
  692    )
  693  
  694    {
  695    "++" (. OutOp := MakePrePostIncDec(zcPostInc,OutOp); .)
  696    | "--" (. OutOp := MakePrePostIncDec(zcPostDec,OutOp); .)
  697  
  698  /*  | "->" ident */
  699  
  700    | "." ident (.
  701  
  702        if not (OutOp.Kind in [zcIdentifier,zcSelect]) then
  703          ZError('Invalid use of "."');
  704  
  705        Op := MakeOp(zcSelect,[OutOp]);
  706        Op.Id := LexString;
  707  
  708        OutOp := Op;
  709  
  710      .)
  711  
  712    | "(" (. Assert(OutOp.Kind=zcIdentifier);
  713             OutOp.Kind:=zcFuncCall;
  714           .)
  715          [Argument<Op> (. OutOp.Children.Add(Op); .)
  716            {"," Argument<Op> (. OutOp.Children.Add(Op); .)
  717            }
  718          ]
  719          (.
  720             if not VerifyFunctionCall(OutOp,S) then
  721               ZError(S);
  722          .)
  723      ")"
  724  
  725    | "[" (. Assert(OutOp.Kind=zcIdentifier);
  726             OutOp.Kind:=zcArrayAccess;
  727           .)
  728      Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .)
  729        {"," Expr<Op> (. OutOp.Children.Add( MakeCompatible(Op,zctInt) ); .) }
  730      "]"
  731  
  732    }
  733  .
  734  /*------------------------------------------------------------------------*/
  735  Literal<var Typ : TZcDataType>
  736  = intCon (. Typ :=zctInt; .) |
  737    realCon (. Typ := zctFloat; .) |
  738    stringCon (. Typ := zctString; .)
  739    (* | "true" | "false" | "null" *)
  740  .
  741  
  742  END Zc.

    1 LL(1) error
   11 warnings

